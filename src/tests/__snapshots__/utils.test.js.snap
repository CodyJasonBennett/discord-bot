// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`utils/three loads three.js docs 1`] = `
Array [
  Object {
    "description": "The goal of this section is to give a brief introduction to three.js. We will start by setting up a scene, with a spinning cube. A working example is provided at the bottom of the page in case you get stuck and need help.",
    "name": "Creating a scene",
    "properties": Array [],
    "title": "Creating a scene",
    "url": "https://threejs.org/docs/#manual/en/introduction/Creating-a-scene",
  },
  Object {
    "description": "You can install three.js with [npm](https://www.npmjs.com/) and modern build tools, or get started quickly with just static hosting or a CDN. For most users, installing from npm is the best choice.",
    "name": "Installation",
    "properties": Array [],
    "title": "Installation",
    "url": "https://threejs.org/docs/#manual/en/introduction/Installation",
  },
  Object {
    "description": undefined,
    "name": "Browser support",
    "properties": Array [],
    "title": "Browser support",
    "url": "https://threejs.org/docs/#manual/en/introduction/Browser-support",
  },
  Object {
    "description": "Even though this is becoming less and less of a problem, some devices or browsers may still not support WebGL. The following method allows you to check if it is supported and display a message to the user if it is not.",
    "name": "WebGL compatibility check",
    "properties": Array [],
    "title": "WebGL compatibility check",
    "url": "https://threejs.org/docs/#manual/en/introduction/WebGL-compatibility-check",
  },
  Object {
    "description": "If you use just procedural geometries and don't load any textures, webpages should work straight from the file system, just double-click on HTML file in a file manager and it should appear working in the browser (you'll see *file:///yourFile.html* in the address bar).",
    "name": "How to run things locally",
    "properties": Array [],
    "title": "How to run things locally",
    "url": "https://threejs.org/docs/#manual/en/introduction/How-to-run-things-locally",
  },
  Object {
    "description": undefined,
    "name": "Drawing lines",
    "properties": Array [],
    "title": "Drawing lines",
    "url": "https://threejs.org/docs/#manual/en/introduction/Drawing-lines",
  },
  Object {
    "description": undefined,
    "name": "Creating text",
    "properties": Array [],
    "title": "Creating text",
    "url": "https://threejs.org/docs/#manual/en/introduction/Creating-text",
  },
  Object {
    "description": "3D models are available in hundreds of file formats, each with different purposes, assorted features, and varying complexity. Although [three.js provides many loaders](https://github.com/mrdoob/three.js/tree/dev/examples/jsm/loaders), choosing the right format and workflow will save time and frustration later on. Some formats are difficult to work with, inefficient for realtime experiences, or simply not fully supported at this time.",
    "name": "Loading 3D models",
    "properties": Array [],
    "title": "Loading 3D models",
    "url": "https://threejs.org/docs/#manual/en/introduction/Loading-3D-models",
  },
  Object {
    "description": "Listed here are externally developed compatible libraries and plugins for three.js. This list and the associated packages are maintained by the community and not guaranteed to be up to date. If you'd like to update this list make PR!",
    "name": "Libraries and Plugins",
    "properties": Array [],
    "title": "Libraries and Plugins",
    "url": "https://threejs.org/docs/#manual/en/introduction/Libraries-and-Plugins",
  },
  Object {
    "description": "We want all objects, regardless of their distance from the camera, to appear the same size, even as the window is resized. The key equation to solving this is this formula for the visible height at a given distance: \`\`\` visible_height = 2 * Math.tan( ( Math.PI / 180 ) * camera.fov / 2 ) * distance_from_camera; \`\`\` If we increase the window height by a certain percentage, then what we want is the visible height at all distances to increase by the same percentage. This can not be done by changing the camera position. Instead you have to change the camera field-of-view. [Example](http://jsfiddle.net/Q4Jpu/).",
    "name": "FAQ",
    "properties": Array [],
    "title": "FAQ",
    "url": "https://threejs.org/docs/#manual/en/introduction/FAQ",
  },
  Object {
    "description": "The following is a collection of links that you might find useful when learning three.js.
 If you find something that you'd like to add here, or think that one of the links below is no longer relevant or working, feel free to click the 'edit' button in the bottom right and make some changes!
 Note also that as three.js is under rapid development, a lot of these links will contain information that is out of date - if something isn't working as you'd expect or as one of these links says it should, check the browser console for warnings or errors. Also check the relevant docs pages.",
    "name": "Useful links",
    "properties": Array [],
    "title": "Useful links",
    "url": "https://threejs.org/docs/#manual/en/introduction/Useful-links",
  },
  Object {
    "description": "However, if you know the object will be static, you can disable this and update the transform matrix manually just when needed.",
    "name": "How to update things",
    "properties": Array [],
    "title": "How to update things",
    "url": "https://threejs.org/docs/#manual/en/introduction/How-to-update-things",
  },
  Object {
    "description": "One important aspect in order to improve performance and avoid memory leaks in your application is the disposal of unused library entities. Whenever you create an instance of a *three.js* type, you allocate a certain amount of memory. However, *three.js* creates for specific objects like geometries or materials WebGL related entities like buffers or shader programs which are necessary for rendering. It's important to highlight that these objects are not released automatically. Instead, the application has to use a special API in order to free such resources. This guide provides a brief overview about how this API is used and what objects are relevant in this context.",
    "name": "How to dispose of objects",
    "properties": Array [],
    "title": "How to dispose of objects",
    "url": "https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects",
  },
  Object {
    "description": "This guide provides a brief overview of the basic components of a web-based VR application made with three.js.",
    "name": "How to create VR content",
    "properties": Array [],
    "title": "How to create VR content",
    "url": "https://threejs.org/docs/#manual/en/introduction/How-to-create-VR-content",
  },
  Object {
    "description": "Many three.js applications render their 3D objects directly to the screen. Sometimes, however, you want to apply one or more graphical effects like Depth-Of-Field, Bloom, Film Grain or various types of Anti-aliasing. Post-processing is a widely used approach to implement such effects. First, the scene is rendered to a render target which represents a buffer in the video card's memory. In the next step one or more post-processing passes apply filters and effects to the image buffer before it is eventually rendered to the screen.",
    "name": "How to use post-processing",
    "properties": Array [],
    "title": "How to use post-processing",
    "url": "https://threejs.org/docs/#manual/en/introduction/How-to-use-post-processing",
  },
  Object {
    "description": "Three.js uses *matrices* to encode 3D transformationsâ€”translations (position), rotations, and scaling. Every instance of Object3D has a matrix which stores that object's position, rotation, and scale. This page describes how to update an object's transformation.",
    "name": "Matrix transformations",
    "properties": Array [],
    "title": "Matrix transformations",
    "url": "https://threejs.org/docs/#manual/en/introduction/Matrix-transformations",
  },
  Object {
    "description": "Within the three.js animation system you can animate various properties of your models: the bones of a skinned and rigged model, morph targets, different material properties (colors, opacity, booleans), visibility and transforms. The animated properties can be faded in, faded out, crossfaded and warped. The weight and time scales of different simultaneous animations on the same object as well as on different objects can be changed independently. Various animations on the same and on different objects can be synchronized.
 To achieve all this in one homogeneous system, the three.js animation system [has completely changed in 2015](https://github.com/mrdoob/three.js/issues/6881) (beware of outdated information!), and it has now an architecture similar to Unity/Unreal Engine 4. This page gives a short overview of the main components of the system and how they work together.",
    "name": "Animation system",
    "properties": Array [],
    "title": "Animation system",
    "url": "https://threejs.org/docs/#manual/en/introduction/Animation-system",
  },
  Object {
    "description": "This article shows how to get three.js into a [node.js](https://nodejs.org/en/) environment so that you can execute automated tests. Tests can be run on the command line, or by automated CI tools like [Travis](https://travis-ci.org/).",
    "name": "Testing with NPM",
    "properties": Array [],
    "title": "Testing with NPM",
    "url": "https://threejs.org/docs/#manual/en/buildTools/Testing-with-NPM",
  },
  Object {
    "description": "AnimationActions schedule the performance of the animations which are stored in AnimationClips.
 Note: Most of AnimationAction's methods can be chained.
 For an overview of the different elements of the three.js animation system see the \\"Animation System\\" article in the \\"Next Steps\\" section of the manual.",
    "name": "AnimationAction",
    "properties": Array [
      Object {
        "description": "If *clampWhenFinished* is set to true the animation will automatically be paused on its last frame.
 If *clampWhenFinished* is set to false, enabled will automatically be switched to false when the last loop of the action has finished, so that this action has no further impact.
 Default is false.
 Note: *clampWhenFinished* has no impact if the action is interrupted (it has only an effect if its last loop has really finished).",
        "name": "clampWhenFinished",
        "title": "AnimationAction.clampWhenFinished: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.clampWhenFinished",
      },
      Object {
        "description": "Setting *enabled* to *false* disables this action, so that it has no impact. Default is *true*.
 When the action is re-enabled, the animation continues from its current time (setting *enabled* to *false* doesn't reset the action).
 Note: Setting *enabled* to *true* doesnâ€™t automatically restart the animation. Setting *enabled* to *true* will only restart the animation immediately if the following condition is fulfilled: paused is *false*, this action has not been deactivated in the meantime (by executing a stop or reset command), and neither weight nor timeScale is 0.",
        "name": "enabled",
        "title": "AnimationAction.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.enabled",
      },
      Object {
        "description": "The looping mode (can be changed with setLoop). Default is THREE.LoopRepeat (with an infinite number of repetitions)
 Must be one of these constants:
 THREE.LoopOnce - playing the clip once,
 THREE.LoopRepeat - playing the clip with the choosen number of *repetitions*, each time jumping from the end of the clip directly to its beginning,
 THREE.LoopPingPong - playing the clip with the choosen number of *repetitions*, alternately playing forward and backward.",
        "name": "loop",
        "title": "AnimationAction.loop: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.loop",
      },
      Object {
        "description": "Setting *paused* to *true* pauses the execution of the action by setting the effective time scale to 0. Default is *false*.",
        "name": "paused",
        "title": "AnimationAction.paused: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.paused",
      },
      Object {
        "description": "The number of repetitions of the performed AnimationClip over the course of this action. Can be set via setLoop. Default is *Infinity*.
 Setting this number has no effect, if the loop mode is set to THREE.LoopOnce.",
        "name": "repetitions",
        "title": "AnimationAction.repetitions: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.repetitions",
      },
      Object {
        "description": "The local time of this action (in seconds, starting with 0).
 The value gets clamped or wrapped to 0...clip.duration (according to the loop state). It can be scaled relativly to the global mixer time by changing timeScale (using setEffectiveTimeScale or setDuration).",
        "name": "time",
        "title": "AnimationAction.time: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.time",
      },
      Object {
        "description": "Scaling factor for the time. A value of 0 causes the animation to pause. Negative values cause the animation to play backwards. Default is 1.
 Properties/methods concerning *timeScale* (respectively *time*) are: getEffectiveTimeScale, halt, paused, setDuration, setEffectiveTimeScale, stopWarping, syncWith, warp.",
        "name": "timeScale",
        "title": "AnimationAction.timeScale: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.timeScale",
      },
      Object {
        "description": "The degree of influence of this action (in the interval [page:.crossFadeFrom crossFadeFrom, crossFadeTo, enabled, fadeIn, fadeOut, getEffectiveWeight, setEffectiveWeight, stopFading.",
        "name": "weight",
        "title": "AnimationAction.weight: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.weight",
      },
      Object {
        "description": "Enables smooth interpolation without separate clips for start, loop and end. Default is *true*.",
        "name": "zeroSlopeAtEnd",
        "title": "AnimationAction.zeroSlopeAtEnd: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.zeroSlopeAtEnd",
      },
      Object {
        "description": "Enables smooth interpolation without separate clips for start, loop and end. Default is *true*.",
        "name": "zeroSlopeAtStart",
        "title": "AnimationAction.zeroSlopeAtStart: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.zeroSlopeAtStart",
      },
      Object {
        "description": "Causes this action to fade in, fading out another action simultaneously, within the passed time interval. This method can be chained.
 If warpBoolean is true, additional warping (gradually changes of the time scales) will be applied.
 Note: Like with *fadeIn*/*fadeOut*, the fading starts/ends with a weight of 1.",
        "name": "crossFadeFrom",
        "title": "AnimationAction.crossFadeFrom( fadeOutAction: AnimationAction, durationInSeconds: Number, warpBoolean: Boolean ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.crossFadeFrom",
      },
      Object {
        "description": "Causes this action to fade out, fading in another action simultaneously, within the passed time interval. This method can be chained.
 If warpBoolean is true, additional warping (gradually changes of the time scales) will be applied.
 Note: Like with *fadeIn*/*fadeOut*, the fading starts/ends with a weight of 1.",
        "name": "crossFadeTo",
        "title": "AnimationAction.crossFadeTo( fadeInAction: AnimationAction, durationInSeconds: Number, warpBoolean: Boolean ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.crossFadeTo",
      },
      Object {
        "description": "Increases the weight of this action gradually from 0 to 1, within the passed time interval. This method can be chained.",
        "name": "fadeIn",
        "title": "AnimationAction.fadeIn( durationInSeconds: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.fadeIn",
      },
      Object {
        "description": "Decreases the weight of this action gradually from 1 to 0, within the passed time interval. This method can be chained.",
        "name": "fadeOut",
        "title": "AnimationAction.fadeOut( durationInSeconds: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.fadeOut",
      },
      Object {
        "description": "Returns the effective time scale (considering the current states of warping and paused).",
        "name": "getEffectiveTimeScale",
        "title": "AnimationAction.getEffectiveTimeScale(): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.getEffectiveTimeScale",
      },
      Object {
        "description": "Returns the effective weight (considering the current states of fading and enabled).",
        "name": "getEffectiveWeight",
        "title": "AnimationAction.getEffectiveWeight(): number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.getEffectiveWeight",
      },
      Object {
        "description": "Returns the clip which holds the animation data for this action.",
        "name": "getClip",
        "title": "AnimationAction.getClip(): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.getClip",
      },
      Object {
        "description": "Returns the mixer which is responsible for playing this action.",
        "name": "getMixer",
        "title": "AnimationAction.getMixer(): AnimationMixer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.getMixer",
      },
      Object {
        "description": "Returns the root object on which this action is performed.",
        "name": "getRoot",
        "title": "AnimationAction.getRoot(): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.getRoot",
      },
      Object {
        "description": "Decelerates this animation's speed to 0 by decreasing timeScale gradually (starting from its current value), within the passed time interval. This method can be chained.",
        "name": "halt",
        "title": "AnimationAction.halt( durationInSeconds: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.halt",
      },
      Object {
        "description": "Returns true if the actionâ€™s time is currently running.
 In addition to being activated in the mixer (see isScheduled) the following conditions must be fulfilled: paused is equal to false, enabled is equal to true, timeScale is different from 0, and there is no scheduling for a delayed start (startAt).
 Note: *isRunning* being true doesnâ€™t necessarily mean that the animation can actually be seen. This is only the case, if weight is additionally set to a non-zero value.",
        "name": "isRunning",
        "title": "AnimationAction.isRunning(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.isRunning",
      },
      Object {
        "description": "Returns true, if this action is activated in the mixer.
 Note: This doesnâ€™t necessarily mean that the animation is actually running (compare the additional conditions for isRunning).",
        "name": "isScheduled",
        "title": "AnimationAction.isScheduled(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.isScheduled",
      },
      Object {
        "description": "Tells the mixer to activate the action. This method can be chained.
 Note: Activating this action doesnâ€™t necessarily mean that the animation starts immediately: If the action had already finished before (by reaching the end of its last loop), or if a time for a delayed start has been set (via startAt), a reset must be executed first. Some other settings (paused=true, enabled=false, weight=0, timeScale=0) can prevent the animation from playing, too.",
        "name": "play",
        "title": "AnimationAction.play(): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.play",
      },
      Object {
        "description": "Resets the action. This method can be chained.
 This method sets paused to false, enabled to true, time to 0, interrupts any scheduled fading and warping, and removes the internal loop count and scheduling for delayed starting.
 Note: .*reset* is always called by stop, but .*reset* doesnâ€™t call .*stop* itself. This means: If you want both, resetting and stopping, donâ€™t call .*reset*; call .*stop* instead.",
        "name": "reset",
        "title": "AnimationAction.reset(): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.reset",
      },
      Object {
        "description": "Sets the duration for a single loop of this action (by adjusting timeScale and stopping any scheduled warping). This method can be chained.",
        "name": "setDuration",
        "title": "AnimationAction.setDuration( durationInSeconds: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.setDuration",
      },
      Object {
        "description": "Sets the timeScale and stops any scheduled warping. This method can be chained.
 If paused is false, the effective time scale (an internal property) will also be set to this value; otherwise the effective time scale (directly affecting the animation at this moment) will be set to 0.
 Note: .*paused* will not be switched to *true* automatically, if .*timeScale* is set to 0 by this method.",
        "name": "setEffectiveTimeScale",
        "title": "AnimationAction.setEffectiveTimeScale( timeScale: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.setEffectiveTimeScale",
      },
      Object {
        "description": "Sets the weight and stops any scheduled fading. This method can be chained.
 If enabled is true, the effective weight (an internal property) will also be set to this value; otherwise the effective weight (directly affecting the animation at this moment) will be set to 0.
 Note: .*enabled* will not be switched to *false* automatically, if .*weight* is set to 0 by this method.",
        "name": "setEffectiveWeight",
        "title": "AnimationAction.setEffectiveWeight( weight: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.setEffectiveWeight",
      },
      Object {
        "description": "Sets the loop mode and the number of repetitions. This method can be chained.",
        "name": "setLoop",
        "title": "AnimationAction.setLoop( loopMode: Number, repetitions: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.setLoop",
      },
      Object {
        "description": "Defines the time for a delayed start (usually passed as AnimationMixer.time + deltaTimeInSeconds). This method can be chained.
 Note: The animation will only start at the given time, if .*startAt* is chained with play, or if the action has already been activated in the mixer (by a previous call of .*play*, without stopping or resetting it in the meantime).",
        "name": "startAt",
        "title": "AnimationAction.startAt( startTimeInSeconds: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.startAt",
      },
      Object {
        "description": "Tells the mixer to deactivate this action. This method can be chained.
 The action will be immediately stopped and completely reset.
 Note: You can stop all active actions on the same mixer in one go via mixer.stopAllAction.",
        "name": "stop",
        "title": "AnimationAction.stop(): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.stop",
      },
      Object {
        "description": "Stops any scheduled fading which is applied to this action. This method can be chained.",
        "name": "stopFading",
        "title": "AnimationAction.stopFading(): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.stopFading",
      },
      Object {
        "description": "Stops any scheduled warping which is applied to this action. This method can be chained.",
        "name": "stopWarping",
        "title": "AnimationAction.stopWarping(): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.stopWarping",
      },
      Object {
        "description": "Synchronizes this action with the passed other action. This method can be chained.
 Synchronizing is done by setting this actionâ€™s time and timeScale values to the corresponding values of the other action (stopping any scheduled warping).
 Note: Future changes of the other action's *time* and *timeScale* will not be detected.",
        "name": "syncWith",
        "title": "AnimationAction.syncWith( otherAction: AnimationAction ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.syncWith",
      },
      Object {
        "description": "Changes the playback speed, within the passed time interval, by modifying timeScale gradually from *startTimeScale* to *endTimeScale*. This method can be chained.",
        "name": "warp",
        "title": "AnimationAction.warp( startTimeScale: Number, endTimeScale: Number, durationInSeconds: Number ): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationAction.warp",
      },
    ],
    "title": "AnimationAction( mixer: AnimationMixer, clip: AnimationClip, localRoot: Object3D )",
    "url": "https://threejs.org/docs/#api/en/animation/AnimationAction",
  },
  Object {
    "description": "An AnimationClip is a reusable set of keyframe tracks which represent an animation.
 For an overview of the different elements of the three.js animation system see the \\"Animation System\\" article in the \\"Next Steps\\" section of the manual.",
    "name": "AnimationClip",
    "properties": Array [
      Object {
        "description": "The duration of this clip (in seconds). This can be calculated from the tracks array via resetDuration.",
        "name": "duration",
        "title": "AnimationClip.duration: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.duration",
      },
      Object {
        "description": "A name for this clip. A certain clip can be searched via findByName.",
        "name": "name",
        "title": "AnimationClip.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.name",
      },
      Object {
        "description": "An array containing a KeyframeTrack for each property that are animated by this clip.",
        "name": "tracks",
        "title": "AnimationClip.tracks: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.tracks",
      },
      Object {
        "description": "The [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this clip instance. It gets automatically assigned and shouldn't be edited.",
        "name": "uuid",
        "title": "AnimationClip.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.uuid",
      },
      Object {
        "description": "Returns a copy of this clip.",
        "name": "clone",
        "title": "AnimationClip.clone(): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.clone",
      },
      Object {
        "description": "Optimizes each track by removing equivalent sequential keys (which are common in morph target sequences).",
        "name": "optimize",
        "title": "AnimationClip.optimize(): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.optimize",
      },
      Object {
        "description": "Sets the duration of the clip to the duration of its longest KeyframeTrack.",
        "name": "resetDuration",
        "title": "AnimationClip.resetDuration(): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.resetDuration",
      },
      Object {
        "description": "Returns a JSON object representing the serialized animation clip.",
        "name": "toJSON",
        "title": "AnimationClip.toJSON(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.toJSON",
      },
      Object {
        "description": "Trims all tracks to the clip's duration.",
        "name": "trim",
        "title": "AnimationClip.trim(): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.trim",
      },
      Object {
        "description": "Performs minimal validation on each track in the clip. Returns true if all tracks are valid.",
        "name": "validate",
        "title": "AnimationClip.validate(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.validate",
      },
      Object {
        "description": "Returns an array of new AnimationClips created from the morph target sequences of a geometry, trying to sort morph target names into animation-group-based patterns like \\"Walk_001, Walk_002, Run_001, Run_002 ...\\".",
        "name": "CreateClipsFromMorphTargetSequences",
        "title": "AnimationClip.CreateClipsFromMorphTargetSequences( name: String, morphTargetSequence: Array, fps: Number, noLoop: Boolean ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.CreateClipsFromMorphTargetSequences",
      },
      Object {
        "description": "Returns a new AnimationClip from the passed morph targets array of a geometry, taking a name and the number of frames per second.
 Note: The fps parameter is required, but the animation speed can be overridden in an *AnimationAction* via animationAction.setDuration.",
        "name": "CreateFromMorphTargetSequence",
        "title": "AnimationClip.CreateFromMorphTargetSequence( name: String, morphTargetSequence: Array, fps: Number, noLoop: Boolean ): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.CreateFromMorphTargetSequence",
      },
      Object {
        "description": "Searches for an AnimationClip by name, taking as its first parameter either an array of AnimationClips, or a mesh or geometry that contains an array named \\"animations\\".",
        "name": "findByName",
        "title": "AnimationClip.findByName( objectOrClipArray: Object, name: String ): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.findByName",
      },
      Object {
        "description": "Parses a JSON representation of a clip and returns an AnimationClip.",
        "name": "parse",
        "title": "AnimationClip.parse( json: Object ): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.parse",
      },
      Object {
        "description": "Parses the animation.hierarchy format and returns an AnimationClip.",
        "name": "parseAnimation",
        "title": "AnimationClip.parseAnimation( animation: Object, bones: Array ): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.parseAnimation",
      },
      Object {
        "description": "Takes an AnimationClip and returns a JSON object.",
        "name": "toJSON",
        "title": "AnimationClip.toJSON( clip: AnimationClip ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationClip.toJSON",
      },
    ],
    "title": "AnimationClip( name: String, duration: Number, tracks: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/AnimationClip",
  },
  Object {
    "description": "The AnimationMixer is a player for animations on a particular object in the scene. When multiple objects in the scene are animated independently, one AnimationMixer may be used for each object.
 For an overview of the different elements of the three.js animation system see the \\"Animation System\\" article in the \\"Next Steps\\" section of the manual.",
    "name": "AnimationMixer",
    "properties": Array [
      Object {
        "description": "The global mixer time (in seconds; starting with 0 on the mixer's creation).",
        "name": "time",
        "title": "AnimationMixer.time: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.time",
      },
      Object {
        "description": "A scaling factor for the global mixer time.
 Note: Setting the mixer's timeScale to 0 and later back to 1 is a possibility to pause/unpause all actions that are controlled by this mixer.",
        "name": "timeScale",
        "title": "AnimationMixer.timeScale: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.timeScale",
      },
      Object {
        "description": "Returns an AnimationAction for the passed clip, optionally using a root object different from the mixer's default root. The first parameter can be either an AnimationClip object or the name of an AnimationClip.
 If an action fitting the clip and root parameters doesn't yet exist, it will be created by this method. Calling this method several times with the same clip and root parameters always returns the same clip instance.",
        "name": "clipAction",
        "title": "AnimationMixer.clipAction(clip: AnimationClip, optionalRoot: Object3D): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.clipAction",
      },
      Object {
        "description": "Returns an existing AnimationAction for the passed clip, optionally using a root object different from the mixer's default root.
 The first parameter can be either an AnimationClip object or the name of an AnimationClip.",
        "name": "existingAction",
        "title": "AnimationMixer.existingAction(clip: AnimationClip, optionalRoot: Object3D): AnimationAction",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.existingAction",
      },
      Object {
        "description": "Returns this mixer's root object.",
        "name": "getRoot",
        "title": "AnimationMixer.getRoot(): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.getRoot",
      },
      Object {
        "description": "Deactivates all previously scheduled actions on this mixer.",
        "name": "stopAllAction",
        "title": "AnimationMixer.stopAllAction(): AnimationMixer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.stopAllAction",
      },
      Object {
        "description": "Advances the global mixer time and updates the animation.
 This is usually done in the render loop, passing clock.getDelta scaled by the mixer's timeScale).",
        "name": "update",
        "title": "AnimationMixer.update(deltaTimeInSeconds: Number): AnimationMixer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.update",
      },
      Object {
        "description": "Sets the global mixer to a specific time and updates the animation accordingly.
 This is useful when you need to jump to an exact time in an animation. The input parameter will be scaled by the mixer's timeScale.",
        "name": "setTime",
        "title": "AnimationMixer.setTime(timeInSeconds: Number): AnimationMixer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.setTime",
      },
      Object {
        "description": "Deallocates all memory resources for a clip.",
        "name": "uncacheClip",
        "title": "AnimationMixer.uncacheClip(clip: AnimationClip): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.uncacheClip",
      },
      Object {
        "description": "Deallocates all memory resources for a root object.",
        "name": "uncacheRoot",
        "title": "AnimationMixer.uncacheRoot(root: Object3D): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.uncacheRoot",
      },
      Object {
        "description": "Deallocates all memory resources for an action.",
        "name": "uncacheAction",
        "title": "AnimationMixer.uncacheAction(clip: AnimationClip, optionalRoot: Object3D): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer.uncacheAction",
      },
    ],
    "title": "AnimationMixer( rootObject: Object3D )",
    "url": "https://threejs.org/docs/#api/en/animation/AnimationMixer",
  },
  Object {
    "description": "A group of objects that receives a shared animation state.
 For an overview of the different elements of the three.js animation system see the \\"Animation System\\" article in the \\"Next Steps\\" section of the manual.",
    "name": "AnimationObjectGroup",
    "properties": Array [
      Object {
        "description": "An object that contains some informations of this *AnimationObjectGroup* (total number, number in use, number of bindings per object)",
        "name": "stats",
        "title": "AnimationObjectGroup.stats: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationObjectGroup.stats",
      },
      Object {
        "description": "The [UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this *AnimationObjectGroup*. It gets automatically assigned and shouldn't be edited.",
        "name": "uuid",
        "title": "AnimationObjectGroup.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationObjectGroup.uuid",
      },
      Object {
        "description": "Adds an arbitrary number of objects to this *AnimationObjectGroup*.",
        "name": "add",
        "title": "AnimationObjectGroup.add( obj1: Object, obj2: Object, obj3: Object, ... ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationObjectGroup.add",
      },
      Object {
        "description": "Removes an arbitrary number of objects from this *AnimationObjectGroup*.",
        "name": "remove",
        "title": "AnimationObjectGroup.remove( obj1: Object, obj2: Object, obj3: Object, ... ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationObjectGroup.remove",
      },
      Object {
        "description": "Deallocates all memory resources for the passed objects of this *AnimationObjectGroup*.",
        "name": "uncache",
        "title": "AnimationObjectGroup.uncache( obj1: Object, obj2: Object, obj3: Object, ... ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationObjectGroup.uncache",
      },
    ],
    "title": "AnimationObjectGroup( obj1: Object, obj2: Object, obj3: Object, ... )",
    "url": "https://threejs.org/docs/#api/en/animation/AnimationObjectGroup",
  },
  Object {
    "description": "An object with various functions to assist with animations, used internally.",
    "name": "AnimationUtils",
    "properties": Array [
      Object {
        "description": "This is the same as Array.prototype.slice, but also works on typed arrays.",
        "name": "arraySlice",
        "title": "AnimationUtils.arraySlice( array, from, to ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.arraySlice",
      },
      Object {
        "description": "Converts an array to a specific type.",
        "name": "convertArray",
        "title": "AnimationUtils.convertArray( array, type, forceClone ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.convertArray",
      },
      Object {
        "description": "Used for parsing AOS keyframe formats.",
        "name": "flattenJSON",
        "title": "AnimationUtils.flattenJSON( jsonKeys, times, values, valuePropertyName ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.flattenJSON",
      },
      Object {
        "description": "Returns an array by which times and values can be sorted.",
        "name": "getKeyframeOrder",
        "title": "AnimationUtils.getKeyframeOrder( times ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.getKeyframeOrder",
      },
      Object {
        "description": "Returns *true* if the object is a typed array.",
        "name": "isTypedArray",
        "title": "AnimationUtils.isTypedArray( object ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.isTypedArray",
      },
      Object {
        "description": "Sorts the array previously returned by getKeyframeOrder.",
        "name": "sortedArray",
        "title": "AnimationUtils.sortedArray( values, stride, order ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.sortedArray",
      },
      Object {
        "description": "Creates a new clip, containing only the segment of the original clip between the given frames.",
        "name": "subclip",
        "title": "AnimationUtils.subclip( clip: AnimationClip, name: String, startFrame: Number, endFrame: Number, fps: Number ): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils.subclip",
      },
    ],
    "title": "AnimationUtils",
    "url": "https://threejs.org/docs/#api/en/animation/AnimationUtils",
  },
  Object {
    "description": "A KeyframeTrack is a timed sequence of [keyframes](https://en.wikipedia.org/wiki/Key_frame), which are composed of lists of times and related values, and which are used to animate a specific property of an object.",
    "name": "KeyframeTrack",
    "properties": Array [
      Object {
        "description": "The track's name can refer to morph targets or bones or possibly other values within an animated object. See PropertyBinding.parseTrackName for the forms of strings that can be parsed for property binding:",
        "name": "name",
        "title": "KeyframeTrack.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.name",
      },
      Object {
        "description": "A [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array), converted from the times array which is passed in the constructor.",
        "name": "times",
        "title": "KeyframeTrack.times: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.times",
      },
      Object {
        "description": "A [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array), converted from the values array which is passed in the constructor.",
        "name": "values",
        "title": "KeyframeTrack.values: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.values",
      },
      Object {
        "description": "The default interpolation type: InterpolateLinear.",
        "name": "DefaultInterpolation",
        "title": "KeyframeTrack.DefaultInterpolation: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.DefaultInterpolation",
      },
      Object {
        "description": "[Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array), the type of the buffer internally used for the times.",
        "name": "TimeBufferType",
        "title": "KeyframeTrack.TimeBufferType: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.TimeBufferType",
      },
      Object {
        "description": "[Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array), the type of the buffer internally used for the values.",
        "name": "ValueBufferType",
        "title": "KeyframeTrack.ValueBufferType: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.ValueBufferType",
      },
      Object {
        "description": "Returns a copy of this track.",
        "name": "clone",
        "title": "KeyframeTrack.clone(): KeyframeTrack",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.clone",
      },
      Object {
        "description": "Creates a LinearInterpolant, CubicInterpolant or DiscreteInterpolant, depending on the value of the interpolation parameter passed in the constructor.",
        "name": "createInterpolant",
        "title": "KeyframeTrack.createInterpolant(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.createInterpolant",
      },
      Object {
        "description": "Returns the interpolation type.",
        "name": "getInterpolation",
        "title": "KeyframeTrack.getInterpolation(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.getInterpolation",
      },
      Object {
        "description": "Returns the size of each value (that is the length of the values array divided by the length of the times array).",
        "name": "getValueSize",
        "title": "KeyframeTrack.getValueSize(): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.getValueSize",
      },
      Object {
        "description": "Creates a new DiscreteInterpolant from the times and values. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically.",
        "name": "InterpolantFactoryMethodDiscrete",
        "title": "KeyframeTrack.InterpolantFactoryMethodDiscrete( result: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array ): DiscreteInterpolant",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.InterpolantFactoryMethodDiscrete",
      },
      Object {
        "description": "Creates a new LinearInterpolant from the times and values. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically.",
        "name": "InterpolantFactoryMethodLinear",
        "title": "KeyframeTrack.InterpolantFactoryMethodLinear( result: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.InterpolantFactoryMethodLinear",
      },
      Object {
        "description": "Create a new CubicInterpolant from the times and values. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically.",
        "name": "InterpolantFactoryMethodSmooth",
        "title": "KeyframeTrack.InterpolantFactoryMethodSmooth( result: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.InterpolantFactoryMethodSmooth",
      },
      Object {
        "description": "Removes equivalent sequential keys, which are common in morph target sequences.",
        "name": "optimize",
        "title": "KeyframeTrack.optimize(): KeyframeTrack",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.optimize",
      },
      Object {
        "description": "Scales all keyframe times by a factor.
 Note: This is useful, for example, for conversions to a certain rate of frames per seconds (as it is done internally by animationClip.CreateFromMorphTargetSequence).",
        "name": "scale",
        "title": "KeyframeTrack.scale(): KeyframeTrack",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.scale",
      },
      Object {
        "description": "Sets the interpolation type. See Animation Constants for choices.",
        "name": "setInterpolation",
        "title": "KeyframeTrack.setInterpolation( interpolationType: Constant ): KeyframeTrack",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.setInterpolation",
      },
      Object {
        "description": "Moves all keyframes either forward or backward in time.",
        "name": "shift",
        "title": "KeyframeTrack.shift( timeOffsetInSeconds: Number ): KeyframeTrack",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.shift",
      },
      Object {
        "description": "Removes keyframes before *startTime* and after *endTime*, without changing any values within the range [*startTime*, *endTime*].",
        "name": "trim",
        "title": "KeyframeTrack.trim( startTimeInSeconds: Number, endTimeInSeconds: Number ): KeyframeTrack",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.trim",
      },
      Object {
        "description": "Performs minimal validation on the tracks. Returns true if valid.",
        "name": "validate",
        "title": "KeyframeTrack.validate(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.validate",
      },
      Object {
        "description": "Converts the track to JSON.",
        "name": "toJSON",
        "title": "KeyframeTrack.toJSON( track: KeyframeTrack ): JSON",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack.toJSON",
      },
    ],
    "title": "KeyframeTrack( name: String, times: Array, values: Array, interpolation: Constant )",
    "url": "https://threejs.org/docs/#api/en/animation/KeyframeTrack",
  },
  Object {
    "description": "This holds a reference to a real property in the scene graph; used internally.",
    "name": "PropertyBinding",
    "properties": Array [
      Object {
        "description": "",
        "name": "path",
        "title": "PropertyBinding.path: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.path",
      },
      Object {
        "description": "",
        "name": "parsedPath",
        "title": "PropertyBinding.parsedPath: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.parsedPath",
      },
      Object {
        "description": "",
        "name": "node",
        "title": "PropertyBinding.node: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.node",
      },
      Object {
        "description": "",
        "name": "rootNode",
        "title": "PropertyBinding.rootNode: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.rootNode",
      },
      Object {
        "description": "",
        "name": "BindingType",
        "title": "PropertyBinding.BindingType: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.BindingType",
      },
      Object {
        "description": "",
        "name": "Versioning",
        "title": "PropertyBinding.Versioning: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.Versioning",
      },
      Object {
        "description": "",
        "name": "GetterByBindingType",
        "title": "PropertyBinding.GetterByBindingType: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.GetterByBindingType",
      },
      Object {
        "description": "",
        "name": "SetterByBindingTypeAndVersioning",
        "title": "PropertyBinding.SetterByBindingTypeAndVersioning: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.SetterByBindingTypeAndVersioning",
      },
      Object {
        "description": "",
        "name": "getValue",
        "title": "PropertyBinding.getValue( targetArray: Array, offset: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.getValue",
      },
      Object {
        "description": "",
        "name": "setValue",
        "title": "PropertyBinding.setValue( sourceArray: Array, offset: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.setValue",
      },
      Object {
        "description": "Create getter / setter pair for a property in the scene graph. Used internally by getValue and setValue.",
        "name": "bind",
        "title": "PropertyBinding.bind( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.bind",
      },
      Object {
        "description": "Unbind getter / setter pair for a property in the scene graph.",
        "name": "unbind",
        "title": "PropertyBinding.unbind( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.unbind",
      },
      Object {
        "description": "Create a new Composite PropertyBinding.",
        "name": "Composite",
        "title": "PropertyBinding.Composite( targetGroup, path, optionalParsedPath ): Constructor",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.Composite",
      },
      Object {
        "description": "Create a new Composite PropertyBinding (if root is an AnimationObjectGroup) or PropertyBinding.",
        "name": "create",
        "title": "PropertyBinding.create( root, path, parsedPath ): Constructor",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.create",
      },
      Object {
        "description": "Matches strings in the following forms:
 â€” nodeName.property
 â€” nodeName.property[accessor]
 â€” nodeName.material.property[accessor]
 â€” uuid.property[accessor]
 â€” uuid.objectName[objectIndex].propertyName[propertyIndex]
 â€” parentName/nodeName.property
 â€” parentName/parentName/nodeName.property[index]
 â€” .bone[Armature.DEF_cog].position
 â€” scene:helium_balloon_model:helium_balloon_model.position",
        "name": "parseTrackName",
        "title": "PropertyBinding.parseTrackName( trackName ): Constructor",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.parseTrackName",
      },
      Object {
        "description": "Find a node in a node tree or Skeleton.",
        "name": "findNode",
        "title": "PropertyBinding.findNode( root, nodeName ): Constructor",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding.findNode",
      },
    ],
    "title": "PropertyBinding( rootNode: Object3D, path, parsedPath )",
    "url": "https://threejs.org/docs/#api/en/animation/PropertyBinding",
  },
  Object {
    "description": "Buffered scene graph property that allows weighted accumulation; used internally.",
    "name": "PropertyMixer",
    "properties": Array [
      Object {
        "description": "",
        "name": "binding",
        "title": "PropertyMixer.binding: PropertyBinding",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.binding",
      },
      Object {
        "description": "Buffer with size valueSize * 4. 
 This has the layout: [ incoming | accu0 | accu1 | orig ]
 Interpolators can use .buffer as their .result and the data then goes to 'incoming'. 'accu0' and 'accu1' are used frame-interleaved for the cumulative result and are compared to detect changes. 'orig' stores the original state of the property.",
        "name": "buffer",
        "title": "PropertyMixer.buffer: TypedArray",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.buffer",
      },
      Object {
        "description": "Default is *0*.",
        "name": "cumulativeWeight",
        "title": "PropertyMixer.cumulativeWeight: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.cumulativeWeight",
      },
      Object {
        "description": "",
        "name": "valueSize",
        "title": "PropertyMixer.valueSize: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.valueSize",
      },
      Object {
        "description": "Default is *0*.",
        "name": "referenceCount",
        "title": "PropertyMixer.referenceCount: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.referenceCount",
      },
      Object {
        "description": "Default is *0*.",
        "name": "useCount",
        "title": "PropertyMixer.useCount: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.useCount",
      },
      Object {
        "description": "Accumulate data in buffer[accuIndex] 'incoming' region into 'accu[i]'.
 If weight is *0* this does nothing.",
        "name": "accumulate",
        "title": "PropertyMixer.accumulate( accuIndex: Number, weight: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.accumulate",
      },
      Object {
        "description": "Apply the state of buffer 'accu[i]' to the binding when accus differ.",
        "name": "apply",
        "title": "PropertyMixer.apply( accuIndex: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.apply",
      },
      Object {
        "description": "Remember the state of the bound property and copy it to both accus.",
        "name": "saveOriginalState",
        "title": "PropertyMixer.saveOriginalState( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.saveOriginalState",
      },
      Object {
        "description": "Apply the state previously taken via 'saveOriginalState' to the binding.",
        "name": "restoreOriginalState",
        "title": "PropertyMixer.restoreOriginalState( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer.restoreOriginalState",
      },
    ],
    "title": "PropertyMixer( binding: PropertyBinding, typeName: String, valueSize: Number )",
    "url": "https://threejs.org/docs/#api/en/animation/PropertyMixer",
  },
  Object {
    "description": "A Track of boolean keyframe values.",
    "name": "BooleanKeyframeTrack",
    "properties": Array [
      Object {
        "description": "The default interpolation type to use, InterpolateDiscrete.",
        "name": "DefaultInterpolation",
        "title": "BooleanKeyframeTrack.DefaultInterpolation: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/BooleanKeyframeTrack.DefaultInterpolation",
      },
      Object {
        "description": "A normal Array (no Float32Array in this case, unlike *ValueBufferType* of KeyframeTrack).",
        "name": "ValueBufferType",
        "title": "BooleanKeyframeTrack.ValueBufferType: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/BooleanKeyframeTrack.ValueBufferType",
      },
      Object {
        "description": "String 'bool'.",
        "name": "ValueTypeName",
        "title": "BooleanKeyframeTrack.ValueTypeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/BooleanKeyframeTrack.ValueTypeName",
      },
      Object {
        "description": "The value of this method here is 'undefined', as it does not make sense for discrete properties.",
        "name": "InterpolantFactoryMethodLinear",
        "title": "BooleanKeyframeTrack.InterpolantFactoryMethodLinear: null()",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/BooleanKeyframeTrack.InterpolantFactoryMethodLinear",
      },
      Object {
        "description": "The value of this method here is 'undefined', as it does not make sense for discrete properties.",
        "name": "InterpolantFactoryMethodSmooth",
        "title": "BooleanKeyframeTrack.InterpolantFactoryMethodSmooth: null()",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/BooleanKeyframeTrack.InterpolantFactoryMethodSmooth",
      },
    ],
    "title": "BooleanKeyframeTrack( name: String, times: Array, values: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/tracks/BooleanKeyframeTrack",
  },
  Object {
    "description": "A Track of keyframe values that represent color changes.
 The very basic implementation of this subclass has nothing special yet. However, this is the place for color space parameterization.",
    "name": "ColorKeyframeTrack",
    "properties": Array [
      Object {
        "description": "String 'color'.",
        "name": "ValueTypeName",
        "title": "ColorKeyframeTrack.ValueTypeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/ColorKeyframeTrack.ValueTypeName",
      },
    ],
    "title": "ColorKeyframeTrack( name: String, times: Array, values: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/tracks/ColorKeyframeTrack",
  },
  Object {
    "description": "A Track of numeric keyframe values.",
    "name": "NumberKeyframeTrack",
    "properties": Array [
      Object {
        "description": "String 'number'.",
        "name": "ValueTypeName",
        "title": "NumberKeyframeTrack.ValueTypeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/NumberKeyframeTrack.ValueTypeName",
      },
    ],
    "title": "NumberKeyframeTrack( name: String, times: Array, values: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/tracks/NumberKeyframeTrack",
  },
  Object {
    "description": "A Track of quaternion keyframe values.",
    "name": "QuaternionKeyframeTrack",
    "properties": Array [
      Object {
        "description": "The default interpolation type to use, InterpolateLinear.",
        "name": "DefaultInterpolation",
        "title": "QuaternionKeyframeTrack.DefaultInterpolation: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/QuaternionKeyframeTrack.DefaultInterpolation",
      },
      Object {
        "description": "String 'quaternion'.",
        "name": "ValueTypeName",
        "title": "QuaternionKeyframeTrack.ValueTypeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/QuaternionKeyframeTrack.ValueTypeName",
      },
      Object {
        "description": "Returns a new QuaternionLinearInterpolant based on the values, times and valueSize of the keyframes.",
        "name": "InterpolantFactoryMethodLinear",
        "title": "QuaternionKeyframeTrack.InterpolantFactoryMethodLinear(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/QuaternionKeyframeTrack.InterpolantFactoryMethodLinear",
      },
    ],
    "title": "QuaternionKeyframeTrack( name: String, times: Array, values: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/tracks/QuaternionKeyframeTrack",
  },
  Object {
    "description": "A Track of string keyframe values.",
    "name": "StringKeyframeTrack",
    "properties": Array [
      Object {
        "description": "The default interpolation type to use, InterpolateDiscrete.",
        "name": "DefaultInterpolation",
        "title": "StringKeyframeTrack.DefaultInterpolation: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/StringKeyframeTrack.DefaultInterpolation",
      },
      Object {
        "description": "A normal Array (no Float32Array in this case, unlike *ValueBufferType* of KeyframeTrack).",
        "name": "ValueBufferType",
        "title": "StringKeyframeTrack.ValueBufferType: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/StringKeyframeTrack.ValueBufferType",
      },
      Object {
        "description": "String 'string'.",
        "name": "ValueTypeName",
        "title": "StringKeyframeTrack.ValueTypeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/StringKeyframeTrack.ValueTypeName",
      },
      Object {
        "description": "The value of this method here is 'undefined', as it does not make sense for discrete properties.",
        "name": "InterpolantFactoryMethodLinear",
        "title": "StringKeyframeTrack.InterpolantFactoryMethodLinear(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/StringKeyframeTrack.InterpolantFactoryMethodLinear",
      },
      Object {
        "description": "The value of this method here is 'undefined', as it does not make sense for discrete properties.",
        "name": "InterpolantFactoryMethodSmooth",
        "title": "StringKeyframeTrack.InterpolantFactoryMethodSmooth(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/StringKeyframeTrack.InterpolantFactoryMethodSmooth",
      },
    ],
    "title": "StringKeyframeTrack( name: String, times: Array, values: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/tracks/StringKeyframeTrack",
  },
  Object {
    "description": "A Track of vector keyframe values.",
    "name": "VectorKeyframeTrack",
    "properties": Array [
      Object {
        "description": "String 'vector'.",
        "name": "ValueTypeName",
        "title": "VectorKeyframeTrack.ValueTypeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/animation/tracks/VectorKeyframeTrack.ValueTypeName",
      },
    ],
    "title": "VectorKeyframeTrack( name: String, times: Array, values: Array )",
    "url": "https://threejs.org/docs/#api/en/animation/tracks/VectorKeyframeTrack",
  },
  Object {
    "description": "Create a non-positional ( global ) audio object.
 This uses the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).",
    "name": "Audio",
    "properties": Array [
      Object {
        "description": "Whether to start playback automatically. Default is *false*.",
        "name": "autoplay",
        "title": "Audio.autoplay: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.autoplay",
      },
      Object {
        "description": "The [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) of the listener given in the constructor.",
        "name": "context",
        "title": "Audio.context: AudioContext",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.context",
      },
      Object {
        "description": "Modify pitch, measured in cents. +/- 100 is a semitone. +/- 1200 is an octave. Default is *0*.",
        "name": "detune",
        "title": "Audio.detune: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.detune",
      },
      Object {
        "description": "Represents an array of [AudioNodes](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode). Can be used to apply a variety of low-order filters to create more complex sound effects. In most cases, the array contains instances of [BiquadFilterNodes](https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode). Filters are set via Audio.setFilter or Audio.setFilters.",
        "name": "filters",
        "title": "Audio.filters: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.filters",
      },
      Object {
        "description": "A [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) created using [AudioContext.createGain](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain)().",
        "name": "gain",
        "title": "Audio.gain: GainNode",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.gain",
      },
      Object {
        "description": "Whether playback can be controlled using the play(), pause() etc. methods. Default is *true*.",
        "name": "hasPlaybackControl",
        "title": "Audio.hasPlaybackControl: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.hasPlaybackControl",
      },
      Object {
        "description": "Whether the audio is currently playing.",
        "name": "isPlaying",
        "title": "Audio.isPlaying: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.isPlaying",
      },
      Object {
        "description": "A reference to the listener object of this audio.",
        "name": "listener",
        "title": "Audio.listener: AudioListener",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.listener",
      },
      Object {
        "description": "Speed of playback. Default is *1*.",
        "name": "playbackRate",
        "title": "Audio.playbackRate: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.playbackRate",
      },
      Object {
        "description": "An offset to the time within the audio buffer that playback should begin. Same as the *offset* parameter of [AudioBufferSourceNode.start](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start)(). Default is *0*.",
        "name": "offset",
        "title": "Audio.offset: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.offset",
      },
      Object {
        "description": "Overrides the duration of the audio. Same as the *duration* parameter of [AudioBufferSourceNode.start](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start)(). Default is *undefined* to play the whole buffer.",
        "name": "duration",
        "title": "Audio.duration: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.duration",
      },
      Object {
        "description": "An [AudioBufferSourceNode](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode) created using [AudioContext.createBufferSource](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource)().",
        "name": "source",
        "title": "Audio.source: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.source",
      },
      Object {
        "description": "Type of the audio source. Default is string 'empty'.",
        "name": "sourceType",
        "title": "Audio.sourceType: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.sourceType",
      },
      Object {
        "description": "String denoting the type, set to 'Audio'.",
        "name": "type",
        "title": "Audio.type: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.type",
      },
      Object {
        "description": "Connect to the Audio.source. This is used internally on initialisation and when setting / removing filters.",
        "name": "connect",
        "title": "Audio.connect(): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.connect",
      },
      Object {
        "description": "Disconnect from the Audio.source. This is used internally when setting / removing filters.",
        "name": "disconnect",
        "title": "Audio.disconnect(): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.disconnect",
      },
      Object {
        "description": "Returns the first element of the filters array.",
        "name": "getFilter",
        "title": "Audio.getFilter(): BiquadFilterNode",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.getFilter",
      },
      Object {
        "description": "Returns the filters array.",
        "name": "getFilters",
        "title": "Audio.getFilters(): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.getFilters",
      },
      Object {
        "description": "Return the value of [source.loop](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop) (whether playback should loop).",
        "name": "getLoop",
        "title": "Audio.getLoop(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.getLoop",
      },
      Object {
        "description": "Return the gainNode.",
        "name": "getOutput",
        "title": "Audio.getOutput(): GainNode",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.getOutput",
      },
      Object {
        "description": "Return the value of playbackRate.",
        "name": "getPlaybackRate",
        "title": "Audio.getPlaybackRate(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.getPlaybackRate",
      },
      Object {
        "description": "Return the current volume.",
        "name": "getVolume",
        "title": "Audio.getVolume( value ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.getVolume",
      },
      Object {
        "description": "If hasPlaybackControl is true, starts playback.",
        "name": "play",
        "title": "Audio.play( delay ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.play",
      },
      Object {
        "description": "If hasPlaybackControl is true, pauses playback.",
        "name": "pause",
        "title": "Audio.pause(): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.pause",
      },
      Object {
        "description": "Called automatically when playback finished.",
        "name": "onEnded",
        "title": "Audio.onEnded(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.onEnded",
      },
      Object {
        "description": "Setup the source to the audioBuffer, and sets sourceType to 'buffer'.
 If autoplay, also starts playback.",
        "name": "setBuffer",
        "title": "Audio.setBuffer( audioBuffer ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setBuffer",
      },
      Object {
        "description": "Applies a single filter node to the audio.",
        "name": "setFilter",
        "title": "Audio.setFilter( filter ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setFilter",
      },
      Object {
        "description": "value - arrays of filters.
 Applies an array of filter nodes to the audio.",
        "name": "setFilters",
        "title": "Audio.setFilters( value: Array ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setFilters",
      },
      Object {
        "description": "Set [source.loop](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop) to *value* (whether playback should loop).",
        "name": "setLoop",
        "title": "Audio.setLoop( value: Boolean ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setLoop",
      },
      Object {
        "description": "Set [source.loopStart](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart) to *value*.",
        "name": "setLoopStart",
        "title": "Audio.setLoopStart( value: Float ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setLoopStart",
      },
      Object {
        "description": "Set [source.loopEnd](https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd) to *value*.",
        "name": "setLoopEnd",
        "title": "Audio.setLoopEnd( value: Float ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setLoopEnd",
      },
      Object {
        "description": "Applies the given object of type [HTMLMediaElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement) as the source of this audio.
 Also sets hasPlaybackControl to false.",
        "name": "setMediaElementSource",
        "title": "Audio.setMediaElementSource( mediaElement ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setMediaElementSource",
      },
      Object {
        "description": "Applies the given object of type [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream) as the source of this audio.
 Also sets hasPlaybackControl to false.",
        "name": "setMediaStreamSource",
        "title": "Audio.setMediaStreamSource( mediaStream ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setMediaStreamSource",
      },
      Object {
        "description": "Setup the source to the audioBuffer, and sets sourceType to 'audioNode'.
 Also sets hasPlaybackControl to false.",
        "name": "setNodeSource",
        "title": "Audio.setNodeSource( audioNode ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setNodeSource",
      },
      Object {
        "description": "If hasPlaybackControl is enabled, set the playbackRate to *value*.",
        "name": "setPlaybackRate",
        "title": "Audio.setPlaybackRate( value: Float ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setPlaybackRate",
      },
      Object {
        "description": "Set the volume.",
        "name": "setVolume",
        "title": "Audio.setVolume( value: Float ): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.setVolume",
      },
      Object {
        "description": "If hasPlaybackControl is enabled, stops playback.",
        "name": "stop",
        "title": "Audio.stop(): Audio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/Audio.stop",
      },
    ],
    "title": "Audio( listener: AudioListener )",
    "url": "https://threejs.org/docs/#api/en/audio/Audio",
  },
  Object {
    "description": "Create a AudioAnalyser object, which uses an [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode) to analyse audio data.
 This uses the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).",
    "name": "AudioAnalyser",
    "properties": Array [
      Object {
        "description": "An [AnalyserNode](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode) used to analyze audio.",
        "name": "analyser",
        "title": "AudioAnalyser.analyser: AnalyserNode",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioAnalyser.analyser",
      },
      Object {
        "description": "A non-zero power of two up to 2048, representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain. See [this page](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize) for details.",
        "name": "fftSize",
        "title": "AudioAnalyser.fftSize: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioAnalyser.fftSize",
      },
      Object {
        "description": "A Uint8Array with size determined by [analyser.frequencyBinCount](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount) used to hold analysis data.",
        "name": "data",
        "title": "AudioAnalyser.data: Uint8Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioAnalyser.data",
      },
      Object {
        "description": "Uses the Web Audio's [getByteFrequencyData](https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData) method. See that page.",
        "name": "getFrequencyData",
        "title": "AudioAnalyser.getFrequencyData(): Uint8Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioAnalyser.getFrequencyData",
      },
      Object {
        "description": "Get the average of the frequencies returned by the getFrequencyData method.",
        "name": "getAverageFrequency",
        "title": "AudioAnalyser.getAverageFrequency(): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioAnalyser.getAverageFrequency",
      },
    ],
    "title": "AudioAnalyser( audio, fftSize: https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize )",
    "url": "https://threejs.org/docs/#api/en/audio/AudioAnalyser",
  },
  Object {
    "description": "This contains methods for setting up an [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext).
 Used internally by the AudioListener and AudioLoader classes.
 This uses the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).",
    "name": "AudioContext",
    "properties": Array [
      Object {
        "description": "Return the value of the variable *context* in the outer scope, if defined, otherwise set it to a new [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext).",
        "name": "getContext",
        "title": "AudioContext.getContext(): AudioContext",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioContext.getContext",
      },
      Object {
        "description": "Set the variable *context* in the outer scope to *value*.",
        "name": "setContext",
        "title": "AudioContext.setContext( value: AudioContext ): AudioContext",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioContext.setContext",
      },
    ],
    "title": "AudioContext",
    "url": "https://threejs.org/docs/#api/en/audio/AudioContext",
  },
  Object {
    "description": "The AudioListener represents a virtual [listener](https://developer.mozilla.org/de/docs/Web/API/AudioListener) of the all positional and non-positional audio effects in the scene.
 A three.js application usually creates a single instance of AudioListener. It is a mandatory construtor parameter for audios entities like Audio and PositionalAudio.
 In most cases, the listener object is a child of the camera. So the 3D transformation of the camera represents the 3D transformation of the listener.",
    "name": "AudioListener",
    "properties": Array [
      Object {
        "description": "The [AudioContext](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) of the listener given in the constructor.",
        "name": "context",
        "title": "AudioListener.context: AudioContext",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.context",
      },
      Object {
        "description": "A [GainNode](https://developer.mozilla.org/en-US/docs/Web/API/GainNode) created using [AudioContext.createGain](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain)().",
        "name": "gain",
        "title": "AudioListener.gain: GainNode",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.gain",
      },
      Object {
        "description": "Default is *null*.",
        "name": "filter",
        "title": "AudioListener.filter: AudioNode",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.filter",
      },
      Object {
        "description": "Time delta value for audio entities. Use in context of [AudioParam.linearRampToValueAtTimeDefault](https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime)(). Default is *0*.",
        "name": "timeDelta",
        "title": "AudioListener.timeDelta: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.timeDelta",
      },
      Object {
        "description": "Return the gainNode.",
        "name": "getInput",
        "title": "AudioListener.getInput(): GainNode",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.getInput",
      },
      Object {
        "description": "Set the filter property to *null*.",
        "name": "removeFilter",
        "title": "AudioListener.removeFilter(): AudioListener",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.removeFilter",
      },
      Object {
        "description": "Returns the value of the filter property.",
        "name": "getFilter",
        "title": "AudioListener.getFilter(): AudioNode",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.getFilter",
      },
      Object {
        "description": "Set the filter property to *value*.",
        "name": "setFilter",
        "title": "AudioListener.setFilter( value: AudioNode ): AudioListener",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.setFilter",
      },
      Object {
        "description": "Return the volume.",
        "name": "getMasterVolume",
        "title": "AudioListener.getMasterVolume(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.getMasterVolume",
      },
      Object {
        "description": "Set the volume.",
        "name": "setMasterVolume",
        "title": "AudioListener.setMasterVolume( value: Number ): AudioListener",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/AudioListener.setMasterVolume",
      },
    ],
    "title": "AudioListener( )",
    "url": "https://threejs.org/docs/#api/en/audio/AudioListener",
  },
  Object {
    "description": "Create a positional audio object.
 This uses the [Web Audio API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API).",
    "name": "PositionalAudio",
    "properties": Array [
      Object {
        "description": "The PositionalAudio's [PannerNode](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode).",
        "name": "panner",
        "title": "PositionalAudio.panner: PannerNode",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.panner",
      },
      Object {
        "description": "Returns the panner.",
        "name": "getOutput",
        "title": "PositionalAudio.getOutput(): PannerNode",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.getOutput",
      },
      Object {
        "description": "Returns the value of [panner.refDistance](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance).",
        "name": "getRefDistance",
        "title": "PositionalAudio.getRefDistance(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.getRefDistance",
      },
      Object {
        "description": "Sets the value of [panner.refDistance](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance).",
        "name": "setRefDistance",
        "title": "PositionalAudio.setRefDistance( value: Float ): PositionalAudio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.setRefDistance",
      },
      Object {
        "description": "Returns the value of [panner.rolloffFactor](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor).",
        "name": "getRolloffFactor",
        "title": "PositionalAudio.getRolloffFactor(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.getRolloffFactor",
      },
      Object {
        "description": "Sets the value of [panner.rolloffFactor](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor).",
        "name": "setRolloffFactor",
        "title": "PositionalAudio.setRolloffFactor( value: Float ): PositionalAudio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.setRolloffFactor",
      },
      Object {
        "description": "Returns the value of [panner.distanceModel](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel).",
        "name": "getDistanceModel",
        "title": "PositionalAudio.getDistanceModel(): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.getDistanceModel",
      },
      Object {
        "description": "Sets the value of [panner.distanceModel](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel).",
        "name": "setDistanceModel",
        "title": "PositionalAudio.setDistanceModel( value: String ): PositionalAudio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.setDistanceModel",
      },
      Object {
        "description": "Returns the value of [panner.maxDistance](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance).",
        "name": "getMaxDistance",
        "title": "PositionalAudio.getMaxDistance(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.getMaxDistance",
      },
      Object {
        "description": "Sets the value of [panner.maxDistance](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance).",
        "name": "setMaxDistance",
        "title": "PositionalAudio.setMaxDistance( value: Float ): PositionalAudio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.setMaxDistance",
      },
      Object {
        "description": "This method can be used in order to transform an omnidirectional sound into a [directional sound](https://developer.mozilla.org/en-US/docs/Web/API/PannerNode).",
        "name": "setDirectionalCone",
        "title": "PositionalAudio.setDirectionalCone( coneInnerAngle: Float, coneOuterAngle: Float, coneOuterGain: Float ): PositionalAudio",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio.setDirectionalCone",
      },
    ],
    "title": "PositionalAudio( listener: AudioListener )",
    "url": "https://threejs.org/docs/#api/en/audio/PositionalAudio",
  },
  Object {
    "description": "ArrayCamera can be used in order to efficiently render a scene with a predefined set of cameras. This is an important performance aspect for rendering VR scenes.
 An instance of ArrayCamera always has an array of sub cameras. It's mandatory to define for each sub camera the *viewport* property which determines the part of the viewport that is rendered with this camera.",
    "name": "ArrayCamera",
    "properties": Array [
      Object {
        "description": "An array of cameras.",
        "name": "cameras",
        "title": "ArrayCamera.cameras: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/ArrayCamera.cameras",
      },
    ],
    "title": "ArrayCamera( array: Array )",
    "url": "https://threejs.org/docs/#api/en/cameras/ArrayCamera",
  },
  Object {
    "description": "Abstract base class for cameras. This class should always be inherited when you build a new camera.",
    "name": "Camera",
    "properties": Array [
      Object {
        "description": "The layers that the camera is a member of. This is an inherited property from Object3D.
 Objects must share at least one layer with the camera to be seen when the camera's viewpoint is rendered.",
        "name": "layers",
        "title": "Camera.layers: Layers",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.layers",
      },
      Object {
        "description": "This is the inverse of matrixWorld. MatrixWorld contains the Matrix which has the world transform of the Camera.",
        "name": "matrixWorldInverse",
        "title": "Camera.matrixWorldInverse: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.matrixWorldInverse",
      },
      Object {
        "description": "This is the matrix which contains the projection.",
        "name": "projectionMatrix",
        "title": "Camera.projectionMatrix: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.projectionMatrix",
      },
      Object {
        "description": "The inverse of projectionMatrix.",
        "name": "projectionMatrixInverse",
        "title": "Camera.projectionMatrixInverse: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.projectionMatrixInverse",
      },
      Object {
        "description": "Return a new camera with the same properties as this one.",
        "name": "clone",
        "title": "Camera.clone( ): Camera",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.clone",
      },
      Object {
        "description": "Copy the properties from the source camera into this one.",
        "name": "copy",
        "title": "Camera.copy( source: Camera, recursive: Boolean ): Camera",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.copy",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3. 
 Returns a Vector3 representing the world space direction in which the camera is looking. (Note: A camera looks down its local, negative z-axis).",
        "name": "getWorldDirection",
        "title": "Camera.getWorldDirection( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/Camera.getWorldDirection",
      },
    ],
    "title": "Camera()",
    "url": "https://threejs.org/docs/#api/en/cameras/Camera",
  },
  Object {
    "description": "Creates 6 cameras that render to a WebGLCubeRenderTarget.",
    "name": "CubeCamera",
    "properties": Array [
      Object {
        "description": "The destination cube render target.",
        "name": "renderTarget",
        "title": "CubeCamera.renderTarget: WebGLCubeRenderTarget",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/CubeCamera.renderTarget",
      },
      Object {
        "description": "renderer â€” The current WebGL renderer 
 scene â€” The current scene",
        "name": "update",
        "title": "CubeCamera.update( renderer: WebGLRenderer, scene: Scene ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/CubeCamera.update",
      },
    ],
    "title": "CubeCamera( near: Number, far: Number, renderTarget: WebGLCubeRenderTarget )",
    "url": "https://threejs.org/docs/#api/en/cameras/CubeCamera",
  },
  Object {
    "description": "Camera that uses [orthographic projection](https://en.wikipedia.org/wiki/Orthographic_projection).
 In this projection mode, an object's size in the rendered image stays constant regardless of its distance from the camera.
 This can be useful for rendering 2D scenes and UI elements, amongst other things.",
    "name": "OrthographicCamera",
    "properties": Array [
      Object {
        "description": "Camera frustum bottom plane.",
        "name": "bottom",
        "title": "OrthographicCamera.bottom: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.bottom",
      },
      Object {
        "description": "Camera frustum far plane. Default is *2000*.
 Must be greater than the current value of near plane.",
        "name": "far",
        "title": "OrthographicCamera.far: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.far",
      },
      Object {
        "description": "Camera frustum left plane.",
        "name": "left",
        "title": "OrthographicCamera.left: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.left",
      },
      Object {
        "description": "Camera frustum near plane. Default is *0.1*.
 The valid range is between 0 and the current value of the far plane. Note that, unlike for the PerspectiveCamera, *0* is a valid value for an OrthographicCamera's near plane.",
        "name": "near",
        "title": "OrthographicCamera.near: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.near",
      },
      Object {
        "description": "Camera frustum right plane.",
        "name": "right",
        "title": "OrthographicCamera.right: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.right",
      },
      Object {
        "description": "Camera frustum top plane.",
        "name": "top",
        "title": "OrthographicCamera.top: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.top",
      },
      Object {
        "description": "Set by setViewOffset. Default is *null*.",
        "name": "view",
        "title": "OrthographicCamera.view: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.view",
      },
      Object {
        "description": "Gets or sets the zoom factor of the camera. Default is *1*.",
        "name": "zoom",
        "title": "OrthographicCamera.zoom: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.zoom",
      },
      Object {
        "description": "fullWidth â€” full width of multiview setup
 fullHeight â€” full height of multiview setup
 x â€” horizontal offset of subcamera
 y â€” vertical offset of subcamera
 width â€” width of subcamera
 height â€” height of subcamera
 Sets an offset in a larger [viewing frustum](https://en.wikipedia.org/wiki/Viewing_frustum). This is useful for multi-window or multi-monitor/multi-machine setups. For an example on how to use it see PerspectiveCamera.",
        "name": "setViewOffset",
        "title": "OrthographicCamera.setViewOffset( fullWidth: Float, fullHeight: Float, x: Float, y: Float, width: Float, height: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.setViewOffset",
      },
      Object {
        "description": "Removes any offset set by the .setViewOffset method.",
        "name": "clearViewOffset",
        "title": "OrthographicCamera.clearViewOffset(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.clearViewOffset",
      },
      Object {
        "description": "Updates the camera projection matrix. Must be called after any change of parameters.",
        "name": "updateProjectionMatrix",
        "title": "OrthographicCamera.updateProjectionMatrix(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.updateProjectionMatrix",
      },
      Object {
        "description": "meta â€” object containing metadata such as textures or images in objects' descendants.
 Convert the camera to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "OrthographicCamera.toJSON(meta: Object): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera.toJSON",
      },
    ],
    "title": "OrthographicCamera( left: Number, right: Number, top: Number, bottom: Number, near: Number, far: Number )",
    "url": "https://threejs.org/docs/#api/en/cameras/OrthographicCamera",
  },
  Object {
    "description": "Camera that uses [perspective projection](https://en.wikipedia.org/wiki/Perspective_(graphical)).
 This projection mode is designed to mimic the way the human eye sees. It is the most common projection mode used for rendering a 3D scene.",
    "name": "PerspectiveCamera",
    "properties": Array [
      Object {
        "description": "Camera frustum aspect ratio, usually the canvas width / canvas height. Default is *1* (square canvas).",
        "name": "aspect",
        "title": "PerspectiveCamera.aspect: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.aspect",
      },
      Object {
        "description": "Camera frustum far plane. Default is *2000*.
 Must be greater than the current value of near plane.",
        "name": "far",
        "title": "PerspectiveCamera.far: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.far",
      },
      Object {
        "description": "Film size used for the larger axis. Default is 35 (millimeters). This parameter does not influence the projection matrix unless .filmOffset is set to a nonzero value.",
        "name": "filmGauge",
        "title": "PerspectiveCamera.filmGauge: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.filmGauge",
      },
      Object {
        "description": "Horizontal off-center offset in the same unit as .filmGauge. Default is *0*.",
        "name": "filmOffset",
        "title": "PerspectiveCamera.filmOffset: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.filmOffset",
      },
      Object {
        "description": "Object distance used for stereoscopy and depth-of-field effects. This parameter does not influence the projection matrix unless a StereoCamera is being used. Default is *10*.",
        "name": "focus",
        "title": "PerspectiveCamera.focus: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.focus",
      },
      Object {
        "description": "Camera frustum vertical field of view, from bottom to top of view, in degrees. Default is *50*.",
        "name": "fov",
        "title": "PerspectiveCamera.fov: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.fov",
      },
      Object {
        "description": "Camera frustum near plane. Default is *0.1*.
 The valid range is greater than 0 and less than the current value of the far plane. Note that, unlike for the OrthographicCamera, *0* is *not* a valid value for a PerspectiveCamera's near plane.",
        "name": "near",
        "title": "PerspectiveCamera.near: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.near",
      },
      Object {
        "description": "Frustum window specification or null. This is set using the .setViewOffset method and cleared using .clearViewOffset.",
        "name": "view",
        "title": "PerspectiveCamera.view: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.view",
      },
      Object {
        "description": "Gets or sets the zoom factor of the camera. Default is *1*.",
        "name": "zoom",
        "title": "PerspectiveCamera.zoom: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.zoom",
      },
      Object {
        "description": "Removes any offset set by the .setViewOffset method.",
        "name": "clearViewOffset",
        "title": "PerspectiveCamera.clearViewOffset(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.clearViewOffset",
      },
      Object {
        "description": "Returns the current vertical field of view angle in degrees considering .zoom.",
        "name": "getEffectiveFOV",
        "title": "PerspectiveCamera.getEffectiveFOV(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.getEffectiveFOV",
      },
      Object {
        "description": "Returns the height of the image on the film. If .aspect is less than or equal to one (portrait format), the result equals .filmGauge.",
        "name": "getFilmHeight",
        "title": "PerspectiveCamera.getFilmHeight(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.getFilmHeight",
      },
      Object {
        "description": "Returns the width of the image on the film. If .aspect is greater than or equal to one (landscape format), the result equals .filmGauge.",
        "name": "getFilmWidth",
        "title": "PerspectiveCamera.getFilmWidth(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.getFilmWidth",
      },
      Object {
        "description": "Returns the focal length of the current .fov in respect to .filmGauge.",
        "name": "getFocalLength",
        "title": "PerspectiveCamera.getFocalLength(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.getFocalLength",
      },
      Object {
        "description": "Sets the FOV by focal length in respect to the current .filmGauge.
 By default, the focal length is specified for a 35mm (full frame) camera.",
        "name": "setFocalLength",
        "title": "PerspectiveCamera.setFocalLength( focalLength: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.setFocalLength",
      },
      Object {
        "description": "fullWidth â€” full width of multiview setup
 fullHeight â€” full height of multiview setup
 x â€” horizontal offset of subcamera
 y â€” vertical offset of subcamera
 width â€” width of subcamera
 height â€” height of subcamera",
        "name": "setViewOffset",
        "title": "PerspectiveCamera.setViewOffset( fullWidth: Float, fullHeight: Float, x: Float, y: Float, width: Float, height: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.setViewOffset",
      },
      Object {
        "description": "Updates the camera projection matrix. Must be called after any change of parameters.",
        "name": "updateProjectionMatrix",
        "title": "PerspectiveCamera.updateProjectionMatrix(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.updateProjectionMatrix",
      },
      Object {
        "description": "meta â€” object containing metadata such as textures or images in objects' descendants.
 Convert the camera to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "PerspectiveCamera.toJSON(meta: Object): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.toJSON",
      },
    ],
    "title": "PerspectiveCamera( fov: Number, aspect: Number, near: Number, far: Number )",
    "url": "https://threejs.org/docs/#api/en/cameras/PerspectiveCamera",
  },
  Object {
    "description": "Dual PerspectiveCameras used for effects such as [3D Anaglyph](https://en.wikipedia.org/wiki/Anaglyph_3D) or [Parallax Barrier](https://en.wikipedia.org/wiki/parallax_barrier).",
    "name": "StereoCamera",
    "properties": Array [
      Object {
        "description": "Default is *1*.",
        "name": "aspect",
        "title": "StereoCamera.aspect: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/StereoCamera.aspect",
      },
      Object {
        "description": "Default is *0.064*.",
        "name": "eyeSep",
        "title": "StereoCamera.eyeSep: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/StereoCamera.eyeSep",
      },
      Object {
        "description": "Left camera. This is added to layer 1 - objects to be rendered by the left camera must also be added to this layer.",
        "name": "cameraL",
        "title": "StereoCamera.cameraL: PerspectiveCamera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/StereoCamera.cameraL",
      },
      Object {
        "description": "Right camera.This is added to layer 2 - objects to be rendered by the right camera must also be added to this layer.",
        "name": "cameraR",
        "title": "StereoCamera.cameraR: PerspectiveCamera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/cameras/StereoCamera.cameraR",
      },
      Object {
        "description": "Update the stereo cameras based on the camera passed in.",
        "name": "update",
        "title": "StereoCamera.update( camera: PerspectiveCamera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/cameras/StereoCamera.update",
      },
    ],
    "title": "StereoCamera( )",
    "url": "https://threejs.org/docs/#api/en/cameras/StereoCamera",
  },
  Object {
    "description": "[src/constants.js](https://github.com/mrdoob/three.js/blob/master/src/constants.js)",
    "name": "Animation",
    "properties": Array [],
    "title": "Animation Constants",
    "url": "https://threejs.org/docs/#api/en/constants/Animation",
  },
  Object {
    "description": "[src/constants.js](https://github.com/mrdoob/three.js/blob/master/src/constants.js)",
    "name": "Core",
    "properties": Array [],
    "title": "Core Constants",
    "url": "https://threejs.org/docs/#api/en/constants/Core",
  },
  Object {
    "description": "These work with all material types. First set the material's blending mode to THREE.CustomBlending, then set the desired Blending Equation, Source Factor and Destination Factor.",
    "name": "CustomBlendingEquation",
    "properties": Array [],
    "title": "Custom Blending Equation Constants",
    "url": "https://threejs.org/docs/#api/en/constants/CustomBlendingEquations",
  },
  Object {
    "description": "These constants define properties common to all material types, with the exception of Texture Combine Operations which only apply to MeshBasicMaterial, MeshLambertMaterial and MeshPhongMaterial.",
    "name": "Materials",
    "properties": Array [],
    "title": "Material Constants",
    "url": "https://threejs.org/docs/#api/en/constants/Materials",
  },
  Object {
    "description": "CullFaceNone disables face culling.
 CullFaceBack culls back faces (default).
 CullFaceFront culls front faces.
 CullFaceFrontBack culls both front and back faces.",
    "name": "Renderer",
    "properties": Array [],
    "title": "WebGLRenderer Constants",
    "url": "https://threejs.org/docs/#api/en/constants/Renderer",
  },
  Object {
    "description": "These define the texture's mapping mode.
 UVMapping is the default, and maps the texture using the mesh's UV coordinates.
 The rest define environment mapping types.
 CubeReflectionMapping and CubeRefractionMapping are for use with a CubeTexture, which is made up of six textures, one for each face of the cube. CubeReflectionMapping is the default for a CubeTexture. 
 EquirectangularReflectionMapping and EquirectangularRefractionMapping are for use with an equirectangular environment map. Also called a lat-long map, an equirectangular texture represents a 360-degree view along the horizontal centerline, and a 180-degree view along the vertical axis, with the top and bottom edges of the image corresponding to the north and south poles of a mapped sphere.
 See the materials / envmaps example.",
    "name": "Textures",
    "properties": Array [],
    "title": "Texture Constants",
    "url": "https://threejs.org/docs/#api/en/constants/Textures",
  },
  Object {
    "description": "This class stores data for an attribute (such as vertex positions, face indices, normals, colors, UVs, and any custom attributes ) associated with a BufferGeometry, which allows for more efficient passing of data to the GPU. See that page for details and a usage example.
 Data is stored as vectors of any length (defined by itemSize), and in general in the methods outlined below if passing in an index, this is automatically multiplied by the vector length.",
    "name": "BufferAttribute",
    "properties": Array [
      Object {
        "description": "The array holding data stored in the buffer.",
        "name": "array",
        "title": "BufferAttribute.array: TypedArray",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.array",
      },
      Object {
        "description": "Stores the array's length divided by the itemSize.
 If the buffer is storing a 3-component vector (such as a position, normal, or color), then this will count the number of such vectors stored.",
        "name": "count",
        "title": "BufferAttribute.count: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.count",
      },
      Object {
        "description": "The length of vectors that are being stored in the array.",
        "name": "itemSize",
        "title": "BufferAttribute.itemSize: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.itemSize",
      },
      Object {
        "description": "Optional name for this attribute instance. Default is an empty string.",
        "name": "name",
        "title": "BufferAttribute.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.name",
      },
      Object {
        "description": "Flag to indicate that this attribute has changed and should be re-sent to the GPU. Set this to true when you modify the value of the array.
 Setting this to true also increments the version.",
        "name": "needsUpdate",
        "title": "BufferAttribute.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.needsUpdate",
      },
      Object {
        "description": "Indicates how the underlying data in the buffer maps to the values in the GLSL shader code. See the constructor above for details.",
        "name": "normalized",
        "title": "BufferAttribute.normalized: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.normalized",
      },
      Object {
        "description": "A callback function that is executed after the Renderer has transferred the attribute array data to the GPU.",
        "name": "onUploadCallback",
        "title": "BufferAttribute.onUploadCallback: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.onUploadCallback",
      },
      Object {
        "description": "Object containing:
 offset: Default is *0*. Position at which to start update.
 count: Default is *-1*, which means don't use update ranges. 
 This can be used to only update some components of stored vectors (for example, just the component related to color).",
        "name": "updateRange",
        "title": "BufferAttribute.updateRange: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.updateRange",
      },
      Object {
        "description": "Defines the intended usage pattern of the data store for optimization purposes. Corresponds to the *usage* parameter of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)(). Default is *THREE.StaticDrawUsage*.",
        "name": "usage",
        "title": "BufferAttribute.usage: Usage",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.usage",
      },
      Object {
        "description": "A version number, incremented every time the needsUpdate property is set to true.",
        "name": "version",
        "title": "BufferAttribute.version: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.version",
      },
      Object {
        "description": "Applies matrix m to every Vector3 element of this BufferAttribute.",
        "name": "applyMatrix3",
        "title": "BufferAttribute.applyMatrix3( m: Matrix3 ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.applyMatrix3",
      },
      Object {
        "description": "Applies matrix m to every Vector3 element of this BufferAttribute.",
        "name": "applyMatrix4",
        "title": "BufferAttribute.applyMatrix4( m: Matrix4 ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.applyMatrix4",
      },
      Object {
        "description": "Applies normal matrix m to every Vector3 element of this BufferAttribute.",
        "name": "applyNormalMatrix",
        "title": "BufferAttribute.applyNormalMatrix( m: Matrix3 ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.applyNormalMatrix",
      },
      Object {
        "description": "Applies matrix m to every Vector3 element of this BufferAttribute, interpreting the elements as a direction vectors.",
        "name": "transformDirection",
        "title": "BufferAttribute.transformDirection( m: Matrix4 ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.transformDirection",
      },
      Object {
        "description": "Return a copy of this bufferAttribute.",
        "name": "clone",
        "title": "BufferAttribute.clone(): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.clone",
      },
      Object {
        "description": "Copies another BufferAttribute to this BufferAttribute.",
        "name": "copy",
        "title": "BufferAttribute.copy( bufferAttribute: BufferAttribute ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copy",
      },
      Object {
        "description": "Copy the array given here (which can be a normal array or TypedArray) into array.
 See [TypedArray.set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set) for notes on requirements if copying a TypedArray.",
        "name": "copyArray",
        "title": "BufferAttribute.copyArray( array ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copyArray",
      },
      Object {
        "description": "Copy a vector from bufferAttributearray[index1].",
        "name": "copyAt",
        "title": "BufferAttribute.copyAt ( index1: Integer, bufferAttribute: BufferAttribute, index2: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copyAt",
      },
      Object {
        "description": "Copy an array representing RGB color values into array.",
        "name": "copyColorsArray",
        "title": "BufferAttribute.copyColorsArray( colors: Array ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copyColorsArray",
      },
      Object {
        "description": "Copy an array representing Vector2s into array.",
        "name": "copyVector2sArray",
        "title": "BufferAttribute.copyVector2sArray( vectors: Array ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copyVector2sArray",
      },
      Object {
        "description": "Copy an array representing Vector3s into array.",
        "name": "copyVector3sArray",
        "title": "BufferAttribute.copyVector3sArray( vectors: Array ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copyVector3sArray",
      },
      Object {
        "description": "Copy an array representing Vector4s into array.",
        "name": "copyVector4sArray",
        "title": "BufferAttribute.copyVector4sArray( vectors: Array ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.copyVector4sArray",
      },
      Object {
        "description": "Returns the x component of the vector at the given index.",
        "name": "getX",
        "title": "BufferAttribute.getX( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.getX",
      },
      Object {
        "description": "Returns the y component of the vector at the given index.",
        "name": "getY",
        "title": "BufferAttribute.getY( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.getY",
      },
      Object {
        "description": "Returns the z component of the vector at the given index.",
        "name": "getZ",
        "title": "BufferAttribute.getZ( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.getZ",
      },
      Object {
        "description": "Returns the w component of the vector at the given index.",
        "name": "getW",
        "title": "BufferAttribute.getW( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.getW",
      },
      Object {
        "description": "Sets the value of the onUploadCallback property.
 In the WebGL / Buffergeometry this is used to free memory after the buffer has been transferred to the GPU.",
        "name": "onUpload",
        "title": "BufferAttribute.onUpload( callback: Function ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.onUpload",
      },
      Object {
        "description": "value â€” an Array or TypedArray from which to copy values. 
 offset â€” (optional) index of the array at which to start copying.
 Calls [TypedArray.set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set)( value, offset ) on the array.
 In particular, see that page for requirements on value being a TypedArray.",
        "name": "set",
        "title": "BufferAttribute.set ( value: Array, offset: Integer ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.set",
      },
      Object {
        "description": "Set usage to value.",
        "name": "setUsage",
        "title": "BufferAttribute.setUsage ( value: Usage ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setUsage",
      },
      Object {
        "description": "Sets the x component of the vector at the given index.",
        "name": "setX",
        "title": "BufferAttribute.setX( index: Integer, x: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setX",
      },
      Object {
        "description": "Sets the y component of the vector at the given index.",
        "name": "setY",
        "title": "BufferAttribute.setY( index: Integer, y: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setY",
      },
      Object {
        "description": "Sets the z component of the vector at the given index.",
        "name": "setZ",
        "title": "BufferAttribute.setZ( index: Integer, z: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setZ",
      },
      Object {
        "description": "Sets the w component of the vector at the given index.",
        "name": "setW",
        "title": "BufferAttribute.setW( index: Integer, w: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setW",
      },
      Object {
        "description": "Sets the x and y components of the vector at the given index.",
        "name": "setXY",
        "title": "BufferAttribute.setXY( index: Integer, x: Float, y: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setXY",
      },
      Object {
        "description": "Sets the x, y and z components of the vector at the given index.",
        "name": "setXYZ",
        "title": "BufferAttribute.setXYZ( index: Integer, x: Float, y: Float, z: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setXYZ",
      },
      Object {
        "description": "Sets the x, y, z and w components of the vector at the given index.",
        "name": "setXYZW",
        "title": "BufferAttribute.setXYZW( index: Integer, x: Float, y: Float, z: Float, w: Float ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferAttribute.setXYZW",
      },
    ],
    "title": "BufferAttribute( array: TypedArray, itemSize: Integer, normalized: Boolean )",
    "url": "https://threejs.org/docs/#api/en/core/BufferAttribute",
  },
  Object {
    "description": "A representation of mesh, line, or point geometry. Includes vertex positions, face indices, normals, colors, UVs, and custom attributes within buffers, reducing the cost of passing all this data to the GPU.",
    "name": "BufferGeometry",
    "properties": Array [
      Object {
        "description": "This hashmap has as id the name of the attribute to be set and as value the buffer to set it to. Rather than accessing this property directly, use .setAttribute and .getAttribute to access attributes of this geometry.",
        "name": "attributes",
        "title": "BufferGeometry.attributes: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.attributes",
      },
      Object {
        "description": "Bounding box for the bufferGeometry, which can be calculated with .computeBoundingBox(). Default is *null*.",
        "name": "boundingBox",
        "title": "BufferGeometry.boundingBox: Box3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.boundingBox",
      },
      Object {
        "description": "Bounding sphere for the bufferGeometry, which can be calculated with .computeBoundingSphere(). Default is *null*.",
        "name": "boundingSphere",
        "title": "BufferGeometry.boundingSphere: Sphere",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.boundingSphere",
      },
      Object {
        "description": "Determines the part of the geometry to render. This should not be set directly, instead use .setDrawRange. Default is \`\`\` { start: 0, count: Infinity } \`\`\` For non-indexed BufferGeometry, count is the number of vertices to render. For indexed BufferGeometry, count is the number of indices to render.",
        "name": "drawRange",
        "title": "BufferGeometry.drawRange: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.drawRange",
      },
      Object {
        "description": "Split the geometry into groups, each of which will be rendered in a separate WebGL draw call. This allows an array of materials to be used with the bufferGeometry.
 Each group is an object of the form: \`\`\`{ start: Integer, count: Integer, materialIndex: Integer }\`\`\` where start specifies the first element in this draw call â€“ the first vertex for non-indexed geometry, otherwise the first triangle index. Count specifies how many vertices (or indices) are included, and materialIndex specifies the material array index to use.
 Use .addGroup to add groups, rather than modifying this array directly.",
        "name": "groups",
        "title": "BufferGeometry.groups: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.groups",
      },
      Object {
        "description": "Unique number for this bufferGeometry instance.",
        "name": "id",
        "title": "BufferGeometry.id: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.id",
      },
      Object {
        "description": "Allows for vertices to be re-used across multiple triangles; this is called using \\"indexed triangles\\". Each triangle is associated with the indices of three vertices. This attribute therefore stores the index of each vertex for each triangular face. If this attribute is not set, the renderer assumes that each three contiguous positions represent a single triangle. Default is *null*.",
        "name": "index",
        "title": "BufferGeometry.index: BufferAttribute",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.index",
      },
      Object {
        "description": "Hashmap of BufferAttributes holding details of the geometry's morph targets.",
        "name": "morphAttributes",
        "title": "BufferGeometry.morphAttributes: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.morphAttributes",
      },
      Object {
        "description": "Used to control the morph target behavior; when set to true, the morph target data is treated as relative offsets, rather than as absolute positions/normals. Default is *false*.",
        "name": "morphTargetsRelative",
        "title": "BufferGeometry.morphTargetsRelative: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.morphTargetsRelative",
      },
      Object {
        "description": "Optional name for this bufferGeometry instance. Default is an empty string.",
        "name": "name",
        "title": "BufferGeometry.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.name",
      },
      Object {
        "description": "An object that can be used to store custom data about the BufferGeometry. It should not hold references to functions as these will not be cloned.",
        "name": "userData",
        "title": "BufferGeometry.userData: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.userData",
      },
      Object {
        "description": "[UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this object instance. This gets automatically assigned and shouldn't be edited.",
        "name": "uuid",
        "title": "BufferGeometry.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.uuid",
      },
      Object {
        "description": "Sets an attribute to this geometry. Use this rather than the attributes property, because an internal hashmap of .attributes is maintained to speed up iterating over attributes.",
        "name": "setAttribute",
        "title": "BufferGeometry.setAttribute( name: String, attribute: BufferAttribute ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.setAttribute",
      },
      Object {
        "description": "Adds a group to this geometry; see the groups property for details.",
        "name": "addGroup",
        "title": "BufferGeometry.addGroup( start: Integer, count: Integer, materialIndex: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.addGroup",
      },
      Object {
        "description": "Bakes matrix transform directly into vertex coordinates.",
        "name": "applyMatrix4",
        "title": "BufferGeometry.applyMatrix4( matrix: Matrix4 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.applyMatrix4",
      },
      Object {
        "description": "Center the geometry based on the bounding box.",
        "name": "center",
        "title": "BufferGeometry.center (): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.center",
      },
      Object {
        "description": "Creates a clone of this BufferGeometry.",
        "name": "clone",
        "title": "BufferGeometry.clone(): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.clone",
      },
      Object {
        "description": "Copies another BufferGeometry to this BufferGeometry.",
        "name": "copy",
        "title": "BufferGeometry.copy( bufferGeometry: BufferGeometry ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.copy",
      },
      Object {
        "description": "Clears all groups.",
        "name": "clearGroups",
        "title": "BufferGeometry.clearGroups( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.clearGroups",
      },
      Object {
        "description": "Computes bounding box of the geometry, updating .boundingBox attribute.
 Bounding boxes aren't computed by default. They need to be explicitly computed, otherwise they are *null*.",
        "name": "computeBoundingBox",
        "title": "BufferGeometry.computeBoundingBox(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.computeBoundingBox",
      },
      Object {
        "description": "Computes bounding sphere of the geometry, updating .boundingSphere attribute.
 Bounding spheres aren't computed by default. They need to be explicitly computed, otherwise they are *null*.",
        "name": "computeBoundingSphere",
        "title": "BufferGeometry.computeBoundingSphere(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.computeBoundingSphere",
      },
      Object {
        "description": "Calculates and adds a tangent attribute to this geometry.
 The computation is only supported for indexed geometries and if position, normal, and uv attributes are defined.",
        "name": "computeTangents",
        "title": "BufferGeometry.computeTangents(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.computeTangents",
      },
      Object {
        "description": "Computes vertex normals by averaging face normals.",
        "name": "computeVertexNormals",
        "title": "BufferGeometry.computeVertexNormals(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.computeVertexNormals",
      },
      Object {
        "description": "Disposes the object from memory. 
 You need to call this when you want the BufferGeometry removed while the application is running.",
        "name": "dispose",
        "title": "BufferGeometry.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.dispose",
      },
      Object {
        "description": "Returns the attribute with the specified name.",
        "name": "getAttribute",
        "title": "BufferGeometry.getAttribute( name: String ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.getAttribute",
      },
      Object {
        "description": "Return the .index buffer.",
        "name": "getIndex",
        "title": "BufferGeometry.getIndex (): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.getIndex",
      },
      Object {
        "description": "Returns *true* if the attribute with the specified name exists.",
        "name": "hasAttribute",
        "title": "BufferGeometry.hasAttribute( name: String ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.hasAttribute",
      },
      Object {
        "description": "vector - A world vector to look at.
 Rotates the geometry to face a point in space. This is typically done as a one time operation, and not during a loop. Use Object3D.lookAt for typical real-time mesh usage.",
        "name": "lookAt",
        "title": "BufferGeometry.lookAt ( vector: Vector3 ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.lookAt",
      },
      Object {
        "description": "Merge in another BufferGeometry with an optional offset of where to start merging in.",
        "name": "merge",
        "title": "BufferGeometry.merge( bufferGeometry: BufferGeometry, offset: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.merge",
      },
      Object {
        "description": "Every normal vector in a geometry will have a magnitude of 1. This will correct lighting on the geometry surfaces.",
        "name": "normalizeNormals",
        "title": "BufferGeometry.normalizeNormals(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.normalizeNormals",
      },
      Object {
        "description": "Deletes the attribute with the specified name.",
        "name": "deleteAttribute",
        "title": "BufferGeometry.deleteAttribute( name: String ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.deleteAttribute",
      },
      Object {
        "description": "Rotate the geometry about the X axis. This is typically done as a one time operation, and not during a loop. Use Object3D.rotation for typical real-time mesh rotation.",
        "name": "rotateX",
        "title": "BufferGeometry.rotateX ( radians: Float ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.rotateX",
      },
      Object {
        "description": "Rotate the geometry about the Y axis. This is typically done as a one time operation, and not during a loop. Use Object3D.rotation for typical real-time mesh rotation.",
        "name": "rotateY",
        "title": "BufferGeometry.rotateY ( radians: Float ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.rotateY",
      },
      Object {
        "description": "Rotate the geometry about the Z axis. This is typically done as a one time operation, and not during a loop. Use Object3D.rotation for typical real-time mesh rotation.",
        "name": "rotateZ",
        "title": "BufferGeometry.rotateZ ( radians: Float ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.rotateZ",
      },
      Object {
        "description": "Scale the geometry data. This is typically done as a one time operation, and not during a loop. Use Object3D.scale for typical real-time mesh scaling.",
        "name": "scale",
        "title": "BufferGeometry.scale ( x: Float, y: Float, z: Float ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.scale",
      },
      Object {
        "description": "Set the .index buffer.",
        "name": "setIndex",
        "title": "BufferGeometry.setIndex ( index: BufferAttribute ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.setIndex",
      },
      Object {
        "description": "Set the .drawRange property. For non-indexed BufferGeometry, count is the number of vertices to render. For indexed BufferGeometry, count is the number of indices to render.",
        "name": "setDrawRange",
        "title": "BufferGeometry.setDrawRange ( start: Integer, count: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.setDrawRange",
      },
      Object {
        "description": "Sets the attributes for this BufferGeometry from an array of points.",
        "name": "setFromPoints",
        "title": "BufferGeometry.setFromPoints ( points: Array ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.setFromPoints",
      },
      Object {
        "description": "Convert the buffer geometry to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "BufferGeometry.toJSON(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.toJSON",
      },
      Object {
        "description": "Return a non-index version of an indexed BufferGeometry.",
        "name": "toNonIndexed",
        "title": "BufferGeometry.toNonIndexed(): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.toNonIndexed",
      },
      Object {
        "description": "Translate the geometry. This is typically done as a one time operation, and not during a loop. Use Object3D.position for typical real-time mesh translation.",
        "name": "translate",
        "title": "BufferGeometry.translate ( x: Float, y: Float, z: Float ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/BufferGeometry.translate",
      },
    ],
    "title": "BufferGeometry()",
    "url": "https://threejs.org/docs/#api/en/core/BufferGeometry",
  },
  Object {
    "description": "Object for keeping track of time. This uses [performance.now](https://developer.mozilla.org/en-US/docs/Web/API/Performance/now) if it is available, otherwise it reverts to the less accurate [Date.now](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now).",
    "name": "Clock",
    "properties": Array [
      Object {
        "description": "If set, starts the clock automatically when the first update is called. Default is true.",
        "name": "autoStart",
        "title": "Clock.autoStart: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Clock.autoStart",
      },
      Object {
        "description": "Holds the time at which the clock's start method was last called.",
        "name": "startTime",
        "title": "Clock.startTime: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Clock.startTime",
      },
      Object {
        "description": "Holds the time at which the clock's start, getElapsedTime or getDelta methods were last called.",
        "name": "oldTime",
        "title": "Clock.oldTime: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Clock.oldTime",
      },
      Object {
        "description": "Keeps track of the total time that the clock has been running.",
        "name": "elapsedTime",
        "title": "Clock.elapsedTime: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Clock.elapsedTime",
      },
      Object {
        "description": "Whether the clock is running or not.",
        "name": "running",
        "title": "Clock.running: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Clock.running",
      },
      Object {
        "description": "Starts clock. Also sets the startTime and oldTime to the current time, sets elapsedTime to *0* and running to *true*.",
        "name": "start",
        "title": "Clock.start(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Clock.start",
      },
      Object {
        "description": "Stops clock and sets oldTime to the current time.",
        "name": "stop",
        "title": "Clock.stop(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Clock.stop",
      },
      Object {
        "description": "Get the seconds passed since the clock started and sets oldTime to the current time.
 If autoStart is *true* and the clock is not running, also starts the clock.",
        "name": "getElapsedTime",
        "title": "Clock.getElapsedTime(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Clock.getElapsedTime",
      },
      Object {
        "description": "Get the seconds passed since the time oldTime was set and sets oldTime to the current time.
 If autoStart is *true* and the clock is not running, also starts the clock.",
        "name": "getDelta",
        "title": "Clock.getDelta(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Clock.getDelta",
      },
    ],
    "title": "Clock( autoStart: Boolean )",
    "url": "https://threejs.org/docs/#api/en/core/Clock",
  },
  Object {
    "description": "JavaScript events for custom objects.
 [Eventdispatcher on GitHub](https://github.com/mrdoob/eventdispatcher.js)",
    "name": "EventDispatcher",
    "properties": Array [
      Object {
        "description": "type - The type of event to listen to.
 listener - The function that gets called when the event is fired.",
        "name": "addEventListener",
        "title": "EventDispatcher.addEventListener( type: String, listener: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/EventDispatcher.addEventListener",
      },
      Object {
        "description": "type - The type of event to listen to.
 listener - The function that gets called when the event is fired.",
        "name": "hasEventListener",
        "title": "EventDispatcher.hasEventListener( type: String, listener: Function ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/EventDispatcher.hasEventListener",
      },
      Object {
        "description": "type - The type of the listener that gets removed.
 listener - The listener function that gets removed.",
        "name": "removeEventListener",
        "title": "EventDispatcher.removeEventListener( type: String, listener: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/EventDispatcher.removeEventListener",
      },
      Object {
        "description": "event - The event that gets fired.",
        "name": "dispatchEvent",
        "title": "EventDispatcher.dispatchEvent( event: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/EventDispatcher.dispatchEvent",
      },
    ],
    "title": "EventDispatcher()",
    "url": "https://threejs.org/docs/#api/en/core/EventDispatcher",
  },
  Object {
    "description": "This buffer attribute class does not construct a VBO. Instead, it uses whatever VBO is passed in constructor and can later be altered via the *buffer* property.
 It is required to pass additional params alongside the VBO. Those are: the GL context, the GL data type, the number of components per vertex, the number of bytes per component, and the number of vertices.
 The most common use case for this class is when some kind of GPGPU calculation interferes or even produces the VBOs in question.",
    "name": "GLBufferAttribute",
    "properties": Array [
      Object {
        "description": "The current [WebGLBuffer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLBuffer) instance.",
        "name": "buffer",
        "title": "GLBufferAttribute.buffer: WebGLBuffer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.buffer",
      },
      Object {
        "description": "The expected number of vertices in VBO.",
        "name": "count",
        "title": "GLBufferAttribute.count: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.count",
      },
      Object {
        "description": "How many values make up each item (vertex).",
        "name": "itemSize",
        "title": "GLBufferAttribute.itemSize: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.itemSize",
      },
      Object {
        "description": "Stores the corresponding size in bytes for the current *type* property value.",
        "name": "elementSize",
        "title": "GLBufferAttribute.elementSize: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.elementSize",
      },
      Object {
        "description": "A [WebGL Data Type](https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants#Data_types) describing the underlying VBO contents.",
        "name": "type",
        "title": "GLBufferAttribute.type: GLenum",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.type",
      },
      Object {
        "description": "Read-only. Always *true*.",
        "name": "isGLBufferAttribute",
        "title": "GLBufferAttribute.isGLBufferAttribute: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.isGLBufferAttribute",
      },
      Object {
        "description": "Sets the *buffer* property.",
        "name": "setBuffer",
        "title": "GLBufferAttribute.setBuffer( buffer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.setBuffer",
      },
      Object {
        "description": "Sets the both *type* and *elementSize* properties.",
        "name": "setType",
        "title": "GLBufferAttribute.setType( type, elementSize ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.setType",
      },
      Object {
        "description": "Sets the *itemSize* property.",
        "name": "setItemSize",
        "title": "GLBufferAttribute.setItemSize( itemSize ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.setItemSize",
      },
      Object {
        "description": "Sets the *count* property.",
        "name": "setCount",
        "title": "GLBufferAttribute.setCount( count ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.setCount",
      },
      Object {
        "description": "A version number, incremented every time the needsUpdate property is set to true.",
        "name": "version",
        "title": "GLBufferAttribute.version: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.version",
      },
      Object {
        "description": "Default is *false*. Setting this to true increments version.",
        "name": "needsUpdate",
        "title": "GLBufferAttribute.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute.needsUpdate",
      },
    ],
    "title": "GLBufferAttribute( buffer: WebGLBuffer, type: GLenum, itemSize: Integer, elementSize: Integer, count: Integer )",
    "url": "https://threejs.org/docs/#api/en/core/GLBufferAttribute",
  },
  Object {
    "description": "An instanced version of BufferAttribute.",
    "name": "InstancedBufferAttribute",
    "properties": Array [
      Object {
        "description": "Defines how often a value of this buffer attribute should be repeated. A value of one means that each value of the instanced attribute is used for a single instance. A value of two means that each value is used for two consecutive instances (and so on). Default is *1*.",
        "name": "meshPerAttribute",
        "title": "InstancedBufferAttribute.meshPerAttribute: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InstancedBufferAttribute.meshPerAttribute",
      },
    ],
    "title": "InstancedBufferAttribute( array: TypedArray, itemSize: Integer, normalized: Boolean, meshPerAttribute: Number )",
    "url": "https://threejs.org/docs/#api/en/core/InstancedBufferAttribute",
  },
  Object {
    "description": "An instanced version of BufferGeometry.",
    "name": "InstancedBufferGeometry",
    "properties": Array [
      Object {
        "description": "Default is *Infinity*.",
        "name": "instanceCount",
        "title": "InstancedBufferGeometry.instanceCount: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InstancedBufferGeometry.instanceCount",
      },
    ],
    "title": "InstancedBufferGeometry( )",
    "url": "https://threejs.org/docs/#api/en/core/InstancedBufferGeometry",
  },
  Object {
    "description": "An instanced version of InterleavedBuffer.",
    "name": "InstancedInterleavedBuffer",
    "properties": Array [
      Object {
        "description": "Default is *1*.",
        "name": "meshPerAttribute",
        "title": "InstancedInterleavedBuffer.meshPerAttribute: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InstancedInterleavedBuffer.meshPerAttribute",
      },
    ],
    "title": "InstancedInterleavedBuffer( array: TypedArray, itemSize: Integer, meshPerAttribute: Number )",
    "url": "https://threejs.org/docs/#api/en/core/InstancedInterleavedBuffer",
  },
  Object {
    "description": "\\"Interleaved\\" means that multiple attributes, possibly of different types, (e.g., position, normal, uv, color) are packed into a single array buffer. 
 An introduction into interleaved arrays can be found here: [Interleaved array basics](https://blog.tojicode.com/2011/05/interleaved-array-basics.html)",
    "name": "InterleavedBuffer",
    "properties": Array [
      Object {
        "description": "A typed array with a shared buffer. Stores the geometry data.",
        "name": "array",
        "title": "InterleavedBuffer.array: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.array",
      },
      Object {
        "description": "The number of typed-array elements per vertex.",
        "name": "stride",
        "title": "InterleavedBuffer.stride: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.stride",
      },
      Object {
        "description": "Gives the total number of elements in the array.",
        "name": "count",
        "title": "InterleavedBuffer.count: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.count",
      },
      Object {
        "description": "Object containing offset and count.",
        "name": "updateRange",
        "title": "InterleavedBuffer.updateRange: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.updateRange",
      },
      Object {
        "description": "Default is *0*.",
        "name": "updateRange.offset",
        "title": "InterleavedBuffer.updateRange.offset: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.updateRange.offset",
      },
      Object {
        "description": "Default is *-1*.",
        "name": "updateRange.count",
        "title": "InterleavedBuffer.updateRange.count: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.updateRange.count",
      },
      Object {
        "description": "[UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this instance. This gets automatically assigned, so this shouldn't be edited.",
        "name": "uuid",
        "title": "InterleavedBuffer.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.uuid",
      },
      Object {
        "description": "A version number, incremented every time the needsUpdate property is set to true.",
        "name": "version",
        "title": "InterleavedBuffer.version: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.version",
      },
      Object {
        "description": "Default is *false*. Setting this to true increments version.",
        "name": "needsUpdate",
        "title": "InterleavedBuffer.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.needsUpdate",
      },
      Object {
        "description": "Defines the intended usage pattern of the data store for optimization purposes. Corresponds to the *usage* parameter of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)().",
        "name": "usage",
        "title": "InterleavedBuffer.usage: Usage",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.usage",
      },
      Object {
        "description": "Copies another InterleavedBuffer to this InterleavedBuffer.",
        "name": "copy",
        "title": "InterleavedBuffer.copy( source: InterleavedBuffer ): InterleavedBuffer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.copy",
      },
      Object {
        "description": "Copies data from attributearray[index1].",
        "name": "copyAt",
        "title": "InterleavedBuffer.copyAt( index1: Integer, attribute: InterleavedBuffer, index2: Integer ): InterleavedBuffer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.copyAt",
      },
      Object {
        "description": "value - The source (typed) array.
 offset - The offset into the target array at which to begin writing values from the source array. Default is *0*.
 Stores multiple values in the buffer, reading input values from a specified array.",
        "name": "set",
        "title": "InterleavedBuffer.set( value: TypedArray, offset: Integer ): InterleavedBuffer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.set",
      },
      Object {
        "description": "data - This object holds shared array buffers required for properly cloning geometries with interleaved attributes.
 Creates a clone of this InterleavedBuffer.",
        "name": "clone",
        "title": "InterleavedBuffer.clone( data: Object ): InterleavedBuffer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.clone",
      },
      Object {
        "description": "Set usage to value.",
        "name": "setUsage",
        "title": "InterleavedBuffer.setUsage ( value: Usage ): InterleavedBuffer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.setUsage",
      },
      Object {
        "description": "data - This object holds shared array buffers required for properly serializing geometries with interleaved attributes.
 Serializes this InterleavedBuffer.",
        "name": "toJSON",
        "title": "InterleavedBuffer.toJSON( data: Object ): InterleavedBuffer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer.toJSON",
      },
    ],
    "title": "InterleavedBuffer( array: TypedArray, stride: Integer )",
    "url": "https://threejs.org/docs/#api/en/core/InterleavedBuffer",
  },
  Object {
    "description": "",
    "name": "InterleavedBufferAttribute",
    "properties": Array [
      Object {
        "description": "The InterleavedBuffer instance passed in the constructor.",
        "name": "data",
        "title": "InterleavedBufferAttribute.data: InterleavedBuffer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.data",
      },
      Object {
        "description": "The value of data.array.",
        "name": "array",
        "title": "InterleavedBufferAttribute.array: TypedArray",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.array",
      },
      Object {
        "description": "The value of data.count. If the buffer is storing a 3-component item (such as a position, normal, or color), then this will count the number of such items stored.",
        "name": "count",
        "title": "InterleavedBufferAttribute.count: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.count",
      },
      Object {
        "description": "How many values make up each item.",
        "name": "itemSize",
        "title": "InterleavedBufferAttribute.itemSize: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.itemSize",
      },
      Object {
        "description": "Optional name for this attribute instance. Default is an empty string.",
        "name": "name",
        "title": "InterleavedBufferAttribute.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.name",
      },
      Object {
        "description": "Default is *false*. Setting this to *true* will send the entire interleaved buffer (not just the specific attribute data) to the GPU again.",
        "name": "needsUpdate",
        "title": "InterleavedBufferAttribute.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.needsUpdate",
      },
      Object {
        "description": "Default is *false*.",
        "name": "normalized",
        "title": "InterleavedBufferAttribute.normalized: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.normalized",
      },
      Object {
        "description": "The offset in the underlying array buffer where an item starts.",
        "name": "offset",
        "title": "InterleavedBufferAttribute.offset: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.offset",
      },
      Object {
        "description": "Applies matrix m to every Vector3 element of this InterleavedBufferAttribute.",
        "name": "applyMatrix4",
        "title": "InterleavedBufferAttribute.applyMatrix4( m: Matrix4 ): InterleavedBufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.applyMatrix4",
      },
      Object {
        "description": "Applies normal matrix m to every Vector3 element of this InterleavedBufferAttribute.",
        "name": "applyNormalMatrix",
        "title": "InterleavedBufferAttribute.applyNormalMatrix( m: Matrix3 ): InterleavedBufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.applyNormalMatrix",
      },
      Object {
        "description": "Applies matrix m to every Vector3 element of this InterleavedBufferAttribute, interpreting the elements as a direction vectors.",
        "name": "transformDirection",
        "title": "InterleavedBufferAttribute.transformDirection( m: Matrix4 ): InterleavedBufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.transformDirection",
      },
      Object {
        "description": "Returns the x component of the item at the given index.",
        "name": "getX",
        "title": "InterleavedBufferAttribute.getX( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.getX",
      },
      Object {
        "description": "Returns the y component of the item at the given index.",
        "name": "getY",
        "title": "InterleavedBufferAttribute.getY( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.getY",
      },
      Object {
        "description": "Returns the z component of the item at the given index.",
        "name": "getZ",
        "title": "InterleavedBufferAttribute.getZ( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.getZ",
      },
      Object {
        "description": "Returns the w component of the item at the given index.",
        "name": "getW",
        "title": "InterleavedBufferAttribute.getW( index: Integer ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.getW",
      },
      Object {
        "description": "Sets the x component of the item at the given index.",
        "name": "setX",
        "title": "InterleavedBufferAttribute.setX( index: Integer, x: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setX",
      },
      Object {
        "description": "Sets the y component of the item at the given index.",
        "name": "setY",
        "title": "InterleavedBufferAttribute.setY( index: Integer, y: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setY",
      },
      Object {
        "description": "Sets the z component of the item at the given index.",
        "name": "setZ",
        "title": "InterleavedBufferAttribute.setZ( index: Integer, z: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setZ",
      },
      Object {
        "description": "Sets the w component of the item at the given index.",
        "name": "setW",
        "title": "InterleavedBufferAttribute.setW( index: Integer, w: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setW",
      },
      Object {
        "description": "Sets the x and y components of the item at the given index.",
        "name": "setXY",
        "title": "InterleavedBufferAttribute.setXY( index: Integer, x: Float, y: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setXY",
      },
      Object {
        "description": "Sets the x, y and z components of the item at the given index.",
        "name": "setXYZ",
        "title": "InterleavedBufferAttribute.setXYZ( index: Integer, x: Float, y: Float, z: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setXYZ",
      },
      Object {
        "description": "Sets the x, y, z and w components of the item at the given index.",
        "name": "setXYZW",
        "title": "InterleavedBufferAttribute.setXYZW( index: Integer, x: Float, y: Float, z: Float, w: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute.setXYZW",
      },
    ],
    "title": "InterleavedBufferAttribute( interleavedBuffer: InterleavedBuffer, itemSize: Integer, offset: Integer, normalized: Boolean )",
    "url": "https://threejs.org/docs/#api/en/core/InterleavedBufferAttribute",
  },
  Object {
    "description": "A Layers object assigns an Object3D to 1 or more of 32 layers numbered 0 to 31 - internally the layers are stored as a [bit mask](https://en.wikipedia.org/wiki/Mask_(computing)), and by default all Object3Ds are a member of layer 0.
 This can be used to control visibility - an object must share a layer with a camera to be visible when that camera's view is renderered.
 All classes that inherit from Object3D have an Object3D.layers property which is an instance of this class.",
    "name": "Layers",
    "properties": Array [
      Object {
        "description": "A bit mask storing which of the 32 layers this layers object is currently a member of.",
        "name": "mask",
        "title": "Layers.mask: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Layers.mask",
      },
      Object {
        "description": "layer - an integer from 0 to 31.
 Remove membership of this *layer*.",
        "name": "disable",
        "title": "Layers.disable( layer: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.disable",
      },
      Object {
        "description": "layer - an integer from 0 to 31.
 Add membership of this *layer*.",
        "name": "enable",
        "title": "Layers.enable( layer: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.enable",
      },
      Object {
        "description": "layer - an integer from 0 to 31.
 Set membership to *layer*, and remove membership all other layers.",
        "name": "set",
        "title": "Layers.set( layer: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.set",
      },
      Object {
        "description": "layers - a Layers object
 Returns true if this and the passed *layers* object have at least one layer in common.",
        "name": "test",
        "title": "Layers.test( layers: Layers ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.test",
      },
      Object {
        "description": "layer - an integer from 0 to 31.
 Toggle membership of *layer*.",
        "name": "toggle",
        "title": "Layers.toggle( layer: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.toggle",
      },
      Object {
        "description": "Add membership to all layers.",
        "name": "enableAll",
        "title": "Layers.enableAll(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.enableAll",
      },
      Object {
        "description": "Remove membership from all layers.",
        "name": "disableAll",
        "title": "Layers.disableAll(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Layers.disableAll",
      },
    ],
    "title": "Layers()",
    "url": "https://threejs.org/docs/#api/en/core/Layers",
  },
  Object {
    "description": "This is the base class for most objects in three.js and provides a set of properties and methods for manipulating objects in 3D space.
 Note that this can be used for grouping objects via the .add( object ) method which adds the object as a child, however it is better to use Group for this.",
    "name": "Object3D",
    "properties": Array [
      Object {
        "description": "Array with object's animation clips.",
        "name": "animations",
        "title": "Object3D.animations: AnimationClip",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.animations",
      },
      Object {
        "description": "Whether the object gets rendered into shadow map. Default is *false*.",
        "name": "castShadow",
        "title": "Object3D.castShadow: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.castShadow",
      },
      Object {
        "description": "Array with object's children. See Group for info on manually grouping objects.",
        "name": "children",
        "title": "Object3D.children: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.children",
      },
      Object {
        "description": "Custom depth material to be used when rendering to the depth map. Can only be used in context of meshes. When shadow-casting with a DirectionalLight or SpotLight, if you are (a) modifying vertex positions in the vertex shader, (b) using a displacement map, (c) using an alpha map with alphaTest, or (d) using a transparent texture with alphaTest, you must specify a customDepthMaterial for proper shadows. Default is *undefined*.",
        "name": "customDepthMaterial",
        "title": "Object3D.customDepthMaterial: Material",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.customDepthMaterial",
      },
      Object {
        "description": "Same as customDepthMaterial, but used with PointLight. Default is *undefined*.",
        "name": "customDistanceMaterial",
        "title": "Object3D.customDistanceMaterial: Material",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.customDistanceMaterial",
      },
      Object {
        "description": "When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object. If set to \`false\` the object gets rendered every frame even if it is not in the frustum of the camera. Default is \`true\`.",
        "name": "frustumCulled",
        "title": "Object3D.frustumCulled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.frustumCulled",
      },
      Object {
        "description": "readonly â€“ Unique number for this object instance.",
        "name": "id",
        "title": "Object3D.id: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.id",
      },
      Object {
        "description": "The layer membership of the object. The object is only visible if it has at least one layer in common with the Camera in use. This property can also be used to filter out unwanted objects in ray-intersection tests when using Raycaster.",
        "name": "layers",
        "title": "Object3D.layers: Layers",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.layers",
      },
      Object {
        "description": "The local transform matrix.",
        "name": "matrix",
        "title": "Object3D.matrix: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.matrix",
      },
      Object {
        "description": "When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property. Default is Object3D.DefaultMatrixAutoUpdate (true).",
        "name": "matrixAutoUpdate",
        "title": "Object3D.matrixAutoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.matrixAutoUpdate",
      },
      Object {
        "description": "The global transform of the object. If the Object3D has no parent, then it's identical to the local transform .matrix.",
        "name": "matrixWorld",
        "title": "Object3D.matrixWorld: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.matrixWorld",
      },
      Object {
        "description": "When this is set, it calculates the matrixWorld in that frame and resets this property to false. Default is *false*.",
        "name": "matrixWorldNeedsUpdate",
        "title": "Object3D.matrixWorldNeedsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.matrixWorldNeedsUpdate",
      },
      Object {
        "description": "This is passed to the shader and used to calculate the position of the object.",
        "name": "modelViewMatrix",
        "title": "Object3D.modelViewMatrix: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.modelViewMatrix",
      },
      Object {
        "description": "Optional name of the object (doesn't need to be unique). Default is an empty string.",
        "name": "name",
        "title": "Object3D.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.name",
      },
      Object {
        "description": "This is passed to the shader and used to calculate lighting for the object. It is the transpose of the inverse of the upper left 3x3 sub-matrix of this object's modelViewMatrix.
 The reason for this special matrix is that simply using the modelViewMatrix could result in a non-unit length of normals (on scaling) or in a non-perpendicular direction (on non-uniform scaling).
 On the other hand the translation part of the modelViewMatrix is not relevant for the calculation of normals. Thus a Matrix3 is sufficient.",
        "name": "normalMatrix",
        "title": "Object3D.normalMatrix: Matrix3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.normalMatrix",
      },
      Object {
        "description": "An optional callback that is executed immediately after a 3D object is rendered. This function is called with the following parameters: renderer, scene, camera, geometry, material, group.",
        "name": "onAfterRender",
        "title": "Object3D.onAfterRender: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.onAfterRender",
      },
      Object {
        "description": "An optional callback that is executed immediately before a 3D object is rendered. This function is called with the following parameters: renderer, scene, camera, geometry, material, group.",
        "name": "onBeforeRender",
        "title": "Object3D.onBeforeRender: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.onBeforeRender",
      },
      Object {
        "description": "Object's parent in the [scene graph](https://en.wikipedia.org/wiki/Scene_graph). An object can have at most one parent.",
        "name": "parent",
        "title": "Object3D.parent: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.parent",
      },
      Object {
        "description": "A Vector3 representing the object's local position. Default is (0, 0, 0).",
        "name": "position",
        "title": "Object3D.position: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.position",
      },
      Object {
        "description": "Object's local rotation as a Quaternion.",
        "name": "quaternion",
        "title": "Object3D.quaternion: Quaternion",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.quaternion",
      },
      Object {
        "description": "Whether the material receives shadows. Default is *false*.",
        "name": "receiveShadow",
        "title": "Object3D.receiveShadow: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.receiveShadow",
      },
      Object {
        "description": "This value allows the default rendering order of [scene graph](https://en.wikipedia.org/wiki/Scene_graph) objects to be overridden although opaque and transparent objects remain sorted independently. When this property is set for an instance of Group, all descendants objects will be sorted and rendered together. Sorting is from lowest to highest renderOrder. Default value is *0*.",
        "name": "renderOrder",
        "title": "Object3D.renderOrder: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.renderOrder",
      },
      Object {
        "description": "Object's local rotation (see [Euler angles](https://en.wikipedia.org/wiki/Euler_angles)), in radians.",
        "name": "rotation",
        "title": "Object3D.rotation: Euler",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.rotation",
      },
      Object {
        "description": "The object's local scale. Default is Vector3( 1, 1, 1 ).",
        "name": "scale",
        "title": "Object3D.scale: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.scale",
      },
      Object {
        "description": "This is used by the lookAt method, for example, to determine the orientation of the result.
 Default is Object3D.DefaultUp - that is, ( 0, 1, 0 ).",
        "name": "up",
        "title": "Object3D.up: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.up",
      },
      Object {
        "description": "An object that can be used to store custom data about the Object3D. It should not hold references to functions as these will not be cloned.",
        "name": "userData",
        "title": "Object3D.userData: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.userData",
      },
      Object {
        "description": "[UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this object instance. This gets automatically assigned, so this shouldn't be edited.",
        "name": "uuid",
        "title": "Object3D.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.uuid",
      },
      Object {
        "description": "Object gets rendered if *true*. Default is *true*.",
        "name": "visible",
        "title": "Object3D.visible: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.visible",
      },
      Object {
        "description": "The default up direction for objects, also used as the default position for DirectionalLight, HemisphereLight and Spotlight (which creates lights shining from the top down).
 Set to ( 0, 1, 0 ) by default.",
        "name": "DefaultUp",
        "title": "Object3D.DefaultUp: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.DefaultUp",
      },
      Object {
        "description": "The default setting for matrixAutoUpdate for newly created Object3Ds.",
        "name": "DefaultMatrixAutoUpdate",
        "title": "Object3D.DefaultMatrixAutoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.DefaultMatrixAutoUpdate",
      },
      Object {
        "description": "Adds *object* as child of this object. An arbitrary number of objects may be added. Any current parent on an object passed in here will be removed, since an object can have at most one parent.
 See Group for info on manually grouping objects.",
        "name": "add",
        "title": "Object3D.add( object: Object3D, ... ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.add",
      },
      Object {
        "description": "Applies the matrix transform to the object and updates the object's position, rotation and scale.",
        "name": "applyMatrix4",
        "title": "Object3D.applyMatrix4( matrix: Matrix4 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.applyMatrix4",
      },
      Object {
        "description": "Applies the rotation represented by the quaternion to the object.",
        "name": "applyQuaternion",
        "title": "Object3D.applyQuaternion( quaternion: Quaternion ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.applyQuaternion",
      },
      Object {
        "description": "Adds *object* as a child of this, while maintaining the object's world transform.",
        "name": "attach",
        "title": "Object3D.attach( object: Object3D ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.attach",
      },
      Object {
        "description": "recursive â€” if true, descendants of the object are also cloned. Default is true.
 Returns a clone of this object and optionally all descendants.",
        "name": "clone",
        "title": "Object3D.clone( recursive: Boolean ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.clone",
      },
      Object {
        "description": "recursive â€” if true, descendants of the object are also copied. Default is true.
 Copy the given object into this object. Note: event listeners and user-defined callbacks (.onAfterRender and .onBeforeRender) are not copied.",
        "name": "copy",
        "title": "Object3D.copy( object: Object3D, recursive: Boolean ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.copy",
      },
      Object {
        "description": "id â€” Unique number of the object instance
 Searches through an object and its children, starting with the object itself, and returns the first with a matching id.
 Note that ids are assigned in chronological order: 1, 2, 3, ..., incrementing by one for each new object.",
        "name": "getObjectById",
        "title": "Object3D.getObjectById( id: Integer ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getObjectById",
      },
      Object {
        "description": "name â€” String to match to the children's Object3D.name property. 
 Searches through an object and its children, starting with the object itself, and returns the first with a matching name.
 Note that for most objects the name is an empty string by default. You will have to set it manually to make use of this method.",
        "name": "getObjectByName",
        "title": "Object3D.getObjectByName( name: String ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getObjectByName",
      },
      Object {
        "description": "name â€” the property name to search for. 
 value â€” value of the given property. 
 Searches through an object and its children, starting with the object itself, and returns the first with a property that matches the value given.",
        "name": "getObjectByProperty",
        "title": "Object3D.getObjectByProperty( name: String, value: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getObjectByProperty",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3. 
 Returns a vector representing the position of the object in world space.",
        "name": "getWorldPosition",
        "title": "Object3D.getWorldPosition( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getWorldPosition",
      },
      Object {
        "description": "target â€” the result will be copied into this Quaternion. 
 Returns a quaternion representing the rotation of the object in world space.",
        "name": "getWorldQuaternion",
        "title": "Object3D.getWorldQuaternion( target: Quaternion ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getWorldQuaternion",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3. 
 Returns a vector of the scaling factors applied to the object for each axis in world space.",
        "name": "getWorldScale",
        "title": "Object3D.getWorldScale( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getWorldScale",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3. 
 Returns a vector representing the direction of object's positive z-axis in world space.",
        "name": "getWorldDirection",
        "title": "Object3D.getWorldDirection( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.getWorldDirection",
      },
      Object {
        "description": "vector - A vector representing a position in this object's local space.
 Converts the vector from this object's local space to world space.",
        "name": "localToWorld",
        "title": "Object3D.localToWorld( vector: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.localToWorld",
      },
      Object {
        "description": "vector - A vector representing a position in world space.
 Optionally, the x, y and z components of the world space position.
 Rotates the object to face a point in world space.
 This method does not support objects having non-uniformly-scaled parent(s).",
        "name": "lookAt",
        "title": "Object3D.lookAt( vector: Vector3 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.lookAt",
      },
      Object {
        "description": "Abstract (empty) method to get intersections between a casted ray and this object. Subclasses such as Mesh, Line, and Points implement this method in order to use raycasting.",
        "name": "raycast",
        "title": "Object3D.raycast( raycaster: Raycaster, intersects: Array ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.raycast",
      },
      Object {
        "description": "Removes *object* as child of this object. An arbitrary number of objects may be removed.",
        "name": "remove",
        "title": "Object3D.remove( object: Object3D, ... ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.remove",
      },
      Object {
        "description": "Removes all child objects.",
        "name": "clear",
        "title": "Object3D.clear(): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.clear",
      },
      Object {
        "description": "axis â€” A normalized vector in object space. 
 angle â€” The angle in radians.
 Rotate an object along an axis in object space. The axis is assumed to be normalized.",
        "name": "rotateOnAxis",
        "title": "Object3D.rotateOnAxis( axis: Vector3, angle: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.rotateOnAxis",
      },
      Object {
        "description": "axis â€” A normalized vector in world space. 
 angle â€” The angle in radians.
 Rotate an object along an axis in world space. The axis is assumed to be normalized. Method Assumes no rotated parent.",
        "name": "rotateOnWorldAxis",
        "title": "Object3D.rotateOnWorldAxis( axis: Vector3, angle: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.rotateOnWorldAxis",
      },
      Object {
        "description": "rad - the angle to rotate in radians.
 Rotates the object around x axis in local space.",
        "name": "rotateX",
        "title": "Object3D.rotateX( rad: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.rotateX",
      },
      Object {
        "description": "rad - the angle to rotate in radians.
 Rotates the object around y axis in local space.",
        "name": "rotateY",
        "title": "Object3D.rotateY( rad: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.rotateY",
      },
      Object {
        "description": "rad - the angle to rotate in radians.
 Rotates the object around z axis in local space.",
        "name": "rotateZ",
        "title": "Object3D.rotateZ( rad: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.rotateZ",
      },
      Object {
        "description": "axis â€” A normalized vector in object space. 
 angle â€” angle in radians
 Calls setFromAxisAngle( axis, angle ) on the .quaternion.",
        "name": "setRotationFromAxisAngle",
        "title": "Object3D.setRotationFromAxisAngle( axis: Vector3, angle: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.setRotationFromAxisAngle",
      },
      Object {
        "description": "euler â€” Euler angle specifying rotation amount.
 Calls setRotationFromEuler( euler) on the .quaternion.",
        "name": "setRotationFromEuler",
        "title": "Object3D.setRotationFromEuler( euler: Euler ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.setRotationFromEuler",
      },
      Object {
        "description": "m â€” rotate the quaternion by the rotation component of the matrix.
 Calls setFromRotationMatrix( m) on the .quaternion.
 Note that this assumes that the upper 3x3 of m is a pure rotation matrix (i.e, unscaled).",
        "name": "setRotationFromMatrix",
        "title": "Object3D.setRotationFromMatrix( m: Matrix4 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.setRotationFromMatrix",
      },
      Object {
        "description": "q â€” normalized Quaternion.
 Copy the given quaternion into .quaternion.",
        "name": "setRotationFromQuaternion",
        "title": "Object3D.setRotationFromQuaternion( q: Quaternion ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.setRotationFromQuaternion",
      },
      Object {
        "description": "meta â€” object containing metadata such as materials, textures or images for the object.
 Convert the object to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "Object3D.toJSON( meta: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.toJSON",
      },
      Object {
        "description": "axis â€” A normalized vector in object space.
 distance â€” The distance to translate.
 Translate an object by distance along an axis in object space. The axis is assumed to be normalized.",
        "name": "translateOnAxis",
        "title": "Object3D.translateOnAxis( axis: Vector3, distance: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.translateOnAxis",
      },
      Object {
        "description": "Translates object along x axis in object space by *distance* units.",
        "name": "translateX",
        "title": "Object3D.translateX( distance: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.translateX",
      },
      Object {
        "description": "Translates object along y axis in object space by *distance* units.",
        "name": "translateY",
        "title": "Object3D.translateY( distance: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.translateY",
      },
      Object {
        "description": "Translates object along z axis in object space by *distance* units.",
        "name": "translateZ",
        "title": "Object3D.translateZ( distance: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.translateZ",
      },
      Object {
        "description": "callback - A function with as first argument an object3D object.
 Executes the callback on this object and all descendants.
 Note: Modifying the scene graph inside the callback is discouraged.",
        "name": "traverse",
        "title": "Object3D.traverse( callback: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.traverse",
      },
      Object {
        "description": "callback - A function with as first argument an object3D object.
 Like traverse, but the callback will only be executed for visible objects. Descendants of invisible objects are not traversed.
 Note: Modifying the scene graph inside the callback is discouraged.",
        "name": "traverseVisible",
        "title": "Object3D.traverseVisible( callback: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.traverseVisible",
      },
      Object {
        "description": "callback - A function with as first argument an object3D object.
 Executes the callback on all ancestors.
 Note: Modifying the scene graph inside the callback is discouraged.",
        "name": "traverseAncestors",
        "title": "Object3D.traverseAncestors( callback: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.traverseAncestors",
      },
      Object {
        "description": "Updates the local transform.",
        "name": "updateMatrix",
        "title": "Object3D.updateMatrix(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.updateMatrix",
      },
      Object {
        "description": "Updates the global transform of the object and its descendants.",
        "name": "updateMatrixWorld",
        "title": "Object3D.updateMatrixWorld( force: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.updateMatrixWorld",
      },
      Object {
        "description": "updateParents - recursively updates global transform of ancestors.
 updateChildren - recursively updates global transform of descendants.
 Updates the global transform of the object.",
        "name": "updateWorldMatrix",
        "title": "Object3D.updateWorldMatrix( updateParents: Boolean, updateChildren: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.updateWorldMatrix",
      },
      Object {
        "description": "vector - A vector representing a position in world space.
 Converts the vector from world space to this object's local space.",
        "name": "worldToLocal",
        "title": "Object3D.worldToLocal( vector: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Object3D.worldToLocal",
      },
    ],
    "title": "Object3D()",
    "url": "https://threejs.org/docs/#api/en/core/Object3D",
  },
  Object {
    "description": "This class is designed to assist with [raycasting](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is used for mouse picking (working out what objects in the 3d space the mouse is over) amongst other things.",
    "name": "Raycaster",
    "properties": Array [
      Object {
        "description": "The far factor of the raycaster. This value indicates which objects can be discarded based on the distance. This value shouldn't be negative and should be larger than the near property.",
        "name": "far",
        "title": "Raycaster.far: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.far",
      },
      Object {
        "description": "The near factor of the raycaster. This value indicates which objects can be discarded based on the distance. This value shouldn't be negative and should be smaller than the far property.",
        "name": "near",
        "title": "Raycaster.near: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.near",
      },
      Object {
        "description": "The camera to use when raycasting against view-dependent objects such as billboarded objects like Sprites. This field can be set manually or is set when calling \\"setFromCamera\\". Defaults to null.",
        "name": "camera",
        "title": "Raycaster.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.camera",
      },
      Object {
        "description": "Used by Raycaster to selectively ignore 3D objects when performing intersection tests. The following code example ensures that only 3D objects on layer *1* will be honored by the instance of Raycaster. \`\`\` raycaster.layers.set( 1 ); object.layers.enable( 1 ); \`\`\`",
        "name": "layers",
        "title": "Raycaster.layers: Layers",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.layers",
      },
      Object {
        "description": "An object with the following properties: \`\`\` { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} } \`\`\` Where threshold is the precision of the raycaster when intersecting objects, in world units.",
        "name": "params",
        "title": "Raycaster.params: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.params",
      },
      Object {
        "description": "The Ray used for the raycasting.",
        "name": "ray",
        "title": "Raycaster.ray: Ray",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.ray",
      },
      Object {
        "description": "origin â€” The origin vector where the ray casts from.
 direction â€” The normalized direction vector that gives direction to the ray.",
        "name": "set",
        "title": "Raycaster.set( origin: Vector3, direction: Vector3 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.set",
      },
      Object {
        "description": "coords â€” 2D coordinates of the mouse, in normalized device coordinates (NDC)â€”X and Y components should be between -1 and 1.
 camera â€” camera from which the ray should originate",
        "name": "setFromCamera",
        "title": "Raycaster.setFromCamera( coords: Vector2, camera: Camera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.setFromCamera",
      },
      Object {
        "description": "object â€” The object to check for intersection with the ray.
 recursive â€” If true, it also checks all descendants. Otherwise it only checks intersection with the object. Default is false.
 optionalTarget â€” (optional) target to set the result. Otherwise a new Array is instantiated. If set, you must clear this array prior to each call (i.e., array.length = 0;).",
        "name": "intersectObject",
        "title": "Raycaster.intersectObject( object: Object3D, recursive: Boolean, optionalTarget: Array ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.intersectObject",
      },
      Object {
        "description": "objects â€” The objects to check for intersection with the ray.
 recursive â€” If true, it also checks all descendants of the objects. Otherwise it only checks intersection with the objects. Default is false.
 optionalTarget â€” (optional) target to set the result. Otherwise a new Array is instantiated. If set, you must clear this array prior to each call (i.e., array.length = 0;).",
        "name": "intersectObjects",
        "title": "Raycaster.intersectObjects( objects: Array, recursive: Boolean, optionalTarget: Array ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Raycaster.intersectObjects",
      },
    ],
    "title": "Raycaster( origin: Vector3, direction: Vector3, near: Float, far: Float ) {",
    "url": "https://threejs.org/docs/#api/en/core/Raycaster",
  },
  Object {
    "description": "Uniforms are global [GLSL](https://www.opengl.org/documentation/glsl/) variables. They are passed to shader programs.",
    "name": "Uniform",
    "properties": Array [
      Object {
        "description": "Current value of the uniform.",
        "name": "value",
        "title": "Uniform.value: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/core/Uniform.value",
      },
      Object {
        "description": "Returns a clone of this uniform.
 If the uniform's value property is an Object with a clone() method, this is used, otherwise the value is copied by assignment. Array values are shared between cloned Uniforms.",
        "name": "clone",
        "title": "Uniform.clone(): Uniform",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/core/Uniform.clone",
      },
    ],
    "title": "Uniform( value: Object )",
    "url": "https://threejs.org/docs/#api/en/core/Uniform",
  },
  Object {
    "description": "There are nine types of BufferAttribute available in three.js. These correspond to the JavaScript [Typed Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax).",
    "name": "BufferAttribute Types",
    "properties": Array [],
    "title": "All of the above are called in the same way.",
    "url": "https://threejs.org/docs/#api/en/core/bufferAttributeTypes/BufferAttributeTypes",
  },
  Object {
    "description": "A class containing utility functions for data.",
    "name": "DataUtils",
    "properties": Array [
      Object {
        "description": "val â€” A single precision floating point value.
 Returns a half precision floating point value represented as an uint16 value.",
        "name": "toHalfFloat",
        "title": "DataUtils.toHalfFloat( val: Number ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/DataUtils.toHalfFloat",
      },
    ],
    "title": "DataUtils",
    "url": "https://threejs.org/docs/#api/en/extras/DataUtils",
  },
  Object {
    "description": "An implementation of the earcut polygon triangulation algorithm. The code is a port of [mapbox/earcut](https://github.com/mapbox/earcut).",
    "name": "Earcut",
    "properties": Array [
      Object {
        "description": "data â€” A flat array of vertex coordinates.
 holeIndices â€” An array of hole indices if any.
 dim â€” The number of coordinates per vertex in the input array.
 Triangulates the given shape definition by returning an array of triangles. A triangle is defined by three consecutive integers representing vertex indices.",
        "name": "triangulate",
        "title": "Earcut.triangulate( data, holeIndices, dim ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/Earcut.triangulate",
      },
    ],
    "title": "Earcut",
    "url": "https://threejs.org/docs/#api/en/extras/Earcut",
  },
  Object {
    "description": "A class containing utility functions for images.",
    "name": "ImageUtils",
    "properties": Array [
      Object {
        "description": "image â€” The image object.
 Returns a data URI containing a representation of the given image.",
        "name": "getDataURL",
        "title": "ImageUtils.getDataURL( image: HTMLCanvasElement | image: HTMLImageElement | image: ImageBitmap ): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/ImageUtils.getDataURL",
      },
    ],
    "title": "ImageUtils",
    "url": "https://threejs.org/docs/#api/en/extras/ImageUtils",
  },
  Object {
    "description": "This class generates a Prefiltered, Mipmapped Radiance Environment Map (PMREM) from a cubeMap environment texture. This allows different levels of blur to be quickly accessed based on material roughness. It is packed into a special CubeUV format that allows us to perform custom interpolation so that we can support nonlinear formats such as RGBE. Unlike a traditional mipmap chain, it only goes down to the LOD_MIN level (above), and then creates extra even more filtered 'mips' at the same LOD_MIN resolution, associated with higher roughness levels. In this way we maintain resolution to smoothly interpolate diffuse lighting while limiting sampling computation.",
    "name": "PMREMGenerator",
    "properties": Array [
      Object {
        "description": "scene - The given scene.
 sigma - (optional) Specifies a blur radius in radians to be applied to the scene before PMREM generation. Default is *0*.
 near - (optional) The near plane value. Default is *0.1*.
 far - (optional) The far plane value. Default is *100*.
 Generates a PMREM from a supplied Scene, which can be faster than using an image if networking bandwidth is low. Optional near and far planes ensure the scene is rendered in its entirety (the cubeCamera is placed at the origin).",
        "name": "fromScene",
        "title": "PMREMGenerator.fromScene( scene: Scene, sigma: Number, near: Number, far: Number ): WebGLRenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator.fromScene",
      },
      Object {
        "description": "equirectangular - The equirectangular texture.
 Generates a PMREM from an equirectangular texture, which can be either LDR (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512), as this matches best with the 256 x 256 cubemap output.",
        "name": "fromEquirectangular",
        "title": "PMREMGenerator.fromEquirectangular( equirectangular: Texture ): WebGLRenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator.fromEquirectangular",
      },
      Object {
        "description": "cubemap - The cubemap texture.
 Generates a PMREM from an cubemap texture, which can be either LDR (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256, as this matches best with the 256 x 256 cubemap output.",
        "name": "fromCubemap",
        "title": "PMREMGenerator.fromCubemap( cubemap: CubeTexture ): WebGLRenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator.fromCubemap",
      },
      Object {
        "description": "Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during your texture's network fetch for increased concurrency.",
        "name": "compileCubemapShader",
        "title": "PMREMGenerator.compileCubemapShader(): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator.compileCubemapShader",
      },
      Object {
        "description": "Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during your texture's network fetch for increased concurrency.",
        "name": "compileEquirectangularShader",
        "title": "PMREMGenerator.compileEquirectangularShader(): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator.compileEquirectangularShader",
      },
      Object {
        "description": "Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class, so you should not need more than one PMREMGenerator object. If you do, calling dispose() on one of them will cause any others to also become unusable.",
        "name": "dispose",
        "title": "PMREMGenerator.dispose(): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator.dispose",
      },
    ],
    "title": "PMREMGenerator( renderer: WebGLRenderer )",
    "url": "https://threejs.org/docs/#api/en/extras/PMREMGenerator",
  },
  Object {
    "description": "A class containing utility functions for shapes.
 Note that these are all linear functions so it is neccessary to calculate separately for x, y (and z, w if present) components of a vector.",
    "name": "ShapeUtils",
    "properties": Array [
      Object {
        "description": "contour â€” 2D polygon. An array of THREE.Vector2()
 Calculate area of a ( 2D ) contour polygon.",
        "name": "area",
        "title": "ShapeUtils.area( contour ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/ShapeUtils.area",
      },
      Object {
        "description": "pts â€” points defining a 2D polygon
 Note that this is a linear function so it is neccessary to calculate separately for x, y components of a polygon.
 Used internally by Path, ExtrudeGeometry and ShapeGeometry.",
        "name": "isClockWise",
        "title": "ShapeUtils.isClockWise( pts ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/ShapeUtils.isClockWise",
      },
      Object {
        "description": "contour â€” 2D polygon.
 holes â€” array of holes
 Used internally by ExtrudeGeometry and ShapeGeometry to calculate faces in shapes with holes.",
        "name": "triangulateShape",
        "title": "ShapeUtils.triangulateShape( contour, holes ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/ShapeUtils.triangulateShape",
      },
    ],
    "title": "ShapeUtils",
    "url": "https://threejs.org/docs/#api/en/extras/ShapeUtils",
  },
  Object {
    "description": "An abstract base class for creating a Curve object that contains methods for interpolation. For an array of Curves see CurvePath.",
    "name": "Curve",
    "properties": Array [
      Object {
        "description": "This value determines the amount of divisions when calculating the cumulative segment lengths of a curve via .getLengths. To ensure precision when using methods like .getSpacedPoints, it is recommended to increase .arcLengthDivisions if the curve is very large. Default is 200.",
        "name": "arcLengthDivisions",
        "title": "Curve.arcLengthDivisions: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.arcLengthDivisions",
      },
      Object {
        "description": "t - A position on the curve. Must be in the range optionalTarget â€” (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created. 
 Returns a vector for a given position on the curve.",
        "name": "getPoint",
        "title": "Curve.getPoint( t: Float, optionalTarget: Vector ): Vector",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getPoint",
      },
      Object {
        "description": "u - A position on the curve according to the arc length. Must be in the range optionalTarget â€” (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created. 
 Returns a vector for a given position on the curve according to the arc length.",
        "name": "getPointAt",
        "title": "Curve.getPointAt( u: Float, optionalTarget: Vector ): Vector",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getPointAt",
      },
      Object {
        "description": "divisions â€” number of pieces to divide the curve into. Default is *5*.
 Returns a set of divisions + 1 points using getPoint( t ).",
        "name": "getPoints",
        "title": "Curve.getPoints( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getPoints",
      },
      Object {
        "description": "divisions â€” number of pieces to divide the curve into. Default is *5*.
 Returns a set of divisions + 1 equi-spaced points using getPointAt( u ).",
        "name": "getSpacedPoints",
        "title": "Curve.getSpacedPoints( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getSpacedPoints",
      },
      Object {
        "description": "Get total curve arc length.",
        "name": "getLength",
        "title": "Curve.getLength(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getLength",
      },
      Object {
        "description": "Get list of cumulative segment lengths.",
        "name": "getLengths",
        "title": "Curve.getLengths( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getLengths",
      },
      Object {
        "description": "Update the cumlative segment distance cache.",
        "name": "updateArcLengths",
        "title": "Curve.updateArcLengths(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.updateArcLengths",
      },
      Object {
        "description": "Given u in the range ( 0 .. 1 ), returns t also in the range ( 0 .. 1 ). u and t can then be used to give you points which are equidistant from the ends of the curve, using .getPoint.",
        "name": "getUtoTmapping",
        "title": "Curve.getUtoTmapping( u: Float, distance: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getUtoTmapping",
      },
      Object {
        "description": "t - A position on the curve. Must be in the range optionalTarget â€” (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created. 
 Returns a unit vector tangent at t. If the derived curve does not implement its tangent derivation, two points a small delta apart will be used to find its gradient which seems to give a reasonable approximation.",
        "name": "getTangent",
        "title": "Curve.getTangent( t: Float, optionalTarget: Vector ): Vector",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getTangent",
      },
      Object {
        "description": "u - A position on the curve according to the arc length. Must be in the range optionalTarget â€” (optional) If specified, the result will be copied into this Vector, otherwise a new Vector will be created. 
 Returns tangent at a point which is equidistant to the ends of the curve from the point given in .getTangent.",
        "name": "getTangentAt",
        "title": "Curve.getTangentAt( u: Float, optionalTarget: Vector ): Vector",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.getTangentAt",
      },
      Object {
        "description": "Generates the Frenet Frames. Requires a curve definition in 3D space. Used in geometries like TubeGeometry or ExtrudeGeometry.",
        "name": "computeFrenetFrames",
        "title": "Curve.computeFrenetFrames( segments: Integer, closed: Boolean ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.computeFrenetFrames",
      },
      Object {
        "description": "Creates a clone of this instance.",
        "name": "clone",
        "title": "Curve.clone(): Curve",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.clone",
      },
      Object {
        "description": "Copies another Curve object to this instance.",
        "name": "copy",
        "title": "Curve.copy( source: Curve ): Curve",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.copy",
      },
      Object {
        "description": "Returns a JSON object representation of this instance.",
        "name": "toJSON",
        "title": "Curve.toJSON(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.toJSON",
      },
      Object {
        "description": "Copies the data from the given JSON object to this instance.",
        "name": "fromJSON",
        "title": "Curve.fromJSON( json: Object ): Curve",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Curve.fromJSON",
      },
    ],
    "title": "Curve()",
    "url": "https://threejs.org/docs/#api/en/extras/core/Curve",
  },
  Object {
    "description": "An abstract base class extending Curve. A CurvePath is simply an array of connected curves, but retains the api of a curve.",
    "name": "CurvePath",
    "properties": Array [
      Object {
        "description": "The array of Curves.",
        "name": "curves",
        "title": "CurvePath.curves: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.curves",
      },
      Object {
        "description": "Whether or not to automatically close the path.",
        "name": "autoClose",
        "title": "CurvePath.autoClose: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.autoClose",
      },
      Object {
        "description": "Add a curve to the .curves array.",
        "name": "add",
        "title": "CurvePath.add( curve: Curve ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.add",
      },
      Object {
        "description": "Adds a lineCurve to close the path.",
        "name": "closePath",
        "title": "CurvePath.closePath(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.closePath",
      },
      Object {
        "description": "Get list of cumulative curve lengths of the curves in the .curves array.",
        "name": "getCurveLengths",
        "title": "CurvePath.getCurveLengths(): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.getCurveLengths",
      },
      Object {
        "description": "t - A position on the curve. Must be in the range [ 0, 1 ]. 
 Returns a vector for a given position on the curve path.",
        "name": "getPoint",
        "title": "CurvePath.getPoint( t: Float ): Vector",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.getPoint",
      },
      Object {
        "description": "divisions â€” number of pieces to divide the curve into. Default is *12*.
 Returns an array of points representing a sequence of curves. The *division* parameter defines the number of pieces each curve is divided into. However, for optimization and quality purposes, the actual sampling resolution for each curve depends on its type. For example, for a LineCurve, the returned number of points is always just 2.",
        "name": "getPoints",
        "title": "CurvePath.getPoints( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.getPoints",
      },
      Object {
        "description": "divisions â€” number of pieces to divide the curve into. Default is *40*.
 Returns a set of divisions + 1 equi-spaced points using getPointAt( u ).",
        "name": "getSpacedPoints",
        "title": "CurvePath.getSpacedPoints( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath.getSpacedPoints",
      },
    ],
    "title": "CurvePath()",
    "url": "https://threejs.org/docs/#api/en/extras/core/CurvePath",
  },
  Object {
    "description": "Create a set of Shapes representing a font loaded in JSON format.
 This is used internally by the FontLoader.",
    "name": "Font",
    "properties": Array [
      Object {
        "description": "The JSON data passed in the constructor.",
        "name": "data",
        "title": "Font.data: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/Font.data",
      },
      Object {
        "description": "text â€” string of text.
 size â€” (optional) scale for the Shapes. Default is *100*.
 Creates an array of Shapes representing the text in the font.",
        "name": "generateShapes",
        "title": "Font.generateShapes( text: String, size: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Font.generateShapes",
      },
    ],
    "title": "Font( data )",
    "url": "https://threejs.org/docs/#api/en/extras/core/Font",
  },
  Object {
    "description": "Interpolations contains spline and BÃ©zier functions internally used by concrete curve classes.",
    "name": "Interpolations",
    "properties": Array [
      Object {
        "description": "t â€” interpolation weight.
 p0, p1, p2, p3 â€” the points defining the spline curve.
 Used internally by SplineCurve.",
        "name": "CatmullRom",
        "title": "Interpolations.CatmullRom( t: Float, p0: Float, p1: Float, p2: Float, p3: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Interpolations.CatmullRom",
      },
      Object {
        "description": "t â€” interpolation weight.
 p0, p1, p2 â€” the starting, control and end points defining the curve.
 Used internally by QuadraticBezierCurve3, QuadraticBezierCurve and Font.",
        "name": "QuadraticBezier",
        "title": "Interpolations.QuadraticBezier( t: Float, p0: Float, p1: Float, p2: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Interpolations.QuadraticBezier",
      },
      Object {
        "description": "t â€” interpolation weight.
 p0, p1, p2, p3 â€” the starting, control(twice) and end points defining the curve.
 Used internally by CubicBezierCurve3, CubicBezierCurve and Font.",
        "name": "CubicBezier",
        "title": "Interpolations.CubicBezier( t: Float, p0: Float, p1: Float, p2: Float, p3: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Interpolations.CubicBezier",
      },
    ],
    "title": "Interpolations",
    "url": "https://threejs.org/docs/#api/en/extras/core/Interpolations",
  },
  Object {
    "description": "A 2D path representation. The class provides methods for creating paths and contours of 2D shapes similar to the 2D Canvas API.",
    "name": "Path",
    "properties": Array [
      Object {
        "description": "The current offset of the path. Any new Curve added will start here.",
        "name": "currentPoint",
        "title": "Path.currentPoint: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.currentPoint",
      },
      Object {
        "description": "x, y â€” The absolute center of the arc.
 radius â€” The radius of the arc.
 startAngle â€” The start angle in radians.
 endAngle â€” The end angle in radians.
 clockwise â€” Sweep the arc clockwise. Defaults to *false*.
 Adds an absolutely positioned EllipseCurve to the path.",
        "name": "absarc",
        "title": "Path.absarc( x: Float, y: Float, radius: Float, startAngle: Float, endAngle: Float, clockwise: Boolean ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.absarc",
      },
      Object {
        "description": "x, y â€” The absolute center of the ellipse.
 xRadius â€” The radius of the ellipse in the x axis.
 yRadius â€” The radius of the ellipse in the y axis.
 startAngle â€” The start angle in radians.
 endAngle â€” The end angle in radians.
 clockwise â€” Sweep the ellipse clockwise. Defaults to false.
 rotation â€” The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, defaults to 0.
 Adds an absolutely positioned EllipseCurve to the path.",
        "name": "absellipse",
        "title": "Path.absellipse( x: Float, y: Float, xRadius: Float, yRadius: Float, startAngle: Float, endAngle: Float, clockwise: Boolean, rotation: Float ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.absellipse",
      },
      Object {
        "description": "x, y â€” The center of the arc offset from the last call.
 radius â€” The radius of the arc.
 startAngle â€” The start angle in radians.
 endAngle â€” The end angle in radians.
 clockwise â€” Sweep the arc clockwise. Defaults to *false*.
 Adds an EllipseCurve to the path, positioned relative to .currentPoint.",
        "name": "arc",
        "title": "Path.arc( x: Float, y: Float, radius: Float, startAngle: Float, endAngle: Float, clockwise: Boolean ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.arc",
      },
      Object {
        "description": "This creates a bezier curve from .currentPoint with (cp1X, cp1Y) and (cp2X, cp2Y) as control points and updates .currentPoint to x and y.",
        "name": "bezierCurveTo",
        "title": "Path.bezierCurveTo( cp1X: Float, cp1Y: Float, cp2X: Float, cp2Y: Float, x: Float, y: Float ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.bezierCurveTo",
      },
      Object {
        "description": "x, y â€” The center of the ellipse offset from the last call.
 xRadius â€” The radius of the ellipse in the x axis.
 yRadius â€” The radius of the ellipse in the y axis.
 startAngle â€” The start angle in radians.
 endAngle â€” The end angle in radians.
 clockwise â€” Sweep the ellipse clockwise. Defaults to *false*.
 rotation â€” The rotation angle of the ellipse in radians, counterclockwise from the positive X axis. Optional, defaults to *0*.
 Adds an EllipseCurve to the path, positioned relative to .currentPoint.",
        "name": "ellipse",
        "title": "Path.ellipse( x: Float, y: Float, xRadius: Float, yRadius: Float, startAngle: Float, endAngle: Float, clockwise: Boolean, rotation: Float ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.ellipse",
      },
      Object {
        "description": "Connects a LineCurve from .currentPoint to x, y onto the path.",
        "name": "lineTo",
        "title": "Path.lineTo( x: Float, y: Float ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.lineTo",
      },
      Object {
        "description": "Move the .currentPoint to x, y.",
        "name": "moveTo",
        "title": "Path.moveTo( x: Float, y: Float ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.moveTo",
      },
      Object {
        "description": "Creates a quadratic curve from .currentPoint with cpX and cpY as control point and updates .currentPoint to x and y.",
        "name": "quadraticCurveTo",
        "title": "Path.quadraticCurveTo( cpX: Float, cpY: Float, x: Float, y: Float ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.quadraticCurveTo",
      },
      Object {
        "description": "points â€” array of Vector2s.
 Points are added to the curves array as LineCurves.",
        "name": "setFromPoints",
        "title": "Path.setFromPoints( vector2s: Array ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.setFromPoints",
      },
      Object {
        "description": "points - An array of Vector2s
 Connects a new SplineCurve onto the path.",
        "name": "splineThru",
        "title": "Path.splineThru ( points: Array ): Path",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Path.splineThru",
      },
    ],
    "title": "Path( points: Array )",
    "url": "https://threejs.org/docs/#api/en/extras/core/Path",
  },
  Object {
    "description": "Defines an arbitrary 2d shape plane using paths with optional holes. It can be used with ExtrudeGeometry, ShapeGeometry, to get points, or to get triangulated faces.",
    "name": "Shape",
    "properties": Array [
      Object {
        "description": "[UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this instance. This gets automatically assigned, so this shouldn't be edited.",
        "name": "uuid",
        "title": "Shape.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/Shape.uuid",
      },
      Object {
        "description": "An array of paths that define the holes in the shape.",
        "name": "holes",
        "title": "Shape.holes: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/Shape.holes",
      },
      Object {
        "description": "divisions â€” The fineness of the result.
 Call getPoints on the shape and the .holes array, and return an object of the form: \`\`\` { shape holes } \`\`\` where shape and holes are arrays of Vector2s.",
        "name": "extractPoints",
        "title": "Shape.extractPoints( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Shape.extractPoints",
      },
      Object {
        "description": "divisions â€” The fineness of the result.
 Get an array of Vector2s that represent the holes in the shape.",
        "name": "getPointsHoles",
        "title": "Shape.getPointsHoles( divisions: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/Shape.getPointsHoles",
      },
    ],
    "title": "Shape( points: Array )",
    "url": "https://threejs.org/docs/#api/en/extras/core/Shape",
  },
  Object {
    "description": "This class is used to convert a series of shapes to an array of Paths, for example an SVG shape to a path (see the example below). It is used internally by Font to convert a font in JSON format to a series of paths.",
    "name": "ShapePath",
    "properties": Array [
      Object {
        "description": "Array of Paths.",
        "name": "subPaths",
        "title": "ShapePath.subPaths: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.subPaths",
      },
      Object {
        "description": "The current Path that is being generated.",
        "name": "currentPath",
        "title": "ShapePath.currentPath: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.currentPath",
      },
      Object {
        "description": "Color of the shape, by default set to white (0xffffff).",
        "name": "color",
        "title": "ShapePath.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.color",
      },
      Object {
        "description": "Starts a new Path and calls Path.moveTo( x, y ) on that Path. Also points currentPath to that Path.",
        "name": "moveTo",
        "title": "ShapePath.moveTo( x: Float, y: Float ): ShapePath",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.moveTo",
      },
      Object {
        "description": "This creates a line from the currentPath's offset to X and Y and updates the offset to X and Y.",
        "name": "lineTo",
        "title": "ShapePath.lineTo( x: Float, y: Float ): ShapePath",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.lineTo",
      },
      Object {
        "description": "This creates a quadratic curve from the currentPath's offset to x and y with cpX and cpY as control point and updates the currentPath's offset to x and y.",
        "name": "quadraticCurveTo",
        "title": "ShapePath.quadraticCurveTo( cpX: Float, cpY: Float, x: Float, y: Float ): ShapePath",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.quadraticCurveTo",
      },
      Object {
        "description": "This creates a bezier curve from the currentPath's offset to x and y with cp1X, cp1Y and cp1X, cp1Y as control points and updates the currentPath's offset to x and y.",
        "name": "bezierCurveTo",
        "title": "ShapePath.bezierCurveTo( cp1X: Float, cp1Y: Float, cp2X: Float, cp2Y: Float, x: Float, y: Float ): ShapePath",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.bezierCurveTo",
      },
      Object {
        "description": "points - An array of Vector2s",
        "name": "splineThru",
        "title": "ShapePath.splineThru ( points: Array ): ShapePath",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.splineThru",
      },
      Object {
        "description": "isCCW â€” Changes how solids and holes are generated
 noHoles â€” Whether or not to generate holes",
        "name": "toShapes",
        "title": "ShapePath.toShapes( isCCW: Boolean, noHoles: Boolean ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath.toShapes",
      },
    ],
    "title": "ShapePath( )",
    "url": "https://threejs.org/docs/#api/en/extras/core/ShapePath",
  },
  Object {
    "description": "Alias for EllipseCurve.",
    "name": "ArcCurve",
    "properties": Array [],
    "title": "ArcCurve",
    "url": "https://threejs.org/docs/#api/en/extras/curves/ArcCurve",
  },
  Object {
    "description": "Create a smooth 3d spline curve from a series of points using the [Catmull-Rom](https://en.wikipedia.org/wiki/Centripetal_Catmull-Rom_spline) algorithm.",
    "name": "CatmullRomCurve3",
    "properties": Array [
      Object {
        "description": "The array of Vector3 points that define the curve. It needs at least two entries.",
        "name": "points",
        "title": "CatmullRomCurve3.points: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CatmullRomCurve3.points",
      },
      Object {
        "description": "The curve will loop back onto itself when this is true.",
        "name": "closed",
        "title": "CatmullRomCurve3.closed: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CatmullRomCurve3.closed",
      },
      Object {
        "description": "Possible values are *centripetal*, *chordal* and *catmullrom*.",
        "name": "curveType",
        "title": "CatmullRomCurve3.curveType: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CatmullRomCurve3.curveType",
      },
      Object {
        "description": "When .curveType is *catmullrom*, defines catmullrom's tension.",
        "name": "tension",
        "title": "CatmullRomCurve3.tension: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CatmullRomCurve3.tension",
      },
    ],
    "title": "CatmullRomCurve3( points: Array, closed: Boolean, curveType: String, tension: Float )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/CatmullRomCurve3",
  },
  Object {
    "description": "Create a smooth 2d [cubic bezier curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg), defined by a start point, endpoint and two control points.",
    "name": "CubicBezierCurve",
    "properties": Array [
      Object {
        "description": "The starting point.",
        "name": "v0",
        "title": "CubicBezierCurve.v0: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve.v0",
      },
      Object {
        "description": "The first control point.",
        "name": "v1",
        "title": "CubicBezierCurve.v1: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve.v1",
      },
      Object {
        "description": "The second control point.",
        "name": "v2",
        "title": "CubicBezierCurve.v2: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve.v2",
      },
      Object {
        "description": "The ending point.",
        "name": "v3",
        "title": "CubicBezierCurve.v3: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve.v3",
      },
    ],
    "title": "CubicBezierCurve ( v0: Vector2, v1: Vector2, v2: Vector2, v3: Vector2 )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve",
  },
  Object {
    "description": "Create a smooth 3d [cubic bezier curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg), defined by a start point, endpoint and two control points.",
    "name": "CubicBezierCurve3",
    "properties": Array [
      Object {
        "description": "The starting point.",
        "name": "v0",
        "title": "CubicBezierCurve3.v0: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve3.v0",
      },
      Object {
        "description": "The first control point.",
        "name": "v1",
        "title": "CubicBezierCurve3.v1: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve3.v1",
      },
      Object {
        "description": "The second control point.",
        "name": "v2",
        "title": "CubicBezierCurve3.v2: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve3.v2",
      },
      Object {
        "description": "The ending point.",
        "name": "v3",
        "title": "CubicBezierCurve3.v3: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve3.v3",
      },
    ],
    "title": "CubicBezierCurve3( v0: Vector3, v1: Vector3, v2: Vector3, v3: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/CubicBezierCurve3",
  },
  Object {
    "description": "Creates a 2d curve in the shape of an ellipse. Setting the xRadius equal to the yRadius will result in a circle.",
    "name": "EllipseCurve",
    "properties": Array [
      Object {
        "description": "The X center of the ellipse.",
        "name": "aX",
        "title": "EllipseCurve.aX: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.aX",
      },
      Object {
        "description": "The Y center of the ellipse.",
        "name": "aY",
        "title": "EllipseCurve.aY: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.aY",
      },
      Object {
        "description": "The radius of the ellipse in the x direction.",
        "name": "xRadius",
        "title": "EllipseCurve.xRadius: Radians",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.xRadius",
      },
      Object {
        "description": "The radius of the ellipse in the y direction.",
        "name": "yRadius",
        "title": "EllipseCurve.yRadius: Radians",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.yRadius",
      },
      Object {
        "description": "The start angle of the curve in radians starting from the middle right side.",
        "name": "aStartAngle",
        "title": "EllipseCurve.aStartAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.aStartAngle",
      },
      Object {
        "description": "The end angle of the curve in radians starting from the middle right side.",
        "name": "aEndAngle",
        "title": "EllipseCurve.aEndAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.aEndAngle",
      },
      Object {
        "description": "Whether the ellipse is drawn clockwise.",
        "name": "aClockwise",
        "title": "EllipseCurve.aClockwise: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.aClockwise",
      },
      Object {
        "description": "The rotation angle of the ellipse in radians, counterclockwise from the positive X axis (optional). Default is *0*.",
        "name": "aRotation",
        "title": "EllipseCurve.aRotation: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve.aRotation",
      },
    ],
    "title": "EllipseCurve( aX: Float, aY: Float, xRadius: Float, yRadius: Float, aStartAngle: Radians, aEndAngle: Radians, aClockwise: Boolean, aRotation: Radians )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/EllipseCurve",
  },
  Object {
    "description": "A curve representing a 2d line segment.",
    "name": "LineCurve",
    "properties": Array [
      Object {
        "description": "The start point.",
        "name": "v1",
        "title": "LineCurve.v1: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/LineCurve.v1",
      },
      Object {
        "description": "The end point",
        "name": "v2",
        "title": "LineCurve.v2: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/LineCurve.v2",
      },
    ],
    "title": "LineCurve( v1: Vector2, v2: Vector2 )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/LineCurve",
  },
  Object {
    "description": "A curve representing a 3d line segment.",
    "name": "LineCurve3",
    "properties": Array [
      Object {
        "description": "The start point.",
        "name": "v1",
        "title": "LineCurve3.v1: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/LineCurve3.v1",
      },
      Object {
        "description": "The end point.",
        "name": "v2",
        "title": "LineCurve3.v2: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/LineCurve3.v2",
      },
    ],
    "title": "LineCurve3( v1: Vector3, v2: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/LineCurve3",
  },
  Object {
    "description": "Create a smooth 2d [quadratic bezier curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif), defined by a startpoint, endpoint and a single control point.",
    "name": "QuadraticBezierCurve",
    "properties": Array [
      Object {
        "description": "The startpoint.",
        "name": "v0",
        "title": "QuadraticBezierCurve.v0: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve.v0",
      },
      Object {
        "description": "The control point.",
        "name": "v1",
        "title": "QuadraticBezierCurve.v1: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve.v1",
      },
      Object {
        "description": "The endpoint.",
        "name": "v2",
        "title": "QuadraticBezierCurve.v2: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve.v2",
      },
    ],
    "title": "QuadraticBezierCurve( v0: Vector2, v1: Vector2, v2: Vector2 )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve",
  },
  Object {
    "description": "Create a smooth 3d [quadratic bezier curve](http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif), defined by a startpoint, endpoint and a single control point.",
    "name": "QuadraticBezierCurve3",
    "properties": Array [
      Object {
        "description": "The startpoint.",
        "name": "v0",
        "title": "QuadraticBezierCurve3.v0: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve3.v0",
      },
      Object {
        "description": "The control point.",
        "name": "v1",
        "title": "QuadraticBezierCurve3.v1: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve3.v1",
      },
      Object {
        "description": "The endpoint.",
        "name": "v2",
        "title": "QuadraticBezierCurve3.v2: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve3.v2",
      },
    ],
    "title": "QuadraticBezierCurve3( v0: Vector3, v1: Vector3, v2: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/QuadraticBezierCurve3",
  },
  Object {
    "description": "Create a smooth 2d spline curve from a series of points. Internally this uses Interpolations.CatmullRom to create the curve.",
    "name": "SplineCurve",
    "properties": Array [
      Object {
        "description": "The array of Vector2 points that define the curve.",
        "name": "points",
        "title": "SplineCurve.points: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/curves/SplineCurve.points",
      },
    ],
    "title": "SplineCurve( points: Array )",
    "url": "https://threejs.org/docs/#api/en/extras/curves/SplineCurve",
  },
  Object {
    "description": "This experimental class provides a fast code path for rendering meshes with frequently updated geometry data. When the renderer encounters an instance of ImmediateRenderObject, it only takes care about the most primitive rendering operations (e.g. binding vertex attributes, determining correct shader program or perfoming the actual draw call). Features like view frustum culling, wireframe rendering or using multiple materials are not supported. Besides ImmediateRenderObject can only be used to render triangles.",
    "name": "ImmediateRenderObject",
    "properties": Array [
      Object {
        "description": "The material of the ImmediateRenderObject. Assigning multiple materials is not supported.",
        "name": "material",
        "title": "ImmediateRenderObject.material: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.material",
      },
      Object {
        "description": "Whether position data are defined or not. Default is *false*.",
        "name": "hasPositions",
        "title": "ImmediateRenderObject.hasPositions: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.hasPositions",
      },
      Object {
        "description": "Whether normal data are defined or not. Default is *false*.",
        "name": "hasNormals",
        "title": "ImmediateRenderObject.hasNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.hasNormals",
      },
      Object {
        "description": "Whether color data are defined or not. Default is *false*.",
        "name": "hasColors",
        "title": "ImmediateRenderObject.hasColors: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.hasColors",
      },
      Object {
        "description": "Whether texture coordinates are defined or not. Default is *false*.",
        "name": "hasUvs",
        "title": "ImmediateRenderObject.hasUvs: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.hasUvs",
      },
      Object {
        "description": "The buffer holding position data. Default is *null*.",
        "name": "positionArray",
        "title": "ImmediateRenderObject.positionArray: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.positionArray",
      },
      Object {
        "description": "The buffer holding normal data. Default is *null*.",
        "name": "normalArray",
        "title": "ImmediateRenderObject.normalArray: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.normalArray",
      },
      Object {
        "description": "The buffer holding color data. Default is *null*.",
        "name": "colorArray",
        "title": "ImmediateRenderObject.colorArray: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.colorArray",
      },
      Object {
        "description": "The buffer holding texture coordinates. Default is *null*.",
        "name": "uvArray",
        "title": "ImmediateRenderObject.uvArray: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.uvArray",
      },
      Object {
        "description": "The number of primitives to be rendered. Default is *0*. This property will be set to *0* after each rendering so you usually set it in the implementatio of .render().",
        "name": "count",
        "title": "ImmediateRenderObject.count: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.count",
      },
      Object {
        "description": "renderCallback â€” A function to render the generated geometry data.",
        "name": "render",
        "title": "ImmediateRenderObject.render(renderCallback: Function): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject.render",
      },
    ],
    "title": "ImmediateRenderObject( material: Material )",
    "url": "https://threejs.org/docs/#api/en/extras/objects/ImmediateRenderObject",
  },
  Object {
    "description": "BoxGeometry is a geometry class for a rectangular cuboid with a given 'width', 'height', and 'depth'. On creation, the cuboid is centred on the origin, with each edge parallel to one of the axes.",
    "name": "BoxGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "BoxGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/BoxGeometry.parameters",
      },
    ],
    "title": "BoxGeometry(width: Float, height: Float, depth: Float, widthSegments: Integer, heightSegments: Integer, depthSegments: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/BoxGeometry",
  },
  Object {
    "description": "CircleGeometry is a simple shape of Euclidean geometry. It is contructed from a number of triangular segments that are oriented around a central point and extend as far out as a given radius. It is built counter-clockwise from a start angle and a given central angle. It can also be used to create regular polygons, where the number of segments determines the number of sides.",
    "name": "CircleGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "CircleGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/CircleGeometry.parameters",
      },
    ],
    "title": "CircleGeometry(radius: Float, segments: Integer, thetaStart: Float, thetaLength: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/CircleGeometry",
  },
  Object {
    "description": "A class for generating cone geometries.",
    "name": "ConeGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "ConeGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/ConeGeometry.parameters",
      },
    ],
    "title": "ConeGeometry(radius: Float, height: Float, radialSegments: Integer, heightSegments: Integer, openEnded: Boolean, thetaStart: Float, thetaLength: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/ConeGeometry",
  },
  Object {
    "description": "A class for generating cylinder geometries.",
    "name": "CylinderGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "CylinderGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/CylinderGeometry.parameters",
      },
    ],
    "title": "CylinderGeometry(radiusTop: Float, radiusBottom: Float, height: Float, radialSegments: Integer, heightSegments: Integer, openEnded: Boolean, thetaStart: Float, thetaLength: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/CylinderGeometry",
  },
  Object {
    "description": "A class for generating a dodecahedron geometries.",
    "name": "DodecahedronGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "DodecahedronGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/DodecahedronGeometry.parameters",
      },
    ],
    "title": "DodecahedronGeometry(radius: Float, detail: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/DodecahedronGeometry",
  },
  Object {
    "description": "This can be used as a helper object to view the edges of a geometry.",
    "name": "EdgesGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "EdgesGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/EdgesGeometry.parameters",
      },
    ],
    "title": "EdgesGeometry( geometry: BufferGeometry, thresholdAngle: Integer )",
    "url": "https://threejs.org/docs/#api/en/geometries/EdgesGeometry",
  },
  Object {
    "description": "Creates extruded geometry from a path shape.",
    "name": "ExtrudeGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "ExtrudeGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/ExtrudeGeometry.parameters",
      },
    ],
    "title": "ExtrudeGeometry(shapes: Array, options: Object)",
    "url": "https://threejs.org/docs/#api/en/geometries/ExtrudeGeometry",
  },
  Object {
    "description": "A class for generating an icosahedron geometry.",
    "name": "IcosahedronGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "IcosahedronGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/IcosahedronGeometry.parameters",
      },
    ],
    "title": "IcosahedronGeometry(radius: Float, detail: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/IcosahedronGeometry",
  },
  Object {
    "description": "Creates meshes with axial symmetry like vases. The lathe rotates around the Y axis.",
    "name": "LatheGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "LatheGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/LatheGeometry.parameters",
      },
    ],
    "title": "LatheGeometry(points: Array, segments: Integer, phiStart: Float, phiLength: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/LatheGeometry",
  },
  Object {
    "description": "A class for generating an octahedron geometry.",
    "name": "OctahedronGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "OctahedronGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/OctahedronGeometry.parameters",
      },
    ],
    "title": "OctahedronGeometry(radius: Float, detail: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/OctahedronGeometry",
  },
  Object {
    "description": "Generate geometry representing a parametric surface.",
    "name": "ParametricGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "ParametricGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/ParametricGeometry.parameters",
      },
    ],
    "title": "ParametricGeometry(func: Function, slices: Integer, stacks: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/ParametricGeometry",
  },
  Object {
    "description": "A class for generating plane geometries.",
    "name": "PlaneGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "PlaneGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/PlaneGeometry.parameters",
      },
    ],
    "title": "PlaneGeometry(width: Float, height: Float, widthSegments: Integer, heightSegments: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/PlaneGeometry",
  },
  Object {
    "description": "A polyhedron is a solid in three dimensions with flat faces. This class will take an array of vertices, project them onto a sphere, and then divide them up to the desired level of detail. This class is used by DodecahedronGeometry, IcosahedronGeometry, OctahedronGeometry, and TetrahedronGeometry to generate their respective geometries.",
    "name": "PolyhedronGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "PolyhedronGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/PolyhedronGeometry.parameters",
      },
    ],
    "title": "PolyhedronGeometry(vertices: Array, indices: Array, radius: Float, detail: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/PolyhedronGeometry",
  },
  Object {
    "description": "A class for generating a two-dimensional ring geometry.",
    "name": "RingGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "RingGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/RingGeometry.parameters",
      },
    ],
    "title": "RingGeometry(innerRadius: Float, outerRadius: Float, thetaSegments: Integer, phiSegments: Integer, thetaStart: Float, thetaLength: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/RingGeometry",
  },
  Object {
    "description": "Creates an one-sided polygonal geometry from one or more path shapes.",
    "name": "ShapeGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "ShapeGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/ShapeGeometry.parameters",
      },
    ],
    "title": "ShapeGeometry(shapes: Array, curveSegments: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/ShapeGeometry",
  },
  Object {
    "description": "A class for generating sphere geometries.",
    "name": "SphereGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "SphereGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/SphereGeometry.parameters",
      },
    ],
    "title": "SphereGeometry(radius: Float, widthSegments: Integer, heightSegments: Integer, phiStart: Float, phiLength: Float, thetaStart: Float, thetaLength: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/SphereGeometry",
  },
  Object {
    "description": "A class for generating a tetrahedron geometries.",
    "name": "TetrahedronGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "TetrahedronGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TetrahedronGeometry.parameters",
      },
    ],
    "title": "TetrahedronGeometry(radius: Float, detail: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/TetrahedronGeometry",
  },
  Object {
    "description": "A class for generating text as a single geometry. It is constructed by providing a string of text, and a hash of parameters consisting of a loaded Font and settings for the geometry's parent ExtrudeGeometry. See the Font, FontLoader and Creating_Text pages for additional details.",
    "name": "TextGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "TextGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TextGeometry.parameters",
      },
    ],
    "title": "TextGeometry(text: String, parameters: Object)",
    "url": "https://threejs.org/docs/#api/en/geometries/TextGeometry",
  },
  Object {
    "description": "A class for generating torus geometries.",
    "name": "TorusGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "TorusGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TorusGeometry.parameters",
      },
    ],
    "title": "TorusGeometry(radius: Float, tube: Float, radialSegments: Integer, tubularSegments: Integer, arc: Float)",
    "url": "https://threejs.org/docs/#api/en/geometries/TorusGeometry",
  },
  Object {
    "description": "Creates a torus knot, the particular shape of which is defined by a pair of coprime integers, p and q. If p and q are not coprime, the result will be a torus link.",
    "name": "TorusKnotGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "TorusKnotGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TorusKnotGeometry.parameters",
      },
    ],
    "title": "TorusKnotGeometry(radius: Float, tube: Float, tubularSegments: Integer, radialSegments: Integer, p: Integer, q: Integer)",
    "url": "https://threejs.org/docs/#api/en/geometries/TorusKnotGeometry",
  },
  Object {
    "description": "Creates a tube that extrudes along a 3d curve.",
    "name": "TubeGeometry",
    "properties": Array [
      Object {
        "description": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry.",
        "name": "parameters",
        "title": "TubeGeometry.parameters: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TubeGeometry.parameters",
      },
      Object {
        "description": "An array of Vector3 tangents",
        "name": "tangents",
        "title": "TubeGeometry.tangents: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TubeGeometry.tangents",
      },
      Object {
        "description": "An array of Vector3 normals",
        "name": "normals",
        "title": "TubeGeometry.normals: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TubeGeometry.normals",
      },
      Object {
        "description": "An array of Vector3 binormals",
        "name": "binormals",
        "title": "TubeGeometry.binormals: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/geometries/TubeGeometry.binormals",
      },
    ],
    "title": "TubeGeometry(path: Curve, tubularSegments: Integer, radius: Float, radialSegments: Integer, closed: Boolean)",
    "url": "https://threejs.org/docs/#api/en/geometries/TubeGeometry",
  },
  Object {
    "description": "This can be used as a helper object to view a geometry as a wireframe.",
    "name": "WireframeGeometry",
    "properties": Array [],
    "title": "WireframeGeometry( geometry: BufferGeometry )",
    "url": "https://threejs.org/docs/#api/en/geometries/WireframeGeometry",
  },
  Object {
    "description": "An 3D arrow object for visualizing directions.",
    "name": "ArrowHelper",
    "properties": Array [
      Object {
        "description": "Contains the line part of the arrowHelper.",
        "name": "line",
        "title": "ArrowHelper.line: Line",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/ArrowHelper.line",
      },
      Object {
        "description": "Contains the cone part of the arrowHelper.",
        "name": "cone",
        "title": "ArrowHelper.cone: Mesh",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/ArrowHelper.cone",
      },
      Object {
        "description": "color â€” The desired color.
 Sets the color of the arrowHelper.",
        "name": "setColor",
        "title": "ArrowHelper.setColor(color: Color): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/ArrowHelper.setColor",
      },
      Object {
        "description": "length â€” The desired length.
 headLength â€” The length of the head of the arrow.
 headWidth â€” The width of the head of the arrow.
 Sets the length of the arrowhelper.",
        "name": "setLength",
        "title": "ArrowHelper.setLength(length: Number, headLength: Number, headWidth: Number): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/ArrowHelper.setLength",
      },
      Object {
        "description": "dir â€” The desired direction. Must be a unit vector.
 Sets the direction of the arrowhelper.",
        "name": "setDirection",
        "title": "ArrowHelper.setDirection(dir: Vector3): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/ArrowHelper.setDirection",
      },
    ],
    "title": "ArrowHelper(dir: Vector3, origin: Vector3, length: Number, hex: Number, headLength: Number, headWidth: Number )",
    "url": "https://threejs.org/docs/#api/en/helpers/ArrowHelper",
  },
  Object {
    "description": "An axis object to visualize the 3 axes in a simple way. 
 The X axis is red. The Y axis is green. The Z axis is blue.",
    "name": "AxesHelper",
    "properties": Array [
      Object {
        "description": "Disposes of the internally-created material and geometry used by this helper.",
        "name": "dispose",
        "title": "AxesHelper.dispose(): AxesHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/AxesHelper.dispose",
      },
    ],
    "title": "AxesHelper( size: Number )",
    "url": "https://threejs.org/docs/#api/en/helpers/AxesHelper",
  },
  Object {
    "description": "Helper object to graphically show the world-axis-aligned bounding box around an object. The actual bounding box is handled with Box3, this is just a visual helper for debugging. It can be automatically resized with the BoxHelper.update method when the object it's created from is transformed. Note that the object must have a BufferGeometry for this to work, so it won't work with Sprites.",
    "name": "BoxHelper",
    "properties": Array [
      Object {
        "description": "Updates the helper's geometry to match the dimensions of the object, including any children. See Box3.setFromObject.",
        "name": "update",
        "title": "BoxHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/BoxHelper.update",
      },
      Object {
        "description": "object - Object3D to create the helper of.
 Updates the wireframe box for the passed object.",
        "name": "setFromObject",
        "title": "BoxHelper.setFromObject( object: Object3D ): BoxHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/BoxHelper.setFromObject",
      },
    ],
    "title": "BoxHelper( object: Object3D, color: Color )",
    "url": "https://threejs.org/docs/#api/en/helpers/BoxHelper",
  },
  Object {
    "description": "Helper object to visualize a Box3.",
    "name": "Box3Helper",
    "properties": Array [
      Object {
        "description": "The Box3 being visualized.",
        "name": "box",
        "title": "Box3Helper.box: Box3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/Box3Helper.box",
      },
      Object {
        "description": "This overrides the method in the base Object3D class so that it also updates the wireframe box to the extent of the .box property.",
        "name": "updateMatrixWorld",
        "title": "Box3Helper.updateMatrixWorld( force: Boolean ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/Box3Helper.updateMatrixWorld",
      },
    ],
    "title": "Box3Helper( box: Box3, color: Color )",
    "url": "https://threejs.org/docs/#api/en/helpers/Box3Helper",
  },
  Object {
    "description": "This helps with visualizing what a camera contains in its frustum.
 It visualizes the frustum of a camera using a LineSegments.",
    "name": "CameraHelper",
    "properties": Array [
      Object {
        "description": "The camera being visualized.",
        "name": "camera",
        "title": "CameraHelper.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper.camera",
      },
      Object {
        "description": "This contains the points used to visualize the camera.",
        "name": "pointMap",
        "title": "CameraHelper.pointMap: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper.pointMap",
      },
      Object {
        "description": "Reference to the camera.matrixWorld.",
        "name": "matrix",
        "title": "CameraHelper.matrix: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper.matrix",
      },
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the camera's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "CameraHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper.matrixAutoUpdate",
      },
      Object {
        "description": "Disposes of the internally-created material and geometry used by this helper.",
        "name": "dispose",
        "title": "CameraHelper.dispose(): CameraHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper.dispose",
      },
      Object {
        "description": "Updates the helper based on the projectionMatrix of the camera.",
        "name": "update",
        "title": "CameraHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper.update",
      },
    ],
    "title": "CameraHelper( camera: Camera )",
    "url": "https://threejs.org/docs/#api/en/helpers/CameraHelper",
  },
  Object {
    "description": "Helper object to assist with visualizing a DirectionalLight's effect on the scene. This consists of plane and a line representing the light's position and direction.",
    "name": "DirectionalLightHelper",
    "properties": Array [
      Object {
        "description": "Contains the line mesh showing the location of the directional light.",
        "name": "lightPlane",
        "title": "DirectionalLightHelper.lightPlane: Line",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.lightPlane",
      },
      Object {
        "description": "Reference to the directionalLight being visualized.",
        "name": "light",
        "title": "DirectionalLightHelper.light: DirectionalLight",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.light",
      },
      Object {
        "description": "Reference to the light's matrixWorld.",
        "name": "matrix",
        "title": "DirectionalLightHelper.matrix: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.matrix",
      },
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the light's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "DirectionalLightHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.matrixAutoUpdate",
      },
      Object {
        "description": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time update is called.",
        "name": "color",
        "title": "DirectionalLightHelper.color: hex",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.color",
      },
      Object {
        "description": "Dispose of the directionalLightHelper.",
        "name": "dispose",
        "title": "DirectionalLightHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.dispose",
      },
      Object {
        "description": "Updates the helper to match the position and direction of the directionalLight being visualized.",
        "name": "update",
        "title": "DirectionalLightHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper.update",
      },
    ],
    "title": "DirectionalLightHelper( light: DirectionalLight, size: Number, color: Hex )",
    "url": "https://threejs.org/docs/#api/en/helpers/DirectionalLightHelper",
  },
  Object {
    "description": "The GridHelper is an object to define grids. Grids are two-dimensional arrays of lines.",
    "name": "GridHelper",
    "properties": Array [],
    "title": "GridHelper( size: number, divisions: Number, colorCenterLine: Color, colorGrid: Color )",
    "url": "https://threejs.org/docs/#api/en/helpers/GridHelper",
  },
  Object {
    "description": "The PolarGridHelper is an object to define polar grids. Grids are two-dimensional arrays of lines.",
    "name": "PolarGridHelper",
    "properties": Array [],
    "title": "PolarGridHelper( radius: Number, radials: Number, circles: Number, divisions: Number, color1: Color, color2: Color )",
    "url": "https://threejs.org/docs/#api/en/helpers/PolarGridHelper",
  },
  Object {
    "description": "Creates a visual aid consisting of a spherical Mesh for a HemisphereLight.",
    "name": "HemisphereLightHelper",
    "properties": Array [
      Object {
        "description": "Reference to the HemisphereLight being visualized.",
        "name": "light",
        "title": "HemisphereLightHelper.light: HemisphereLight",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper.light",
      },
      Object {
        "description": "Reference to the hemisphereLight's matrixWorld.",
        "name": "matrix",
        "title": "HemisphereLightHelper.matrix: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper.matrix",
      },
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the hemisphereLight's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "HemisphereLightHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper.matrixAutoUpdate",
      },
      Object {
        "description": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time update is called.",
        "name": "color",
        "title": "HemisphereLightHelper.color: hex",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper.color",
      },
      Object {
        "description": "Dispose of the hemisphereLightHelper.",
        "name": "dispose",
        "title": "HemisphereLightHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper.dispose",
      },
      Object {
        "description": "Updates the helper to match the position and direction of the .light.",
        "name": "update",
        "title": "HemisphereLightHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper.update",
      },
    ],
    "title": "HemisphereLightHelper( light: HemisphereLight, sphereSize: Number, color: Hex )",
    "url": "https://threejs.org/docs/#api/en/helpers/HemisphereLightHelper",
  },
  Object {
    "description": "Helper object to visualize a Plane.",
    "name": "PlaneHelper",
    "properties": Array [
      Object {
        "description": "The plane being visualized.",
        "name": "plane",
        "title": "PlaneHelper.plane: Plane",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/PlaneHelper.plane",
      },
      Object {
        "description": "The side lengths of plane helper.",
        "name": "size",
        "title": "PlaneHelper.size: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/PlaneHelper.size",
      },
      Object {
        "description": "This overrides the method in the base Object3D class so that it also updates the helper object according to the .plane and .size properties.",
        "name": "updateMatrixWorld",
        "title": "PlaneHelper.updateMatrixWorld( force: Boolean ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/PlaneHelper.updateMatrixWorld",
      },
    ],
    "title": "PlaneHelper( plane: Plane, size: Float, hex: Color )",
    "url": "https://threejs.org/docs/#api/en/helpers/PlaneHelper",
  },
  Object {
    "description": "This displays a helper object consisting of a spherical Mesh for visualizing a PointLight.",
    "name": "PointLightHelper",
    "properties": Array [
      Object {
        "description": "The PointLight that is being visualized.",
        "name": "light",
        "title": "PointLightHelper.light: PointLight",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper.light",
      },
      Object {
        "description": "Reference to the pointLight's matrixWorld.",
        "name": "matrix",
        "title": "PointLightHelper.matrix: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper.matrix",
      },
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the pointLight's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "PointLightHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper.matrixAutoUpdate",
      },
      Object {
        "description": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time update is called.",
        "name": "color",
        "title": "PointLightHelper.color: hex",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper.color",
      },
      Object {
        "description": "Dispose of the pointLightHelper.",
        "name": "dispose",
        "title": "PointLightHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper.dispose",
      },
      Object {
        "description": "Updates the helper to match the position of the .light.",
        "name": "update",
        "title": "PointLightHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper.update",
      },
    ],
    "title": "PointLightHelper( light: PointLight, sphereSize: Float, color: Hex )",
    "url": "https://threejs.org/docs/#api/en/helpers/PointLightHelper",
  },
  Object {
    "description": "A helper object to assist with visualizing a Skeleton. The helper is renderered using a LineBasicMaterial.",
    "name": "SkeletonHelper",
    "properties": Array [
      Object {
        "description": "The list of bones that the helper renders as Lines.",
        "name": "bones",
        "title": "SkeletonHelper.bones: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SkeletonHelper.bones",
      },
      Object {
        "description": "The object passed in the constructor.",
        "name": "root",
        "title": "SkeletonHelper.root: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SkeletonHelper.root",
      },
    ],
    "title": "SkeletonHelper( object: Object3D )",
    "url": "https://threejs.org/docs/#api/en/helpers/SkeletonHelper",
  },
  Object {
    "description": "This displays a cone shaped helper object for a SpotLight.",
    "name": "SpotLightHelper",
    "properties": Array [
      Object {
        "description": "LineSegments used to visualize the light.",
        "name": "cone",
        "title": "SpotLightHelper.cone: LineSegments",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.cone",
      },
      Object {
        "description": "Reference to the SpotLight being visualized.",
        "name": "light",
        "title": "SpotLightHelper.light: SpotLight",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.light",
      },
      Object {
        "description": "Reference to the spotLight's matrixWorld.",
        "name": "matrix",
        "title": "SpotLightHelper.matrix: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.matrix",
      },
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the spotLight's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "SpotLightHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.matrixAutoUpdate",
      },
      Object {
        "description": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time update is called.",
        "name": "color",
        "title": "SpotLightHelper.color: hex",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.color",
      },
      Object {
        "description": "Disposes of the light helper.",
        "name": "dispose",
        "title": "SpotLightHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.dispose",
      },
      Object {
        "description": "Updates the light helper.",
        "name": "update",
        "title": "SpotLightHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper.update",
      },
    ],
    "title": "SpotLightHelper( light: SpotLight, color: Hex )",
    "url": "https://threejs.org/docs/#api/en/helpers/SpotLightHelper",
  },
  Object {
    "description": "This light globally illuminates all objects in the scene equally.
 This light cannot be used to cast shadows as it does not have a direction.",
    "name": "AmbientLight",
    "properties": Array [],
    "title": "AmbientLight( color: Integer, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/AmbientLight",
  },
  Object {
    "description": "Light probes are an alternative way of adding light to a 3D scene. AmbientLightProbe is the light estimation data of a single ambient light in the scene. For more information about light probes, go to LightProbe.",
    "name": "AmbientLightProbe",
    "properties": Array [],
    "title": "AmbientLightProbe( color: Color, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/AmbientLightProbe",
  },
  Object {
    "description": "A light that gets emitted in a specific direction. This light will behave as though it is infinitely far away and the rays produced from it are all parallel. The common use case for this is to simulate daylight; the sun is far enough away that its position can be considered to be infinite, and all light rays coming from it are parallel.
 This light can cast shadows - see the DirectionalLightShadow page for details.",
    "name": "DirectionalLight",
    "properties": Array [
      Object {
        "description": "If set to *true* light will cast dynamic shadows. *Warning*: This is expensive and requires tweaking to get shadows looking right. See the DirectionalLightShadow for details. The default is *false*.",
        "name": "castShadow",
        "title": "DirectionalLight.castShadow: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight.castShadow",
      },
      Object {
        "description": "This is set equal to Object3D.DefaultUp (0, 1, 0), so that the light shines from the top down.",
        "name": "position",
        "title": "DirectionalLight.position: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight.position",
      },
      Object {
        "description": "A DirectionalLightShadow used to calculate shadows for this light.",
        "name": "shadow",
        "title": "DirectionalLight.shadow: DirectionalLightShadow",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight.shadow",
      },
      Object {
        "description": "The DirectionalLight points from its position to target.position. The default position of the target is *(0, 0, 0)*.
 *Note*: For the target's position to be changed to anything other than the default, it must be added to the scene using",
        "name": "target",
        "title": "DirectionalLight.target: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight.target",
      },
      Object {
        "description": "Override of base class's dispose. Disposes of this light's shadow.",
        "name": "dispose",
        "title": "DirectionalLight.dispose(): DirectionalLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight.dispose",
      },
      Object {
        "description": "Copies value of all the properties from the source to this DirectionalLight.",
        "name": "copy",
        "title": "DirectionalLight.copy( source: DirectionalLight ): DirectionalLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight.copy",
      },
    ],
    "title": "DirectionalLight( color: Integer, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/DirectionalLight",
  },
  Object {
    "description": "A light source positioned directly above the scene, with color fading from the sky color to the ground color. 
 This light cannot be used to cast shadows.",
    "name": "HemisphereLight",
    "properties": Array [
      Object {
        "description": "The light's sky color, as passed in the constructor. Default is a new Color set to white (0xffffff).",
        "name": "color",
        "title": "HemisphereLight.color: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/HemisphereLight.color",
      },
      Object {
        "description": "The light's ground color, as passed in the constructor. Default is a new Color set to white (0xffffff).",
        "name": "groundColor",
        "title": "HemisphereLight.groundColor: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/HemisphereLight.groundColor",
      },
      Object {
        "description": "This is set equal to Object3D.DefaultUp (0, 1, 0), so that the light shines from the top down.",
        "name": "position",
        "title": "HemisphereLight.position: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/HemisphereLight.position",
      },
      Object {
        "description": "Copies the value of color, intensity and groundColor from the source light into this one.",
        "name": "copy",
        "title": "HemisphereLight.copy( source: HemisphereLight ): HemisphereLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/HemisphereLight.copy",
      },
    ],
    "title": "HemisphereLight( skyColor: Integer, groundColor: Integer, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/HemisphereLight",
  },
  Object {
    "description": "Light probes are an alternative way of adding light to a 3D scene. HemisphereLightProbe is the light estimation data of a single hemisphere light in the scene. For more information about light probes, go to LightProbe.",
    "name": "HemisphereLightProbe",
    "properties": Array [],
    "title": "HemisphereLightProbe( skyColor: Color, groundColor: Color, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/HemisphereLightProbe",
  },
  Object {
    "description": "Abstract base class for lights - all other light types inherit the properties and methods described here.",
    "name": "Light",
    "properties": Array [
      Object {
        "description": "Color of the light. Defaults to a new Color set to white, if not passed in the constructor.",
        "name": "color",
        "title": "Light.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/Light.color",
      },
      Object {
        "description": "The light's intensity, or strength.
 In physically correct mode, the product of color * intensity is interpreted as luminous intensity measured in candela.
 Default - *1.0*.",
        "name": "intensity",
        "title": "Light.intensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/Light.intensity",
      },
      Object {
        "description": "Abstract dispose method for lights; implemented by subclasses that have disposable resources.",
        "name": "dispose",
        "title": "Light.dispose(): Light",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/Light.dispose",
      },
      Object {
        "description": "Copies the value of color and intensity from the source light into this one.",
        "name": "copy",
        "title": "Light.copy( source: Light ): Light",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/Light.copy",
      },
      Object {
        "description": "meta â€” object containing metadata such as materials, textures for objects.
 Convert the light to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "Light.toJSON( meta: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/Light.toJSON",
      },
    ],
    "title": "Light( color: Integer, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/Light",
  },
  Object {
    "description": "Light probes are an alternative way of adding light to a 3D scene. Unlike classical light sources (e.g. directional, point or spot lights), light probes do not emit light. Instead they store information about light passing through 3D space. During rendering, the light that hits a 3D object is approximated by using the data from the light probe.",
    "name": "LightProbe",
    "properties": Array [
      Object {
        "description": "A light probe uses spherical harmonics to encode lighting information.",
        "name": "sh",
        "title": "LightProbe.sh: SphericalHarmonics3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/LightProbe.sh",
      },
    ],
    "title": "LightProbe( sh: SphericalHarmonics3, intensity: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/LightProbe",
  },
  Object {
    "description": "A light that gets emitted from a single point in all directions. A common use case for this is to replicate the light emitted from a bare lightbulb.
 This light can cast shadows - see PointLightShadow page for details.",
    "name": "PointLight",
    "properties": Array [
      Object {
        "description": "The amount the light dims along the distance of the light
 In physically correct mode, decay = 2 leads to physically realistic light falloff.
 Default is *1*.",
        "name": "decay",
        "title": "PointLight.decay: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/PointLight.decay",
      },
      Object {
        "description": "*Default mode* â€” When distance is zero, light does not attenuate. When distance is non-zero, light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light.",
        "name": "distance",
        "title": "PointLight.distance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/PointLight.distance",
      },
      Object {
        "description": "The light's power.
 In physically correct mode, the luminous power of the light measured in lumens. Default is *4Math.PI*. 
 This is directly related to the intensity in the ratio \`\`\` power = intensity * 4Ï€ \`\`\` and changing this will also change the intensity.",
        "name": "power",
        "title": "PointLight.power: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/PointLight.power",
      },
      Object {
        "description": "A PointLightShadow used to calculate shadows for this light.
 The lightShadow's camera is set to a PerspectiveCamera with fov of 90, aspect of 1, near clipping plane at 0.5 and far clipping plane at 500.",
        "name": "shadow",
        "title": "PointLight.shadow: PointLightShadow",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/PointLight.shadow",
      },
      Object {
        "description": "Override of base class's dispose. Disposes of this light's shadow.",
        "name": "dispose",
        "title": "PointLight.dispose(): PointLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/PointLight.dispose",
      },
      Object {
        "description": "Copies value of all the properties from the source to this PointLight.",
        "name": "copy",
        "title": "PointLight.copy( source: PointLight ): PointLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/PointLight.copy",
      },
    ],
    "title": "PointLight( color: Integer, intensity: Float, distance: Number, decay: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/PointLight",
  },
  Object {
    "description": "RectAreaLight emits light uniformly across the face a rectangular plane. This light type can be used to simulate light sources such as bright windows or strip lighting.
 Important Notes:",
    "name": "RectAreaLight",
    "properties": Array [
      Object {
        "description": "Copies value of all the properties from the source to this RectAreaLight.",
        "name": "copy",
        "title": "RectAreaLight.copy( source: RectAreaLight ): RectAreaLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/RectAreaLight.copy",
      },
    ],
    "title": "RectAreaLight( color: Integer, intensity: Float, width: Float, height: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/RectAreaLight",
  },
  Object {
    "description": "This light gets emitted from a single point in one direction, along a cone that increases in size the further from the light it gets. 
 This light can cast shadows - see the SpotLightShadow page for details.",
    "name": "SpotLight",
    "properties": Array [
      Object {
        "description": "Maximum extent of the spotlight, in radians, from its direction. Should be no more than *Math.PI/2*. The default is *Math.PI/3*.",
        "name": "angle",
        "title": "SpotLight.angle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.angle",
      },
      Object {
        "description": "If set to *true* light will cast dynamic shadows. *Warning*: This is expensive and requires tweaking to get shadows looking right. See the SpotLightShadow for details. The default is *false*.",
        "name": "castShadow",
        "title": "SpotLight.castShadow: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.castShadow",
      },
      Object {
        "description": "The amount the light dims along the distance of the light.
 In physically correct mode, decay = 2 leads to physically realistic light falloff. The default is *1*.",
        "name": "decay",
        "title": "SpotLight.decay: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.decay",
      },
      Object {
        "description": "*Default mode* â€” When distance is zero, light does not attenuate. When distance is non-zero, light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light.",
        "name": "distance",
        "title": "SpotLight.distance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.distance",
      },
      Object {
        "description": "Percent of the spotlight cone that is attenuated due to penumbra. Takes values between zero and 1. The default is *0.0*.",
        "name": "penumbra",
        "title": "SpotLight.penumbra: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.penumbra",
      },
      Object {
        "description": "This is set equal to Object3D.DefaultUp (0, 1, 0), so that the light shines from the top down.",
        "name": "position",
        "title": "SpotLight.position: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.position",
      },
      Object {
        "description": "The light's power.
 In physically correct mode, the luminous power of the light measured in lumens. Default is *4Math.PI*. 
 This is directly related to the intensity in the ratio \`\`\` power = intensity * Ï€ \`\`\` and changing this will also change the intensity.",
        "name": "power",
        "title": "SpotLight.power: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.power",
      },
      Object {
        "description": "A SpotLightShadow used to calculate shadows for this light.",
        "name": "shadow",
        "title": "SpotLight.shadow: SpotLightShadow",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.shadow",
      },
      Object {
        "description": "The Spotlight points from its position to target.position. The default position of the target is *(0, 0, 0)*.
 *Note*: For the target's position to be changed to anything other than the default, it must be added to the scene using \`\`\` scene.add( light.target ); \`\`\` This is so that the target's matrixWorld gets automatically updated each frame.
 It is also possible to set the target to be another object in the scene (anything with a position property), like so: \`\`\` const targetObject = new THREE.Object3D(); scene.add(targetObject); light.target = targetObject; \`\`\` The spotlight will now track the target object.",
        "name": "target",
        "title": "SpotLight.target: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.target",
      },
      Object {
        "description": "Override of base class's dispose. Disposes of this light's shadow.",
        "name": "dispose",
        "title": "SpotLight.dispose(): SpotLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.dispose",
      },
      Object {
        "description": "Copies value of all the properties from the source to this SpotLight.",
        "name": "copy",
        "title": "SpotLight.copy( source: SpotLight ): SpotLight",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/SpotLight.copy",
      },
    ],
    "title": "SpotLight( color: Integer, intensity: Float, distance: Float, angle: Radians, penumbra: Float, decay: Float )",
    "url": "https://threejs.org/docs/#api/en/lights/SpotLight",
  },
  Object {
    "description": "Serves as a base class for the other shadow classes.",
    "name": "LightShadow",
    "properties": Array [
      Object {
        "description": "Enables automatic updates of the light's shadow. Default is *true*. If you do not require dynamic lighting / shadows, you may set this to *false*.",
        "name": "autoUpdate",
        "title": "LightShadow.autoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.autoUpdate",
      },
      Object {
        "description": "The light's view of the world. This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow.",
        "name": "camera",
        "title": "LightShadow.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.camera",
      },
      Object {
        "description": "Shadow map bias, how much to add or subtract from the normalized depth when deciding whether a surface is in shadow.
 The default is 0. Very tiny adjustments here (in the order of 0.0001) may help reduce artefacts in shadows",
        "name": "bias",
        "title": "LightShadow.bias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.bias",
      },
      Object {
        "description": "The depth map generated using the internal camera; a location beyond a pixel's depth is in shadow. Computed internally during rendering.",
        "name": "map",
        "title": "LightShadow.map: WebGLRenderTarget",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.map",
      },
      Object {
        "description": "The distribution map generated using the internal camera; an occlusion is calculated based on the distribution of depths. Computed internally during rendering.",
        "name": "mapPass",
        "title": "LightShadow.mapPass: WebGLRenderTarget",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.mapPass",
      },
      Object {
        "description": "A Vector2 defining the width and height of the shadow map.
 Higher values give better quality shadows at the cost of computation time. Values must be powers of 2, up to the WebGLRenderer.capabilities.maxTextureSize for a given device, although the width and height don't have to be the same (so, for example, (512, 1024) is valid). The default is *( 512, 512 )*.",
        "name": "mapSize",
        "title": "LightShadow.mapSize: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.mapSize",
      },
      Object {
        "description": "Model to shadow camera space, to compute location and depth in shadow map. Stored in a Matrix4. This is computed internally during rendering.",
        "name": "matrix",
        "title": "LightShadow.matrix: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.matrix",
      },
      Object {
        "description": "When set to *true*, shadow maps will be updated in the next *render* call. Default is *false*. If you have set .autoUpdate to *false*, you will need to set this property to *true* and then make a render call to update the light's shadow.",
        "name": "needsUpdate",
        "title": "LightShadow.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.needsUpdate",
      },
      Object {
        "description": "Defines how much the position used to query the shadow map is offset along the object normal. The default is 0. Increasing this value can be used to reduce shadow acne especially in large scenes where light shines onto geometry at a shallow angle. The cost is that shadows may appear distorted.",
        "name": "normalBias",
        "title": "LightShadow.normalBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.normalBias",
      },
      Object {
        "description": "Setting this to values greater than 1 will blur the edges of the shadow.
 High values will cause unwanted banding effects in the shadows - a greater mapSize will allow for a higher value to be used here before these effects become visible.
 If WebGLRenderer.shadowMap.type is set to PCFSoftShadowMap, radius has no effect and it is recommended to increase softness by decreasing mapSize instead.
 Note that this has no effect if the WebGLRenderer.shadowMap.type is set to BasicShadowMap.",
        "name": "radius",
        "title": "LightShadow.radius: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.radius",
      },
      Object {
        "description": "Used internally by the renderer to extend the shadow map to contain all viewports",
        "name": "getFrameExtents",
        "title": "LightShadow.getFrameExtents(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.getFrameExtents",
      },
      Object {
        "description": "Update the matrices for the camera and shadow, used internally by the renderer.
 light â€” the light for which the shadow is being rendered.",
        "name": "updateMatrices",
        "title": "LightShadow.updateMatrices( light: Light ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.updateMatrices",
      },
      Object {
        "description": "Gets the shadow cameras frustum. Used internally by the renderer to cull objects.",
        "name": "getFrustum",
        "title": "LightShadow.getFrustum(): Frustum",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.getFrustum",
      },
      Object {
        "description": "Used internally by the renderer to get the number of viewports that need to be rendered for this shadow.",
        "name": "getViewportCount",
        "title": "LightShadow.getViewportCount(): number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.getViewportCount",
      },
      Object {
        "description": "Disposes of this shadow's textures (map and mapPass).",
        "name": "dispose",
        "title": "LightShadow.dispose(): LightShadow",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.dispose",
      },
      Object {
        "description": "Copies value of all the properties from the source to this Light.",
        "name": "copy",
        "title": "LightShadow.copy( source: LightShadow ): LightShadow",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.copy",
      },
      Object {
        "description": "Creates a new LightShadow with the same properties as this one.",
        "name": "clone",
        "title": "LightShadow.clone(): LightShadow",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.clone",
      },
      Object {
        "description": "Serialize this LightShadow.",
        "name": "toJSON",
        "title": "LightShadow.toJSON(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow.toJSON",
      },
    ],
    "title": "LightShadow( camera: Camera )",
    "url": "https://threejs.org/docs/#api/en/lights/shadows/LightShadow",
  },
  Object {
    "description": "This is used internally by PointLights for calculating shadows.",
    "name": "PointLightShadow",
    "properties": Array [
      Object {
        "description": "Update the matrices for the camera and shadow, used internally by the renderer.
 light â€” the light for which the shadow is being rendered.
 viewportIndex â€” calculates the matrix for this viewport",
        "name": "updateMatrices",
        "title": "PointLightShadow.updateMatrices( light: Light, viewportIndex: number): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/PointLightShadow.updateMatrices",
      },
    ],
    "title": "PointLightShadow( )",
    "url": "https://threejs.org/docs/#api/en/lights/shadows/PointLightShadow",
  },
  Object {
    "description": "This is used internally by DirectionalLights for calculating shadows.
 Unlike the other shadow classes, this uses an OrthographicCamera to calculate the shadows, rather than a PerspectiveCamera. This is because light rays from a DirectionalLight are parallel.",
    "name": "DirectionalLightShadow",
    "properties": Array [
      Object {
        "description": "The light's view of the world. This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow.
 The default is an OrthographicCamera with left and bottom set to -5, right and top set to 5, the near clipping plane at 0.5 and the far clipping plane at 500.",
        "name": "camera",
        "title": "DirectionalLightShadow.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/DirectionalLightShadow.camera",
      },
    ],
    "title": "DirectionalLightShadow( )",
    "url": "https://threejs.org/docs/#api/en/lights/shadows/DirectionalLightShadow",
  },
  Object {
    "description": "This is used internally by SpotLights for calculating shadows.",
    "name": "SpotLightShadow",
    "properties": Array [
      Object {
        "description": "The light's view of the world. This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow.
 The default is a PerspectiveCamera with near clipping plane at 0.5. The fov will track the angle property of the owning SpotLight via the update method. Similarly, the aspect property will track the aspect of the mapSize. If the distance property of the light is set, the far clipping plane will track that, otherwise it defaults to 500.",
        "name": "camera",
        "title": "SpotLightShadow.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/SpotLightShadow.camera",
      },
      Object {
        "description": "Used to focus the shadow camera. The camera's field of view is set as a percentage of the spotlight's field-of-view. Range is [0, 1]. Default is 1.0.",
        "name": "focus",
        "title": "SpotLightShadow.focus: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/lights/shadows/SpotLightShadow.focus",
      },
    ],
    "title": "The constructor creates a PerspectiveCamera: PerspectiveCamera to manage the shadow's view of the world.",
    "url": "https://threejs.org/docs/#api/en/lights/shadows/SpotLightShadow",
  },
  Object {
    "description": "Class for loading AnimationClips in JSON format. This uses the FileLoader internally for loading files.",
    "name": "AnimationLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded animation clips.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called if load errors.
 Begin loading from url and pass the loaded animation to onLoad.",
        "name": "load",
        "title": "AnimationLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/AnimationLoader.load",
      },
      Object {
        "description": "json â€” required
 Parse the JSON object and return an array of animation clips. Individual clips in the object will be parsed with AnimationClip.parse.",
        "name": "parse",
        "title": "AnimationLoader.parse( json: JSON ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/AnimationLoader.parse",
      },
    ],
    "title": "AnimationLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/AnimationLoader",
  },
  Object {
    "description": "Class for loading an [AudioBuffer](https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer). This uses the FileLoader internally for loading files.",
    "name": "AudioLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded text response.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "AudioLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/AudioLoader.load",
      },
    ],
    "title": "AudioLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/AudioLoader",
  },
  Object {
    "description": "A loader for loading a BufferGeometry. This uses the FileLoader internally for loading files.",
    "name": "BufferGeometryLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).d
 onLoad â€” Will be called when load completes. The argument will be the loaded BufferGeometry.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "BufferGeometryLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/BufferGeometryLoader.load",
      },
      Object {
        "description": "json â€” The *JSON* structure to parse.
 Parse a *JSON* structure and return a BufferGeometry.",
        "name": "parse",
        "title": "BufferGeometryLoader.parse( json: Object ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/BufferGeometryLoader.parse",
      },
    ],
    "title": "BufferGeometryLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/BufferGeometryLoader",
  },
  Object {
    "description": "A simple caching system, used internally by FileLoader.",
    "name": "Cache",
    "properties": Array [
      Object {
        "description": "Whether caching is enabled. Default is *false*.",
        "name": "enabled",
        "title": "Cache.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Cache.enabled",
      },
      Object {
        "description": "An object that holds cached files.",
        "name": "files",
        "title": "Cache.files: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Cache.files",
      },
      Object {
        "description": "key â€” the key to reference the cached file by.
 file â€” The file to be cached.
 Adds a cache entry with a key to reference the file. If this key already holds a file, it is overwritten.",
        "name": "add",
        "title": "Cache.add( key: String, file: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Cache.add",
      },
      Object {
        "description": "key â€” A string key 
 Get the value of key. If the key does not exist *undefined* is returned.",
        "name": "get",
        "title": "Cache.get( key: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Cache.get",
      },
      Object {
        "description": "key â€” A string key that references a cached file.
 Remove the cached file associated with the key.",
        "name": "remove",
        "title": "Cache.remove( key: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Cache.remove",
      },
      Object {
        "description": "Remove all values from the cache.",
        "name": "clear",
        "title": "Cache.clear(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Cache.clear",
      },
    ],
    "title": "Cache",
    "url": "https://threejs.org/docs/#api/en/loaders/Cache",
  },
  Object {
    "description": "Abstract base class for block based textures loader (dds, pvr, ...). This uses the FileLoader internally for loading files.",
    "name": "CompressedTextureLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded texture.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "CompressedTextureLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): CompressedTexture",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/CompressedTextureLoader.load",
      },
    ],
    "title": "CompressedTextureLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/CompressedTextureLoader",
  },
  Object {
    "description": "Class for loading a CubeTexture. This uses the ImageLoader internally for loading files.",
    "name": "CubeTextureLoader",
    "properties": Array [
      Object {
        "description": "urls â€” array of 6 urls to images, one for each side of the CubeTexture. The urls should be specified in the following order: pos-x, neg-x, pos-y, neg-y, pos-z, neg-z. They can also be [Data URIs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 Note that, by convention, cube maps are specified in a coordinate system in which positive-x is to the right when looking up the positive-z axis â€” in other words, using a left-handed coordinate system. Since three.js uses a right-handed coordinate system, environment maps used in three.js will have pos-x and neg-x swapped.
 onLoad â€” Will be called when load completes. The argument will be the loaded texture.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "CubeTextureLoader.load( urls: String, onLoad: Function, onProgress: Function, onError: Function ): CubeTexture",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/CubeTextureLoader.load",
      },
    ],
    "title": "CubeTextureLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/CubeTextureLoader",
  },
  Object {
    "description": "Abstract base class to load generic binary textures formats (rgbe, hdr, ...). This uses the FileLoader internally for loading files, and creates a new DataTexture.",
    "name": "DataTextureLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded texture.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "DataTextureLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): DataTexture",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/DataTextureLoader.load",
      },
    ],
    "title": "DataTextureLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/DataTextureLoader",
  },
  Object {
    "description": "A low level class for loading resources with XMLHttpRequest, used internaly by most loaders. It can also be used directly to load any file type that does not have a loader.",
    "name": "FileLoader",
    "properties": Array [
      Object {
        "description": "The expected [mimeType](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types). See .setMimeType. Default is *undefined*.",
        "name": "mimeType",
        "title": "FileLoader.mimeType: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/FileLoader.mimeType",
      },
      Object {
        "description": "The expected response type. See .setResponseType. Default is *undefined*.",
        "name": "responseType",
        "title": "FileLoader.responseType: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/FileLoader.responseType",
      },
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad (optional) â€” Will be called when loading completes. The argument will be the loaded response.
 onProgress (optional) â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError (optional) â€” Will be called if an error occurs.
 Load the URL and pass the response to the onLoad function.",
        "name": "load",
        "title": "FileLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): XMLHttpRequest",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/FileLoader.load",
      },
      Object {
        "description": "Set the expected [mimeType](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of the file being loaded. Note that in many cases this will be determined automatically, so by default it is *undefined*.",
        "name": "setMimeType",
        "title": "FileLoader.setMimeType( mimeType: String ): FileLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/FileLoader.setMimeType",
      },
      Object {
        "description": "Change the response type. Valid values are:
 text or empty string (default) - returns the data as String.
 arraybuffer - loads the data into a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) and returns that.
 blob - returns the data as a [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob).
 document - parses the file using the [DOMParser](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser).
 json - parses the file using [JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse).",
        "name": "setResponseType",
        "title": "FileLoader.setResponseType( responseType: String ): FileLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/FileLoader.setResponseType",
      },
    ],
    "title": "FileLoader ( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/FileLoader",
  },
  Object {
    "description": "Class for loading a font in JSON format. Returns a Font, which is an array of Shapes representing the font. This uses the FileLoader internally for loading files. 
 You can convert fonts online using [facetype.js](https://gero3.github.io/facetype.js/)",
    "name": "FontLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded font.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.
 Begin loading from url and pass the loaded texture to onLoad.",
        "name": "load",
        "title": "FontLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/FontLoader.load",
      },
      Object {
        "description": "json â€” The *JSON* structure to parse.
 Parse a *JSON* structure and return a Font.",
        "name": "parse",
        "title": "FontLoader.parse( json: Object ): Font",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/FontLoader.parse",
      },
    ],
    "title": "FontLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/FontLoader",
  },
  Object {
    "description": "A loader for loading an Image as an [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap). An ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.
 Unlike FileLoader, ImageBitmapLoader does not avoid multiple concurrent requests to the same URL.",
    "name": "ImageBitmapLoader",
    "properties": Array [
      Object {
        "description": "An optional object that sets options for the internally used [createImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap) factory method. Default is *undefined*.",
        "name": "options",
        "title": "ImageBitmapLoader.options: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/ImageBitmapLoader.options",
      },
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded image.
 onProgress â€” This callback function is currently not supported.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "ImageBitmapLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ImageBitmapLoader.load",
      },
      Object {
        "description": "Sets the options object for [createImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap).",
        "name": "setOptions",
        "title": "ImageBitmapLoader.setOptions( options: Object ): ImageBitmapLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ImageBitmapLoader.setOptions",
      },
    ],
    "title": "ImageBitmapLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/ImageBitmapLoader",
  },
  Object {
    "description": "A loader for loading an Image. This is used internally by the CubeTextureLoader, ObjectLoader and TextureLoader.",
    "name": "ImageLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded image.
 onProgress â€” This callback function is currently not supported.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "ImageLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): HTMLImageElement",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ImageLoader.load",
      },
    ],
    "title": "ImageLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/ImageLoader",
  },
  Object {
    "description": "Base class for implementing loaders.",
    "name": "Loader",
    "properties": Array [
      Object {
        "description": "The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS. Default is *anonymous*.",
        "name": "crossOrigin",
        "title": "Loader.crossOrigin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.crossOrigin",
      },
      Object {
        "description": "Whether the XMLHttpRequest uses credentials. See .setWithCredentials. Default is *false*.",
        "name": "withCredentials",
        "title": "Loader.withCredentials: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.withCredentials",
      },
      Object {
        "description": "The loadingManager the loader is using. Default is DefaultLoadingManager.",
        "name": "manager",
        "title": "Loader.manager: LoadingManager",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.manager",
      },
      Object {
        "description": "The base path from which the asset will be loaded. Default is the empty string.",
        "name": "path",
        "title": "Loader.path: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.path",
      },
      Object {
        "description": "The base path from which additional resources like textures will be loaded. Default is the empty string.",
        "name": "resourcePath",
        "title": "Loader.resourcePath: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.resourcePath",
      },
      Object {
        "description": "The [request header](https://developer.mozilla.org/en-US/docs/Glossary/Request_header) used in HTTP request. See .setRequestHeader. Default is empty object.",
        "name": "requestHeader",
        "title": "Loader.requestHeader: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.requestHeader",
      },
      Object {
        "description": "This method needs to be implement by all concrete loaders. It holds the logic for loading the asset from the backend.",
        "name": "load",
        "title": "Loader.load(): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.load",
      },
      Object {
        "description": "url â€” A string containing the path/URL of the file to be loaded.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.",
        "name": "loadAsync",
        "title": "Loader.loadAsync( url: String, onProgress: Function ): Promise",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.loadAsync",
      },
      Object {
        "description": "This method needs to be implement by all concrete loaders. It holds the logic for parsing the asset into three.js entities.",
        "name": "parse",
        "title": "Loader.parse(): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.parse",
      },
      Object {
        "description": "crossOrigin â€” The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS.",
        "name": "setCrossOrigin",
        "title": "Loader.setCrossOrigin( crossOrigin: String ): Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.setCrossOrigin",
      },
      Object {
        "description": "Whether the XMLHttpRequest uses credentials such as cookies, authorization headers or TLS client certificates. See [XMLHttpRequest.withCredentials](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials).
 Note that this has no effect if you are loading files locally or from the same domain.",
        "name": "setWithCredentials",
        "title": "Loader.setWithCredentials( value: Boolean ): Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.setWithCredentials",
      },
      Object {
        "description": "path â€” Set the base path for the asset.",
        "name": "setPath",
        "title": "Loader.setPath( path: String ): Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.setPath",
      },
      Object {
        "description": "resourcePath â€” Set the base path for dependent resources like textures.",
        "name": "setResourcePath",
        "title": "Loader.setResourcePath( resourcePath: String ): Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.setResourcePath",
      },
      Object {
        "description": "requestHeader - key: The name of the header whose value is to be set. value: The value to set as the body of the header.
 Set the [request header](https://developer.mozilla.org/en-US/docs/Glossary/Request_header) used in HTTP request.",
        "name": "setRequestHeader",
        "title": "Loader.setRequestHeader( requestHeader: Object ): Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/Loader.setRequestHeader",
      },
    ],
    "title": "Loader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/Loader",
  },
  Object {
    "description": "An object with several loader utility functions.",
    "name": "LoaderUtils",
    "properties": Array [
      Object {
        "description": "array â€” A stream of bytes as a typed array.",
        "name": "decodeText",
        "title": "LoaderUtils.decodeText( array: TypedArray ): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/LoaderUtils.decodeText",
      },
      Object {
        "description": "url â€” The url to extract the base url from.",
        "name": "extractUrlBase",
        "title": "LoaderUtils.extractUrlBase( url: String ): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/LoaderUtils.extractUrlBase",
      },
    ],
    "title": "LoaderUtils",
    "url": "https://threejs.org/docs/#api/en/loaders/LoaderUtils",
  },
  Object {
    "description": "A loader for loading a Material in JSON format. This uses the FileLoader internally for loading files.",
    "name": "MaterialLoader",
    "properties": Array [
      Object {
        "description": "Object holding any textures used by the material. See .setTextures.",
        "name": "textures",
        "title": "MaterialLoader.textures: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/MaterialLoader.textures",
      },
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded Material.
 onProgress â€” Will be called while load progresses. The argument will be the progress event.
 onError â€” Will be called when load errors.
 Begin loading from url.",
        "name": "load",
        "title": "MaterialLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/MaterialLoader.load",
      },
      Object {
        "description": "json â€” The json object containing the parameters of the Material.
 Parse a *JSON* structure and create a new Material of the type json.type with parameters defined in the json object.",
        "name": "parse",
        "title": "MaterialLoader.parse( json: Object ): Material",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/MaterialLoader.parse",
      },
      Object {
        "description": "textures â€” object containing any textures used by the material.",
        "name": "setTextures",
        "title": "MaterialLoader.setTextures( textures: Object ): MaterialLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/MaterialLoader.setTextures",
      },
    ],
    "title": "MaterialLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/MaterialLoader",
  },
  Object {
    "description": "A loader for loading a JSON resource in the [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).
 This uses the FileLoader internally for loading files.",
    "name": "ObjectLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded object.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.",
        "name": "load",
        "title": "ObjectLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.load",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 onLoad â€” Will be called when parsed completes. The argument will be the parsed object.
 Parse a *JSON* structure and return a threejs object. This is used internally by .load() but can also be used directly to parse a previously loaded JSON structure.",
        "name": "parse",
        "title": "ObjectLoader.parse( json: Object, onLoad: Function ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parse",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 This is used by .parse() to parse any geometries in the JSON structure.",
        "name": "parseGeometries",
        "title": "ObjectLoader.parseGeometries( json: Object ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parseGeometries",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 This is used by .parse() to parse any materials in the JSON structure using MaterialLoader.",
        "name": "parseMaterials",
        "title": "ObjectLoader.parseMaterials( json: Object ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parseMaterials",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 This is used by .parse() to parse any animations in the JSON structure, using AnimationClip.parse().",
        "name": "parseAnimations",
        "title": "ObjectLoader.parseAnimations( json: Object ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parseAnimations",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 This is used by .parse() to parse any images in the JSON structure, using ImageLoader.",
        "name": "parseImages",
        "title": "ObjectLoader.parseImages( json: Object ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parseImages",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 This is used by .parse() to parse any textures in the JSON structure.",
        "name": "parseTextures",
        "title": "ObjectLoader.parseTextures( json: Object ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parseTextures",
      },
      Object {
        "description": "json â€” required. The JSON source to parse.
 geometries â€” required. The geometries of the JSON.
 materials â€” required. The materials of the JSON.
 animations â€” required. The animations of the JSON.
 This is used by .parse() to parse any 3D objects in the JSON structure.",
        "name": "parseObject",
        "title": "ObjectLoader.parseObject( json: Object, geometries: BufferGeometry, materials: Material, animations: AnimationClip ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader.parseObject",
      },
    ],
    "title": "ObjectLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/ObjectLoader",
  },
  Object {
    "description": "Class for loading a texture. This uses the ImageLoader internally for loading files.",
    "name": "TextureLoader",
    "properties": Array [
      Object {
        "description": "url â€” the path or URL to the file. This can also be a [Data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs).
 onLoad â€” Will be called when load completes. The argument will be the loaded texture.
 onProgress â€” Will be called while load progresses. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” Will be called when load errors.
 Begin loading from the given URL and pass the fully loaded texture to onLoad. The method also returns a new texture object which can directly be used for material creation. If you do it this way, the texture may pop up in your scene once the respective loading process is finished.",
        "name": "load",
        "title": "TextureLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): Texture",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/TextureLoader.load",
      },
    ],
    "title": "TextureLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#api/en/loaders/TextureLoader",
  },
  Object {
    "description": "A global instance of the LoadingManager, used by most loaders when no custom manager has been specified.
 This will be sufficient for most purposes, however there may be times when you desire seperate loading managers for say, textures and models.",
    "name": "DefaultLoadingManager",
    "properties": Array [],
    "title": "DefaultLoadingManager",
    "url": "https://threejs.org/docs/#api/en/loaders/managers/DefaultLoadingManager",
  },
  Object {
    "description": "Handles and keeps track of loaded and pending data. A default global instance of this class is created and used by loaders if not supplied manually - see DefaultLoadingManager.
 In general that should be sufficient, however there are times when it can be useful to have seperate loaders - for example if you want to show seperate loading bars for objects and textures.",
    "name": "LoadingManager",
    "properties": Array [
      Object {
        "description": "This function will be called when loading starts. The arguments are:
 url â€” The url of the item just loaded.
 itemsLoaded â€” the number of items already loaded so far.
 itemsTotal â€” the total amount of items to be loaded.
 By default this is undefined.",
        "name": "onStart",
        "title": "LoadingManager.onStart: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.onStart",
      },
      Object {
        "description": "This function will be called when all loading is completed. By default this is undefined, unless passed in the constructor.",
        "name": "onLoad",
        "title": "LoadingManager.onLoad: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.onLoad",
      },
      Object {
        "description": "This function will be called when an item is complete. The arguments are:
 url â€” The url of the item just loaded.
 itemsLoaded â€” the number of items already loaded so far.
 itemsTotal â€” the total amount of items to be loaded.
 By default this is undefined, unless passed in the constructor.",
        "name": "onProgress",
        "title": "LoadingManager.onProgress: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.onProgress",
      },
      Object {
        "description": "This function will be called when any item errors, with the argument:
 url â€” The url of the item that errored.
 By default this is undefined, unless passed in the constructor.",
        "name": "onError",
        "title": "LoadingManager.onError: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.onError",
      },
      Object {
        "description": "regex â€” A regular expression.
 loader â€” The loader.",
        "name": "addHandler",
        "title": "LoadingManager.addHandler( regex: Object, loader: Loader ): LoadingManager",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.addHandler",
      },
      Object {
        "description": "file â€” The file path.",
        "name": "getHandler",
        "title": "LoadingManager.getHandler( file: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.getHandler",
      },
      Object {
        "description": "regex â€” A regular expression.",
        "name": "removeHandler",
        "title": "LoadingManager.removeHandler( regex: Object ): LoadingManager",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.removeHandler",
      },
      Object {
        "description": "url â€” the url to load
 Given a URL, uses the URL modifier callback (if any) and returns a resolved URL. If no URL modifier is set, returns the original URL.",
        "name": "resolveURL",
        "title": "LoadingManager.resolveURL( url: String ): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.resolveURL",
      },
      Object {
        "description": "callback â€” URL modifier callback. Called with url argument, and must return resolvedURL.
 If provided, the callback will be passed each resource URL before a request is sent. The callback may return the original URL, or a new URL to override loading behavior. This behavior can be used to load assets from .ZIP files, drag-and-drop APIs, and Data URIs.",
        "name": "setURLModifier",
        "title": "LoadingManager.setURLModifier( callback: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.setURLModifier",
      },
      Object {
        "description": "url â€” the url to load
 This should be called by any loader using the manager when the loader starts loading an url.",
        "name": "itemStart",
        "title": "LoadingManager.itemStart( url: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.itemStart",
      },
      Object {
        "description": "url â€” the loaded url
 This should be called by any loader using the manager when the loader ended loading an url.",
        "name": "itemEnd",
        "title": "LoadingManager.itemEnd( url: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.itemEnd",
      },
      Object {
        "description": "url â€” the loaded url
 This should be called by any loader using the manager when the loader errors loading an url.",
        "name": "itemError",
        "title": "LoadingManager.itemError( url: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager.itemError",
      },
    ],
    "title": "LoadingManager( onLoad: Function, onProgress: Function, onError: Function )",
    "url": "https://threejs.org/docs/#api/en/loaders/managers/LoadingManager",
  },
  Object {
    "description": "A material for drawing wireframe-style geometries.",
    "name": "LineBasicMaterial",
    "properties": Array [
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "LineBasicMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineBasicMaterial.color",
      },
      Object {
        "description": "Controls line thickness. Default is *1*.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "linewidth",
        "title": "LineBasicMaterial.linewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineBasicMaterial.linewidth",
      },
      Object {
        "description": "Define appearance of line ends. Possible values are 'butt', 'round' and 'square'. Default is 'round'.
 This corresponds to the [2D Canvas lineCap](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap) property and it is ignored by the WebGL renderer.",
        "name": "linecap",
        "title": "LineBasicMaterial.linecap: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineBasicMaterial.linecap",
      },
      Object {
        "description": "Define appearance of line joints. Possible values are 'round', 'bevel' and 'miter'. Default is 'round'. 
 This corresponds to the [2D Canvas lineJoin](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin) property and it is ignored by the WebGL renderer.",
        "name": "linejoin",
        "title": "LineBasicMaterial.linejoin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineBasicMaterial.linejoin",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "LineBasicMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineBasicMaterial.morphTargets",
      },
    ],
    "title": "LineBasicMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/LineBasicMaterial",
  },
  Object {
    "description": "A material for drawing wireframe-style geometries with dashed lines.",
    "name": "LineDashedMaterial",
    "properties": Array [
      Object {
        "description": "The size of the dash. This is both the gap with the stroke. Default is *3*.",
        "name": "dashSize",
        "title": "LineDashedMaterial.dashSize: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineDashedMaterial.dashSize",
      },
      Object {
        "description": "The size of the gap. Default is *1*.",
        "name": "gapSize",
        "title": "LineDashedMaterial.gapSize: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineDashedMaterial.gapSize",
      },
      Object {
        "description": "The scale of the dashed part of a line. Default is *1*.",
        "name": "scale",
        "title": "LineDashedMaterial.scale: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/LineDashedMaterial.scale",
      },
    ],
    "title": "LineDashedMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/LineDashedMaterial",
  },
  Object {
    "description": "Abstract base class for materials.
 Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don't have to rewrite materials if you decide to use a different renderer.
 The following properties and methods are inherited by all other material types (although they may have different defaults).",
    "name": "Material",
    "properties": Array [
      Object {
        "description": "Sets the alpha value to be used when running an alpha test. The material will not be renderered if the opacity is lower than this value. Default is *0*.",
        "name": "alphaTest",
        "title": "Material.alphaTest: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.alphaTest",
      },
      Object {
        "description": "Enables alpha to coverage. Can only be used with MSAA-enabled contexts (meaning when the renderer was created with *antialias* parameter set to *true*). Default is *false*.",
        "name": "alphaToCoverage",
        "title": "Material.alphaToCoverage: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.alphaToCoverage",
      },
      Object {
        "description": "Blending destination. Default is OneMinusSrcAlphaFactor. See the destination factors constants for all possible values.
 The material's blending must be set to CustomBlending for this to have any effect.",
        "name": "blendDst",
        "title": "Material.blendDst: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blendDst",
      },
      Object {
        "description": "The transparency of the .blendDst. Uses .blendDst value if null. Default is *null*.",
        "name": "blendDstAlpha",
        "title": "Material.blendDstAlpha: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blendDstAlpha",
      },
      Object {
        "description": "Blending equation to use when applying blending. Default is AddEquation. See the blending equation constants for all possible values.
 The material's blending must be set to CustomBlending for this to have any effect.",
        "name": "blendEquation",
        "title": "Material.blendEquation: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blendEquation",
      },
      Object {
        "description": "The transparency of the .blendEquation. Uses .blendEquation value if null. Default is *null*.",
        "name": "blendEquationAlpha",
        "title": "Material.blendEquationAlpha: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blendEquationAlpha",
      },
      Object {
        "description": "Which blending to use when displaying objects with this material. 
 This must be set to CustomBlending to use custom blendSrc, blendDst or blendEquation.
 See the blending mode constants for all possible values. Default is NormalBlending.",
        "name": "blending",
        "title": "Material.blending: Blending",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blending",
      },
      Object {
        "description": "Blending source. Default is SrcAlphaFactor. See the source factors constants for all possible values.
 The material's blending must be set to CustomBlending for this to have any effect.",
        "name": "blendSrc",
        "title": "Material.blendSrc: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blendSrc",
      },
      Object {
        "description": "The transparency of the .blendSrc. Uses .blendSrc value if null. Default is *null*.",
        "name": "blendSrcAlpha",
        "title": "Material.blendSrcAlpha: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.blendSrcAlpha",
      },
      Object {
        "description": "Changes the behavior of clipping planes so that only their intersection is clipped, rather than their union. Default is *false*.",
        "name": "clipIntersection",
        "title": "Material.clipIntersection: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.clipIntersection",
      },
      Object {
        "description": "User-defined clipping planes specified as THREE.Plane objects in world space. These planes apply to the objects this material is attached to. Points in space whose signed distance to the plane is negative are clipped (not rendered). This requires WebGLRenderer.localClippingEnabled to be *true*. See the WebGL / clipping /intersection example. Default is *null*.",
        "name": "clippingPlanes",
        "title": "Material.clippingPlanes: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.clippingPlanes",
      },
      Object {
        "description": "Defines whether to clip shadows according to the clipping planes specified on this material. Default is *false*.",
        "name": "clipShadows",
        "title": "Material.clipShadows: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.clipShadows",
      },
      Object {
        "description": "Whether to render the material's color. This can be used in conjunction with a mesh's renderOrder property to create invisible objects that occlude other objects. Default is *true*.",
        "name": "colorWrite",
        "title": "Material.colorWrite: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.colorWrite",
      },
      Object {
        "description": "Custom defines to be injected into the shader. These are passed in form of an object literal, with key/value pairs. { MY_CUSTOM_DEFINE: '' , PI2: Math.PI * 2 }. The pairs are defined in both vertex and fragment shaders. Default is *undefined*.",
        "name": "defines",
        "title": "Material.defines: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.defines",
      },
      Object {
        "description": "Which depth function to use. Default is LessEqualDepth. See the depth mode constants for all possible values.",
        "name": "depthFunc",
        "title": "Material.depthFunc: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.depthFunc",
      },
      Object {
        "description": "Whether to have depth test enabled when rendering this material. Default is *true*.",
        "name": "depthTest",
        "title": "Material.depthTest: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.depthTest",
      },
      Object {
        "description": "Whether rendering this material has any effect on the depth buffer. Default is *true*.
 When drawing 2D overlays it can be useful to disable the depth writing in order to layer several things together without creating z-index artifacts.",
        "name": "depthWrite",
        "title": "Material.depthWrite: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.depthWrite",
      },
      Object {
        "description": "Whether stencil operations are performed against the stencil buffer. In order to perform writes or comparisons against the stencil buffer this value must be *true*. Default is *false*.",
        "name": "stencilWrite",
        "title": "Material.stencilWrite: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilWrite",
      },
      Object {
        "description": "The bit mask to use when writing to the stencil buffer. Default is *0xFF*.",
        "name": "stencilWriteMask",
        "title": "Material.stencilWriteMask: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilWriteMask",
      },
      Object {
        "description": "The stencil comparison function to use. Default is AlwaysStencilFunc. See stencil function constants for all possible values.",
        "name": "stencilFunc",
        "title": "Material.stencilFunc: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilFunc",
      },
      Object {
        "description": "The value to use when performing stencil comparisons or stencil operations. Default is *0*.",
        "name": "stencilRef",
        "title": "Material.stencilRef: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilRef",
      },
      Object {
        "description": "The bit mask to use when comparing against the stencil buffer. Default is *0xFF*.",
        "name": "stencilFuncMask",
        "title": "Material.stencilFuncMask: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilFuncMask",
      },
      Object {
        "description": "Which stencil operation to perform when the comparison function returns false. Default is KeepStencilOp. See the stencil operations constants for all possible values.",
        "name": "stencilFail",
        "title": "Material.stencilFail: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilFail",
      },
      Object {
        "description": "Which stencil operation to perform when the comparison function returns true but the depth test fails. Default is KeepStencilOp. See the stencil operations constants for all possible values.",
        "name": "stencilZFail",
        "title": "Material.stencilZFail: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilZFail",
      },
      Object {
        "description": "Which stencil operation to perform when the comparison function returns true and the depth test passes. Default is KeepStencilOp. See the stencil operations constants for all possible values.",
        "name": "stencilZPass",
        "title": "Material.stencilZPass: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.stencilZPass",
      },
      Object {
        "description": "Whether the material is affected by fog. Default is *true*.",
        "name": "fog",
        "title": "Material.fog: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.fog",
      },
      Object {
        "description": "Unique number for this material instance.",
        "name": "id",
        "title": "Material.id: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.id",
      },
      Object {
        "description": "Optional name of the object (doesn't need to be unique). Default is an empty string.",
        "name": "name",
        "title": "Material.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.name",
      },
      Object {
        "description": "Specifies that the material needs to be recompiled.",
        "name": "needsUpdate",
        "title": "Material.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.needsUpdate",
      },
      Object {
        "description": "Float in the range of *0.0* - *1.0* indicating how transparent the material is. A value of *0.0* indicates fully transparent, *1.0* is fully opaque.
 If the material's transparent property is not set to *true*, the material will remain fully opaque and this value will only affect its color. 
 Default is *1.0*.",
        "name": "opacity",
        "title": "Material.opacity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.opacity",
      },
      Object {
        "description": "Whether to use polygon offset. Default is *false*. This corresponds to the *GL_POLYGON_OFFSET_FILL* WebGL feature.",
        "name": "polygonOffset",
        "title": "Material.polygonOffset: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.polygonOffset",
      },
      Object {
        "description": "Sets the polygon offset factor. Default is *0*.",
        "name": "polygonOffsetFactor",
        "title": "Material.polygonOffsetFactor: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.polygonOffsetFactor",
      },
      Object {
        "description": "Sets the polygon offset units. Default is *0*.",
        "name": "polygonOffsetUnits",
        "title": "Material.polygonOffsetUnits: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.polygonOffsetUnits",
      },
      Object {
        "description": "Override the renderer's default precision for this material. Can be \\"*highp*\\", \\"*mediump*\\" or \\"*lowp*\\". Default is *null*.",
        "name": "precision",
        "title": "Material.precision: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.precision",
      },
      Object {
        "description": "Whether to premultiply the alpha (transparency) value. See WebGL / Materials / Physical / Transmission for an example of the difference. Default is *false*.",
        "name": "premultipliedAlpha",
        "title": "Material.premultipliedAlpha: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.premultipliedAlpha",
      },
      Object {
        "description": "Whether to apply dithering to the color to remove the appearance of banding. Default is *false*.",
        "name": "dithering",
        "title": "Material.dithering: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.dithering",
      },
      Object {
        "description": "Defines which side of faces cast shadows. When set, can be THREE.FrontSide, THREE.BackSide, or THREE.DoubleSide. Default is *null*. 
 If *null*, the side casting shadows is determined as follows:",
        "name": "shadowSide",
        "title": "Material.shadowSide: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.shadowSide",
      },
      Object {
        "description": "Defines which side of faces will be rendered - front, back or both. Default is THREE.FrontSide. Other options are THREE.BackSide and THREE.DoubleSide.",
        "name": "side",
        "title": "Material.side: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.side",
      },
      Object {
        "description": "Defines whether this material is tone mapped according to the renderer's toneMapping setting. Default is *true*.",
        "name": "toneMapped",
        "title": "Material.toneMapped: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.toneMapped",
      },
      Object {
        "description": "Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects. 
 When set to true, the extent to which the material is transparent is controlled by setting its opacity property. 
 Default is *false*.",
        "name": "transparent",
        "title": "Material.transparent: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.transparent",
      },
      Object {
        "description": "Value is the string 'Material'. This shouldn't be changed, and can be used to find all objects of this type in a scene.",
        "name": "type",
        "title": "Material.type: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.type",
      },
      Object {
        "description": "[UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this material instance. This gets automatically assigned, so this shouldn't be edited.",
        "name": "uuid",
        "title": "Material.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.uuid",
      },
      Object {
        "description": "This starts at *0* and counts how many times needsUpdate is set to *true*.",
        "name": "version",
        "title": "Material.version: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.version",
      },
      Object {
        "description": "Defines whether vertex coloring is used. Default is *false*.",
        "name": "vertexColors",
        "title": "Material.vertexColors: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.vertexColors",
      },
      Object {
        "description": "Defines whether this material is visible. Default is *true*.",
        "name": "visible",
        "title": "Material.visible: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.visible",
      },
      Object {
        "description": "An object that can be used to store custom data about the Material. It should not hold references to functions as these will not be cloned.",
        "name": "userData",
        "title": "Material.userData: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/Material.userData",
      },
      Object {
        "description": "Return a new material with the same parameters as this material.",
        "name": "clone",
        "title": "Material.clone( ): Material",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.clone",
      },
      Object {
        "description": "Copy the parameters from the passed material into this material.",
        "name": "copy",
        "title": "Material.copy( material: material ): Material",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.copy",
      },
      Object {
        "description": "This disposes the material. Textures of a material don't get disposed. These needs to be disposed by Texture.",
        "name": "dispose",
        "title": "Material.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.dispose",
      },
      Object {
        "description": "An optional callback that is executed immediately before the shader program is compiled. This function is called with the shader source code as a parameter. Useful for the modification of built-in materials.",
        "name": "onBeforeCompile",
        "title": "Material.onBeforeCompile( shader: Shader, renderer: WebGLRenderer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.onBeforeCompile",
      },
      Object {
        "description": "In case onBeforeCompile is used, this callback can be used to identify values of settings used in onBeforeCompile, so three.js can reuse a cached shader or recompile the shader for this material as needed.",
        "name": "customProgramCacheKey",
        "title": "Material.customProgramCacheKey(): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.customProgramCacheKey",
      },
      Object {
        "description": "values â€” a container with parameters.
 Sets the properties based on the *values*.",
        "name": "setValues",
        "title": "Material.setValues( values: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.setValues",
      },
      Object {
        "description": "meta â€” object containing metadata such as textures or images for the material.
 Convert the material to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "Material.toJSON( meta: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/Material.toJSON",
      },
    ],
    "title": "Material()",
    "url": "https://threejs.org/docs/#api/en/materials/Material",
  },
  Object {
    "description": "A material for drawing geometries in a simple shaded (flat or wireframe) way.
 This material is not affected by lights.",
    "name": "MeshBasicMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshBasicMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.alphaMap",
      },
      Object {
        "description": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs.",
        "name": "aoMap",
        "title": "MeshBasicMaterial.aoMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.aoMap",
      },
      Object {
        "description": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect.",
        "name": "aoMapIntensity",
        "title": "MeshBasicMaterial.aoMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.aoMapIntensity",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "MeshBasicMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.color",
      },
      Object {
        "description": "How to combine the result of the surface's color with the environment map, if any.
 Options are THREE.Multiply (default), THREE.MixOperation, THREE.AddOperation. If mix is chosen, the .reflectivity is used to blend between the two colors.",
        "name": "combine",
        "title": "MeshBasicMaterial.combine: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.combine",
      },
      Object {
        "description": "The environment map. Default is null.",
        "name": "envMap",
        "title": "MeshBasicMaterial.envMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.envMap",
      },
      Object {
        "description": "The light map. Default is null. The lightMap requires a second set of UVs.",
        "name": "lightMap",
        "title": "MeshBasicMaterial.lightMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.lightMap",
      },
      Object {
        "description": "Intensity of the baked light. Default is 1.",
        "name": "lightMapIntensity",
        "title": "MeshBasicMaterial.lightMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.lightMapIntensity",
      },
      Object {
        "description": "The color map. Default is null.",
        "name": "map",
        "title": "MeshBasicMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.map",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshBasicMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.morphTargets",
      },
      Object {
        "description": "How much the environment map affects the surface; also see .combine. The default value is 1 and the valid range is between 0 (no reflections) and 1 (full reflections).",
        "name": "reflectivity",
        "title": "MeshBasicMaterial.reflectivity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.reflectivity",
      },
      Object {
        "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes THREE.CubeRefractionMapping and THREE.EquirectangularRefractionMapping. The refraction ratio should not exceed 1. Default is *0.98*.",
        "name": "refractionRatio",
        "title": "MeshBasicMaterial.refractionRatio: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.refractionRatio",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshBasicMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.skinning",
      },
      Object {
        "description": "Specular map used by the material. Default is null.",
        "name": "specularMap",
        "title": "MeshBasicMaterial.specularMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.specularMap",
      },
      Object {
        "description": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons).",
        "name": "wireframe",
        "title": "MeshBasicMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.wireframe",
      },
      Object {
        "description": "Define appearance of line ends. Possible values are \\"butt\\", \\"round\\" and \\"square\\". Default is 'round'.
 This corresponds to the [2D Canvas lineCap](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinecap",
        "title": "MeshBasicMaterial.wireframeLinecap: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.wireframeLinecap",
      },
      Object {
        "description": "Define appearance of line joints. Possible values are \\"round\\", \\"bevel\\" and \\"miter\\". Default is 'round'.
 This corresponds to the [2D Canvas lineJoin](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinejoin",
        "title": "MeshBasicMaterial.wireframeLinejoin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.wireframeLinejoin",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshBasicMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshBasicMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshBasicMaterial",
  },
  Object {
    "description": "A material for drawing geometry by depth. Depth is based off of the camera near and far plane. White is nearest, black is farthest.",
    "name": "MeshDepthMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshDepthMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.alphaMap",
      },
      Object {
        "description": "Encoding for depth packing. Default is BasicDepthPacking.",
        "name": "depthPacking",
        "title": "MeshDepthMaterial.depthPacking: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.depthPacking",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshDepthMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshDepthMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshDepthMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.displacementBias",
      },
      Object {
        "description": "Whether the material is affected by fog. Default is *false*.",
        "name": "fog",
        "title": "MeshDepthMaterial.fog: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.fog",
      },
      Object {
        "description": "The color map. Default is null.",
        "name": "map",
        "title": "MeshDepthMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.map",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshDepthMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.morphTargets",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshDepthMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.skinning",
      },
      Object {
        "description": "Render geometry as wireframe. Default is false (i.e. render as smooth shaded).",
        "name": "wireframe",
        "title": "MeshDepthMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.wireframe",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshDepthMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshDepthMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshDepthMaterial",
  },
  Object {
    "description": "MeshDistanceMaterial is internally used for implementing shadow mapping with PointLights.
 Can also be used to customize the shadow casting of an object by assigning an instance of MeshDistanceMaterial to Object3D.customDistanceMaterial. The following examples demonstrates this approach in order to ensure transparent parts of objects do no cast shadows.",
    "name": "MeshDistanceMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshDistanceMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.alphaMap",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshDistanceMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshDistanceMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshDistanceMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.displacementBias",
      },
      Object {
        "description": "The far value of the point light's internal shadow camera.",
        "name": "farDistance",
        "title": "MeshDistanceMaterial.farDistance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.farDistance",
      },
      Object {
        "description": "Whether the material is affected by fog. Default is *false*.",
        "name": "fog",
        "title": "MeshDistanceMaterial.fog: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.fog",
      },
      Object {
        "description": "The color map. Default is null.",
        "name": "map",
        "title": "MeshDistanceMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.map",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshDistanceMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.morphTargets",
      },
      Object {
        "description": "The near value of the point light's internal shadow camera.",
        "name": "nearDistance",
        "title": "MeshDistanceMaterial.nearDistance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.nearDistance",
      },
      Object {
        "description": "The position of the point light in world space.",
        "name": "referencePosition",
        "title": "MeshDistanceMaterial.referencePosition: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.referencePosition",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshDistanceMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial.skinning",
      },
    ],
    "title": "MeshDistanceMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshDistanceMaterial",
  },
  Object {
    "description": "A material for non-shiny surfaces, without specular highlights.
 The material uses a non-physically based [Lambertian](https://en.wikipedia.org/wiki/Lambertian_reflectance) model for calculating reflectance. This can simulate some surfaces (such as untreated wood or stone) well, but cannot simulate shiny surfaces with specular highlights (such as varnished wood).
 Shading is calculated using a [Gouraud](https://en.wikipedia.org/wiki/Gouraud_shading) shading model. This calculates shading per vertex (i.e. in the [vertex shader](https://en.wikipedia.org/wiki/Shader#Vertex_shaders)) and interpolates the results over the polygon's faces.
 Due to the simplicity of the reflectance and illumination models, performance will be greater when using this material over the MeshPhongMaterial, MeshStandardMaterial or MeshPhysicalMaterial, at the cost of some graphical accuracy.",
    "name": "MeshLambertMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshLambertMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.alphaMap",
      },
      Object {
        "description": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs.",
        "name": "aoMap",
        "title": "MeshLambertMaterial.aoMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.aoMap",
      },
      Object {
        "description": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect.",
        "name": "aoMapIntensity",
        "title": "MeshLambertMaterial.aoMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.aoMapIntensity",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "MeshLambertMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.color",
      },
      Object {
        "description": "How to combine the result of the surface's color with the environment map, if any.
 Options are THREE.Multiply (default), THREE.MixOperation, THREE.AddOperation. If mix is chosen, the .reflectivity is used to blend between the two colors.",
        "name": "combine",
        "title": "MeshLambertMaterial.combine: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.combine",
      },
      Object {
        "description": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black.",
        "name": "emissive",
        "title": "MeshLambertMaterial.emissive: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.emissive",
      },
      Object {
        "description": "Set emissive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black.",
        "name": "emissiveMap",
        "title": "MeshLambertMaterial.emissiveMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.emissiveMap",
      },
      Object {
        "description": "Intensity of the emissive light. Modulates the emissive color. Default is 1.",
        "name": "emissiveIntensity",
        "title": "MeshLambertMaterial.emissiveIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.emissiveIntensity",
      },
      Object {
        "description": "The environment map. Default is null.",
        "name": "envMap",
        "title": "MeshLambertMaterial.envMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.envMap",
      },
      Object {
        "description": "The light map. Default is null. The lightMap requires a second set of UVs.",
        "name": "lightMap",
        "title": "MeshLambertMaterial.lightMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.lightMap",
      },
      Object {
        "description": "Intensity of the baked light. Default is 1.",
        "name": "lightMapIntensity",
        "title": "MeshLambertMaterial.lightMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.lightMapIntensity",
      },
      Object {
        "description": "The color map. Default is null.",
        "name": "map",
        "title": "MeshLambertMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.map",
      },
      Object {
        "description": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the geometry to the shader. Default is *false*.",
        "name": "morphNormals",
        "title": "MeshLambertMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshLambertMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.morphTargets",
      },
      Object {
        "description": "How much the environment map affects the surface; also see .combine.",
        "name": "reflectivity",
        "title": "MeshLambertMaterial.reflectivity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.reflectivity",
      },
      Object {
        "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes THREE.CubeRefractionMapping and THREE.EquirectangularRefractionMapping. The refraction ratio should not exceed 1. Default is *0.98*.",
        "name": "refractionRatio",
        "title": "MeshLambertMaterial.refractionRatio: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.refractionRatio",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshLambertMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.skinning",
      },
      Object {
        "description": "Specular map used by the material. Default is null.",
        "name": "specularMap",
        "title": "MeshLambertMaterial.specularMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.specularMap",
      },
      Object {
        "description": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons).",
        "name": "wireframe",
        "title": "MeshLambertMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.wireframe",
      },
      Object {
        "description": "Define appearance of line ends. Possible values are \\"butt\\", \\"round\\" and \\"square\\". Default is 'round'.
 This corresponds to the [2D Canvas lineCap](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinecap",
        "title": "MeshLambertMaterial.wireframeLinecap: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.wireframeLinecap",
      },
      Object {
        "description": "Define appearance of line joints. Possible values are \\"round\\", \\"bevel\\" and \\"miter\\". Default is 'round'.
 This corresponds to the [2D Canvas lineJoin](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinejoin",
        "title": "MeshLambertMaterial.wireframeLinejoin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.wireframeLinejoin",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshLambertMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshLambertMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshLambertMaterial",
  },
  Object {
    "description": "MeshMatcapMaterial is defined by a MatCap (or Lit Sphere) texture, which encodes the material color and shading.
 MeshMatcapMaterial does not respond to lights since the matcap image file encodes baked lighting. It will cast a shadow onto an object that receives shadows (and shadow clipping works), but it will not self-shadow or receive shadows.",
    "name": "MeshMatcapMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshMatcapMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.alphaMap",
      },
      Object {
        "description": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored.",
        "name": "bumpMap",
        "title": "MeshMatcapMaterial.bumpMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.bumpMap",
      },
      Object {
        "description": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1.",
        "name": "bumpScale",
        "title": "MeshMatcapMaterial.bumpScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.bumpScale",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "MeshMatcapMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.color",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshMatcapMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshMatcapMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshMatcapMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.displacementBias",
      },
      Object {
        "description": "Define whether the material is rendered with flat shading. Default is false.",
        "name": "flatShading",
        "title": "MeshMatcapMaterial.flatShading: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.flatShading",
      },
      Object {
        "description": "The color map. Default is null. The texture map color is modulated by the diffuse .color.",
        "name": "map",
        "title": "MeshMatcapMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.map",
      },
      Object {
        "description": "The matcap map. Default is null.",
        "name": "matcap",
        "title": "MeshMatcapMaterial.matcap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.matcap",
      },
      Object {
        "description": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the geometry to the shader. Default is *false*.",
        "name": "morphNormals",
        "title": "MeshMatcapMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshMatcapMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.morphTargets",
      },
      Object {
        "description": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting. In case the material has a normal map authored using the left handed convention, the y component of normalScale should be negated to compensate for the different handedness.",
        "name": "normalMap",
        "title": "MeshMatcapMaterial.normalMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.normalMap",
      },
      Object {
        "description": "The type of normal map.
 Options are THREE.TangentSpaceNormalMap (default), and THREE.ObjectSpaceNormalMap.",
        "name": "normalMapType",
        "title": "MeshMatcapMaterial.normalMapType: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.normalMapType",
      },
      Object {
        "description": "How much the normal map affects the material. Typical ranges are 0-1. Default is a Vector2 set to (1,1).",
        "name": "normalScale",
        "title": "MeshMatcapMaterial.normalScale: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.normalScale",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshMatcapMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial.skinning",
      },
    ],
    "title": "MeshMatcapMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshMatcapMaterial",
  },
  Object {
    "description": "A material that maps the normal vectors to RGB colors.",
    "name": "MeshNormalMaterial",
    "properties": Array [
      Object {
        "description": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored.",
        "name": "bumpMap",
        "title": "MeshNormalMaterial.bumpMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.bumpMap",
      },
      Object {
        "description": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1.",
        "name": "bumpScale",
        "title": "MeshNormalMaterial.bumpScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.bumpScale",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshNormalMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshNormalMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshNormalMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.displacementBias",
      },
      Object {
        "description": "Define whether the material is rendered with flat shading. Default is false.",
        "name": "flatShading",
        "title": "MeshNormalMaterial.flatShading: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.flatShading",
      },
      Object {
        "description": "Whether the material is affected by fog. Default is *false*.",
        "name": "fog",
        "title": "MeshNormalMaterial.fog: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.fog",
      },
      Object {
        "description": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the geometry to the shader. Default is *false*.",
        "name": "morphNormals",
        "title": "MeshNormalMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshNormalMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.morphTargets",
      },
      Object {
        "description": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting. In case the material has a normal map authored using the left handed convention, the y component of normalScale should be negated to compensate for the different handedness.",
        "name": "normalMap",
        "title": "MeshNormalMaterial.normalMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.normalMap",
      },
      Object {
        "description": "The type of normal map.
 Options are THREE.TangentSpaceNormalMap (default), and THREE.ObjectSpaceNormalMap.",
        "name": "normalMapType",
        "title": "MeshNormalMaterial.normalMapType: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.normalMapType",
      },
      Object {
        "description": "How much the normal map affects the material. Typical ranges are 0-1. Default is a Vector2 set to (1,1).",
        "name": "normalScale",
        "title": "MeshNormalMaterial.normalScale: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.normalScale",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshNormalMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.skinning",
      },
      Object {
        "description": "Render geometry as wireframe. Default is false (i.e. render as smooth shaded).",
        "name": "wireframe",
        "title": "MeshNormalMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.wireframe",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshNormalMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshNormalMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshNormalMaterial",
  },
  Object {
    "description": "A material for shiny surfaces with specular highlights.
 The material uses a non-physically based [Blinn-Phong](https://en.wikipedia.org/wiki/Blinn-Phong_shading_model) model for calculating reflectance. Unlike the Lambertian model used in the MeshLambertMaterial this can simulate shiny surfaces with specular highlights (such as varnished wood).
 Shading is calculated using a [Phong](https://en.wikipedia.org/wiki/Phong_shading) shading model. This calculates shading per pixel (i.e. in the [fragment shader](https://en.wikipedia.org/wiki/Shader#Pixel_shaders), AKA pixel shader) which gives more accurate results than the Gouraud model used by MeshLambertMaterial, at the cost of some performance. The MeshStandardMaterial and MeshPhysicalMaterial also use this shading model.
 Performance will generally be greater when using this material over the MeshStandardMaterial or MeshPhysicalMaterial, at the cost of some graphical accuracy.",
    "name": "MeshPhongMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshPhongMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.alphaMap",
      },
      Object {
        "description": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs.",
        "name": "aoMap",
        "title": "MeshPhongMaterial.aoMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.aoMap",
      },
      Object {
        "description": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect.",
        "name": "aoMapIntensity",
        "title": "MeshPhongMaterial.aoMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.aoMapIntensity",
      },
      Object {
        "description": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored.",
        "name": "bumpMap",
        "title": "MeshPhongMaterial.bumpMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.bumpMap",
      },
      Object {
        "description": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1.",
        "name": "bumpScale",
        "title": "MeshPhongMaterial.bumpScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.bumpScale",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "MeshPhongMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.color",
      },
      Object {
        "description": "How to combine the result of the surface's color with the environment map, if any.
 Options are THREE.Multiply (default), THREE.MixOperation, THREE.AddOperation. If mix is chosen, the .reflectivity is used to blend between the two colors.",
        "name": "combine",
        "title": "MeshPhongMaterial.combine: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.combine",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshPhongMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshPhongMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshPhongMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.displacementBias",
      },
      Object {
        "description": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black.",
        "name": "emissive",
        "title": "MeshPhongMaterial.emissive: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.emissive",
      },
      Object {
        "description": "Set emisssive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black.",
        "name": "emissiveMap",
        "title": "MeshPhongMaterial.emissiveMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.emissiveMap",
      },
      Object {
        "description": "Intensity of the emissive light. Modulates the emissive color. Default is 1.",
        "name": "emissiveIntensity",
        "title": "MeshPhongMaterial.emissiveIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.emissiveIntensity",
      },
      Object {
        "description": "The environment map. Default is null.",
        "name": "envMap",
        "title": "MeshPhongMaterial.envMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.envMap",
      },
      Object {
        "description": "Define whether the material is rendered with flat shading. Default is false.",
        "name": "flatShading",
        "title": "MeshPhongMaterial.flatShading: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.flatShading",
      },
      Object {
        "description": "The light map. Default is null. The lightMap requires a second set of UVs.",
        "name": "lightMap",
        "title": "MeshPhongMaterial.lightMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.lightMap",
      },
      Object {
        "description": "Intensity of the baked light. Default is 1.",
        "name": "lightMapIntensity",
        "title": "MeshPhongMaterial.lightMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.lightMapIntensity",
      },
      Object {
        "description": "The color map. Default is null. The texture map color is modulated by the diffuse .color.",
        "name": "map",
        "title": "MeshPhongMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.map",
      },
      Object {
        "description": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the geometry to the shader. Default is *false*.",
        "name": "morphNormals",
        "title": "MeshPhongMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshPhongMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.morphTargets",
      },
      Object {
        "description": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting. In case the material has a normal map authored using the left handed convention, the y component of normalScale should be negated to compensate for the different handedness.",
        "name": "normalMap",
        "title": "MeshPhongMaterial.normalMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.normalMap",
      },
      Object {
        "description": "The type of normal map.
 Options are THREE.TangentSpaceNormalMap (default), and THREE.ObjectSpaceNormalMap.",
        "name": "normalMapType",
        "title": "MeshPhongMaterial.normalMapType: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.normalMapType",
      },
      Object {
        "description": "How much the normal map affects the material. Typical ranges are 0-1. Default is a Vector2 set to (1,1).",
        "name": "normalScale",
        "title": "MeshPhongMaterial.normalScale: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.normalScale",
      },
      Object {
        "description": "How much the environment map affects the surface; also see .combine. The default value is 1 and the valid range is between 0 (no reflections) and 1 (full reflections).",
        "name": "reflectivity",
        "title": "MeshPhongMaterial.reflectivity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.reflectivity",
      },
      Object {
        "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes THREE.CubeRefractionMapping and THREE.EquirectangularRefractionMapping. The refraction ratio should not exceed 1. Default is *0.98*.",
        "name": "refractionRatio",
        "title": "MeshPhongMaterial.refractionRatio: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.refractionRatio",
      },
      Object {
        "description": "How shiny the .specular highlight is; a higher value gives a sharper highlight. Default is *30*.",
        "name": "shininess",
        "title": "MeshPhongMaterial.shininess: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.shininess",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshPhongMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.skinning",
      },
      Object {
        "description": "Specular color of the material. Default is a Color set to *0x111111* (very dark grey).
 This defines how shiny the material is and the color of its shine.",
        "name": "specular",
        "title": "MeshPhongMaterial.specular: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.specular",
      },
      Object {
        "description": "The specular map value affects both how much the specular surface highlight contributes and how much of the environment map affects the surface. Default is null.",
        "name": "specularMap",
        "title": "MeshPhongMaterial.specularMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.specularMap",
      },
      Object {
        "description": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons).",
        "name": "wireframe",
        "title": "MeshPhongMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.wireframe",
      },
      Object {
        "description": "Define appearance of line ends. Possible values are \\"butt\\", \\"round\\" and \\"square\\". Default is 'round'.
 This corresponds to the [2D Canvas lineCap](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinecap",
        "title": "MeshPhongMaterial.wireframeLinecap: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.wireframeLinecap",
      },
      Object {
        "description": "Define appearance of line joints. Possible values are \\"round\\", \\"bevel\\" and \\"miter\\". Default is 'round'.
 This corresponds to the [2D Canvas lineJoin](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinejoin",
        "title": "MeshPhongMaterial.wireframeLinejoin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.wireframeLinejoin",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshPhongMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshPhongMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshPhongMaterial",
  },
  Object {
    "description": "An extension of the MeshStandardMaterial, providing more advanced physically-based rendering properties:",
    "name": "MeshPhysicalMaterial",
    "properties": Array [
      Object {
        "description": "Represents the thickness of the clear coat layer, from *0.0* to *1.0*. Use clear coat related properties to enable multilayer materials that have a thin translucent layer over the base layer. Default is *0.0*.",
        "name": "clearcoat",
        "title": "MeshPhysicalMaterial.clearcoat: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.clearcoat",
      },
      Object {
        "description": "The red channel of this texture is multiplied against .clearcoat, for per-pixel control over a coating's thickness. Default is *null*.",
        "name": "clearcoatMap",
        "title": "MeshPhysicalMaterial.clearcoatMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.clearcoatMap",
      },
      Object {
        "description": "Can be used to enable independent normals for the clear coat layer. Default is *null*.",
        "name": "clearcoatNormalMap",
        "title": "MeshPhysicalMaterial.clearcoatNormalMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.clearcoatNormalMap",
      },
      Object {
        "description": "How much .clearcoatNormalMap affects the clear coat layer, from *(0,0)* to *(1,1)*. Default is *(1,1)*.",
        "name": "clearcoatNormalScale",
        "title": "MeshPhysicalMaterial.clearcoatNormalScale: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.clearcoatNormalScale",
      },
      Object {
        "description": "Roughness of the clear coat layer, from *0.0* to *1.0*. Default is *0.0*.",
        "name": "clearcoatRoughness",
        "title": "MeshPhysicalMaterial.clearcoatRoughness: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.clearcoatRoughness",
      },
      Object {
        "description": "The green channel of this texture is multiplied against .clearcoatRoughness, for per-pixel control over a coating's roughness. Default is *null*.",
        "name": "clearcoatRoughnessMap",
        "title": "MeshPhysicalMaterial.clearcoatRoughnessMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.clearcoatRoughnessMap",
      },
      Object {
        "description": "An object of the form: \`\`\` { 'STANDARD': '' 'PHYSICAL': '', }; \`\`\` This is used by the WebGLRenderer for selecting shaders.",
        "name": "defines",
        "title": "MeshPhysicalMaterial.defines: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.defines",
      },
      Object {
        "description": "Index-of-refraction for non-metallic materials, from *1.0* to *2.333*. Default is *1.5*.",
        "name": "ior",
        "title": "MeshPhysicalMaterial.ior: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.ior",
      },
      Object {
        "description": "Degree of reflectivity, from *0.0* to *1.0*. Default is *0.5*, which corresponds to an index-of-refraction of 1.5.
 This models the reflectivity of non-metallic materials. It has no effect when metalness is *1.0*",
        "name": "reflectivity",
        "title": "MeshPhysicalMaterial.reflectivity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.reflectivity",
      },
      Object {
        "description": "If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. *null* by default.",
        "name": "sheen",
        "title": "MeshPhysicalMaterial.sheen: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.sheen",
      },
      Object {
        "description": "Degree of transmission (or optical transparency), from *0.0* to *1.0*. Default is *0.0*.
 Thin, transparent or semitransparent, plastic or glass materials remain largely reflective even if they are fully transmissive. The transmission property can be used to model these materials.
 When transmission is non-zero, opacity should be set to *1*.",
        "name": "transmission",
        "title": "MeshPhysicalMaterial.transmission: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.transmission",
      },
      Object {
        "description": "The red channel of this texture is multiplied against .transmission, for per-pixel control over optical transparency. Default is *null*.",
        "name": "transmissionMap",
        "title": "MeshPhysicalMaterial.transmissionMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial.transmissionMap",
      },
    ],
    "title": "MeshPhysicalMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial",
  },
  Object {
    "description": "A standard physically based material, using Metallic-Roughness workflow.
 Physically based rendering (PBR) has recently become the standard in many 3D applications, such as [Unity](https://blogs.unity3d.com/2014/10/29/physically-based-shading-in-unity-5-a-primer/), [Unreal](https://docs.unrealengine.com/latest/INT/Engine/Rendering/Materials/PhysicallyBased/) and [3D Studio Max](http://area.autodesk.com/blogs/the-3ds-max-blog/what039s-new-for-rendering-in-3ds-max-2017).
 This approach differs from older approaches in that instead of using approximations for the way in which light interacts with a surface, a physically correct model is used. The idea is that, instead of tweaking materials to look good under specific lighting, a material can be created that will react 'correctly' under all lighting scenarios.
 In practice this gives a more accurate and realistic looking result than the MeshLambertMaterial or MeshPhongMaterial, at the cost of being somewhat more computationally expensive.
 Shading is calculated in the same way as for the MeshPhongMaterial, using a [Phong](https://en.wikipedia.org/wiki/Phong_shading) shading model. This calculates shading per pixel (i.e. in the [fragment shader](https://en.wikipedia.org/wiki/Shader#Pixel_shaders), AKA pixel shader) which gives more accurate results than the Gouraud model used by MeshLambertMaterial, at the cost of some performance.
 Note that for best results you should always specify an environment map when using this material.
 For a non-technical introduction to the concept of PBR and how to set up a PBR material, check out these articles by the people at [marmoset](https://www.marmoset.co):",
    "name": "MeshStandardMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshStandardMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap",
      },
      Object {
        "description": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs.",
        "name": "aoMap",
        "title": "MeshStandardMaterial.aoMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.aoMap",
      },
      Object {
        "description": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect.",
        "name": "aoMapIntensity",
        "title": "MeshStandardMaterial.aoMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.aoMapIntensity",
      },
      Object {
        "description": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored.",
        "name": "bumpMap",
        "title": "MeshStandardMaterial.bumpMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap",
      },
      Object {
        "description": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1.",
        "name": "bumpScale",
        "title": "MeshStandardMaterial.bumpScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpScale",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "MeshStandardMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color",
      },
      Object {
        "description": "An object of the form: \`\`\` { 'STANDARD': '' }; \`\`\` This is used by the WebGLRenderer for selecting shaders.",
        "name": "defines",
        "title": "MeshStandardMaterial.defines: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.defines",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshStandardMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshStandardMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshStandardMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementBias",
      },
      Object {
        "description": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black.",
        "name": "emissive",
        "title": "MeshStandardMaterial.emissive: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive",
      },
      Object {
        "description": "Set emisssive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black.",
        "name": "emissiveMap",
        "title": "MeshStandardMaterial.emissiveMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap",
      },
      Object {
        "description": "Intensity of the emissive light. Modulates the emissive color. Default is 1.",
        "name": "emissiveIntensity",
        "title": "MeshStandardMaterial.emissiveIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity",
      },
      Object {
        "description": "The environment map. To ensure a physically correct rendering, you should only add environment maps which were preprocessed by PMREMGenerator. Default is null.",
        "name": "envMap",
        "title": "MeshStandardMaterial.envMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.envMap",
      },
      Object {
        "description": "Scales the effect of the environment map by multiplying its color.",
        "name": "envMapIntensity",
        "title": "MeshStandardMaterial.envMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.envMapIntensity",
      },
      Object {
        "description": "Define whether the material is rendered with flat shading. Default is false.",
        "name": "flatShading",
        "title": "MeshStandardMaterial.flatShading: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.flatShading",
      },
      Object {
        "description": "The light map. Default is null. The lightMap requires a second set of UVs.",
        "name": "lightMap",
        "title": "MeshStandardMaterial.lightMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.lightMap",
      },
      Object {
        "description": "Intensity of the baked light. Default is 1.",
        "name": "lightMapIntensity",
        "title": "MeshStandardMaterial.lightMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.lightMapIntensity",
      },
      Object {
        "description": "The color map. Default is null. The texture map color is modulated by the diffuse .color.",
        "name": "map",
        "title": "MeshStandardMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map",
      },
      Object {
        "description": "How much the material is like a metal. Non-metallic materials such as wood or stone use 0.0, metallic use 1.0, with nothing (usually) in between. Default is 0.0. A value between 0.0 and 1.0 could be used for a rusty metal look. If metalnessMap is also provided, both values are multiplied.",
        "name": "metalness",
        "title": "MeshStandardMaterial.metalness: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness",
      },
      Object {
        "description": "The blue channel of this texture is used to alter the metalness of the material.",
        "name": "metalnessMap",
        "title": "MeshStandardMaterial.metalnessMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap",
      },
      Object {
        "description": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the geometry to the shader. Default is *false*.",
        "name": "morphNormals",
        "title": "MeshStandardMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshStandardMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.morphTargets",
      },
      Object {
        "description": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting. In case the material has a normal map authored using the left handed convention, the y component of normalScale should be negated to compensate for the different handedness.",
        "name": "normalMap",
        "title": "MeshStandardMaterial.normalMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap",
      },
      Object {
        "description": "The type of normal map.
 Options are THREE.TangentSpaceNormalMap (default), and THREE.ObjectSpaceNormalMap.",
        "name": "normalMapType",
        "title": "MeshStandardMaterial.normalMapType: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMapType",
      },
      Object {
        "description": "How much the normal map affects the material. Typical ranges are 0-1. Default is a Vector2 set to (1,1).",
        "name": "normalScale",
        "title": "MeshStandardMaterial.normalScale: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalScale",
      },
      Object {
        "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes THREE.CubeRefractionMapping and THREE.EquirectangularRefractionMapping. The refraction ratio should not exceed 1. Default is *0.98*.",
        "name": "refractionRatio",
        "title": "MeshStandardMaterial.refractionRatio: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio",
      },
      Object {
        "description": "How rough the material appears. 0.0 means a smooth mirror reflection, 1.0 means fully diffuse. Default is 1.0. If roughnessMap is also provided, both values are multiplied.",
        "name": "roughness",
        "title": "MeshStandardMaterial.roughness: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness",
      },
      Object {
        "description": "The green channel of this texture is used to alter the roughness of the material.",
        "name": "roughnessMap",
        "title": "MeshStandardMaterial.roughnessMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshStandardMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.skinning",
      },
      Object {
        "description": "Defines whether precomputed vertex tangents, which must be provided in a vec4 \\"tangent\\" attribute, are used. When disabled, tangents are derived automatically. Using precomputed tangents will give more accurate normal map details in some cases, such as with mirrored UVs. Default is false.",
        "name": "vertexTangents",
        "title": "MeshStandardMaterial.vertexTangents: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.vertexTangents",
      },
      Object {
        "description": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons).",
        "name": "wireframe",
        "title": "MeshStandardMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe",
      },
      Object {
        "description": "Define appearance of line ends. Possible values are \\"butt\\", \\"round\\" and \\"square\\". Default is 'round'.
 This corresponds to the [2D Canvas lineCap](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinecap",
        "title": "MeshStandardMaterial.wireframeLinecap: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframeLinecap",
      },
      Object {
        "description": "Define appearance of line joints. Possible values are \\"round\\", \\"bevel\\" and \\"miter\\". Default is 'round'.
 This corresponds to the [2D Canvas lineJoin](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinejoin",
        "title": "MeshStandardMaterial.wireframeLinejoin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframeLinejoin",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshStandardMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshStandardMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshStandardMaterial",
  },
  Object {
    "description": "A material implementing toon shading.",
    "name": "MeshToonMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "MeshToonMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.alphaMap",
      },
      Object {
        "description": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs.",
        "name": "aoMap",
        "title": "MeshToonMaterial.aoMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.aoMap",
      },
      Object {
        "description": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect.",
        "name": "aoMapIntensity",
        "title": "MeshToonMaterial.aoMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.aoMapIntensity",
      },
      Object {
        "description": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored.",
        "name": "bumpMap",
        "title": "MeshToonMaterial.bumpMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.bumpMap",
      },
      Object {
        "description": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1.",
        "name": "bumpScale",
        "title": "MeshToonMaterial.bumpScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.bumpScale",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "MeshToonMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.color",
      },
      Object {
        "description": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh.",
        "name": "displacementMap",
        "title": "MeshToonMaterial.displacementMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.displacementMap",
      },
      Object {
        "description": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1.",
        "name": "displacementScale",
        "title": "MeshToonMaterial.displacementScale: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.displacementScale",
      },
      Object {
        "description": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0.",
        "name": "displacementBias",
        "title": "MeshToonMaterial.displacementBias: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.displacementBias",
      },
      Object {
        "description": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black.",
        "name": "emissive",
        "title": "MeshToonMaterial.emissive: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.emissive",
      },
      Object {
        "description": "Set emisssive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black.",
        "name": "emissiveMap",
        "title": "MeshToonMaterial.emissiveMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.emissiveMap",
      },
      Object {
        "description": "Intensity of the emissive light. Modulates the emissive color. Default is 1.",
        "name": "emissiveIntensity",
        "title": "MeshToonMaterial.emissiveIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.emissiveIntensity",
      },
      Object {
        "description": "Gradient map for toon shading. It's required to set Texture.minFilter and Texture.magFilter to THREE.NearestFilter when using this type of texture. Default is *null*.",
        "name": "gradientMap",
        "title": "MeshToonMaterial.gradientMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.gradientMap",
      },
      Object {
        "description": "The light map. Default is null. The lightMap requires a second set of UVs.",
        "name": "lightMap",
        "title": "MeshToonMaterial.lightMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.lightMap",
      },
      Object {
        "description": "Intensity of the baked light. Default is 1.",
        "name": "lightMapIntensity",
        "title": "MeshToonMaterial.lightMapIntensity: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.lightMapIntensity",
      },
      Object {
        "description": "The color map. Default is null. The texture map color is modulated by the diffuse .color.",
        "name": "map",
        "title": "MeshToonMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.map",
      },
      Object {
        "description": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the geometry to the shader. Default is *false*.",
        "name": "morphNormals",
        "title": "MeshToonMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "MeshToonMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.morphTargets",
      },
      Object {
        "description": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting. In case the material has a normal map authored using the left handed convention, the y component of normalScale should be negated to compensate for the different handedness.",
        "name": "normalMap",
        "title": "MeshToonMaterial.normalMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.normalMap",
      },
      Object {
        "description": "The type of normal map.
 Options are THREE.TangentSpaceNormalMap (default), and THREE.ObjectSpaceNormalMap.",
        "name": "normalMapType",
        "title": "MeshToonMaterial.normalMapType: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.normalMapType",
      },
      Object {
        "description": "How much the normal map affects the material. Typical ranges are 0-1. Default is a Vector2 set to (1,1).",
        "name": "normalScale",
        "title": "MeshToonMaterial.normalScale: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.normalScale",
      },
      Object {
        "description": "Define whether the material uses skinning. Default is false.",
        "name": "skinning",
        "title": "MeshToonMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.skinning",
      },
      Object {
        "description": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons).",
        "name": "wireframe",
        "title": "MeshToonMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.wireframe",
      },
      Object {
        "description": "Define appearance of line ends. Possible values are \\"butt\\", \\"round\\" and \\"square\\". Default is 'round'.
 This corresponds to the [2D Canvas lineCap](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinecap",
        "title": "MeshToonMaterial.wireframeLinecap: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.wireframeLinecap",
      },
      Object {
        "description": "Define appearance of line joints. Possible values are \\"round\\", \\"bevel\\" and \\"miter\\". Default is 'round'.
 This corresponds to the [2D Canvas lineJoin](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineJoin) property and it is ignored by the WebGL renderer.",
        "name": "wireframeLinejoin",
        "title": "MeshToonMaterial.wireframeLinejoin: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.wireframeLinejoin",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "MeshToonMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial.wireframeLinewidth",
      },
    ],
    "title": "MeshToonMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/MeshToonMaterial",
  },
  Object {
    "description": "The default material used by Points.",
    "name": "PointsMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "PointsMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial.alphaMap",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff).",
        "name": "color",
        "title": "PointsMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial.color",
      },
      Object {
        "description": "Sets the color of the points using data from a Texture.",
        "name": "map",
        "title": "PointsMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial.map",
      },
      Object {
        "description": "Define whether the material uses morphTargets. Default is false.",
        "name": "morphTargets",
        "title": "PointsMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial.morphTargets",
      },
      Object {
        "description": "Sets the size of the points. Default is 1.0.
 Will be capped if it exceeds the hardware dependent parameter [gl.ALIASED_POINT_SIZE_RANGE](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter).",
        "name": "size",
        "title": "PointsMaterial.size: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial.size",
      },
      Object {
        "description": "Specify whether points' size is attenuated by the camera depth. (Perspective camera only.) Default is true.",
        "name": "sizeAttenuation",
        "title": "PointsMaterial.sizeAttenuation: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial.sizeAttenuation",
      },
    ],
    "title": "PointsMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/PointsMaterial",
  },
  Object {
    "description": "This class works just like ShaderMaterial, except that definitions of built-in uniforms and attributes are not automatically prepended to the GLSL shader code.",
    "name": "RawShaderMaterial",
    "properties": Array [],
    "title": "RawShaderMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/RawShaderMaterial",
  },
  Object {
    "description": "A material rendered with custom shaders. A shader is a small program written in [GLSL](https://www.khronos.org/files/opengles_shading_language.pdf) that runs on the GPU. You may want to use a custom shader if you need to:",
    "name": "ShaderMaterial",
    "properties": Array [
      Object {
        "description": "Defines whether this material supports clipping; true to let the renderer pass the clippingPlanes uniform. Default is false.",
        "name": "clipping",
        "title": "ShaderMaterial.clipping: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.clipping",
      },
      Object {
        "description": "When the rendered geometry doesn't include these attributes but the material does, these default values will be passed to the shaders. This avoids errors when buffer data is missing. \`\`\` this.defaultAttributeValues = { 'color': [ 0, 0 , 'uv2': [ 0, 0 ] }; \`\`\`",
        "name": "defaultAttributeValues",
        "title": "ShaderMaterial.defaultAttributeValues: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.defaultAttributeValues",
      },
      Object {
        "description": "Defines custom constants using *#define* directives within the GLSL code for both the vertex shader and the fragment shader; each key/value pair yields another directive: \`\`\` defines: { FOO: 15, BAR: true } \`\`\` yields the lines \`\`\` #define FOO 15 #define BAR true \`\`\` in the GLSL code.",
        "name": "defines",
        "title": "ShaderMaterial.defines: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.defines",
      },
      Object {
        "description": "An object with the following properties: \`\`\` this.extensions = { derivatives: false, // set to use derivatives fragDepth: false, // set to use fragment depth values drawBuffers: false, // set to use draw buffers shaderTextureLOD: false // set to use shader texture LOD }; \`\`\`",
        "name": "extensions",
        "title": "ShaderMaterial.extensions: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.extensions",
      },
      Object {
        "description": "Define whether the material color is affected by global fog settings; true to pass fog uniforms to the shader. Default is false.",
        "name": "fog",
        "title": "ShaderMaterial.fog: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.fog",
      },
      Object {
        "description": "Fragment shader GLSL code. This is the actual code for the shader. In the example above, the *vertexShader* and *fragmentShader* code is extracted from the DOM; it could be passed as a string directly or loaded via AJAX instead.",
        "name": "fragmentShader",
        "title": "ShaderMaterial.fragmentShader: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.fragmentShader",
      },
      Object {
        "description": "Defines the GLSL version of custom shader code. Only relevant for WebGL 2 in order to define whether to specify GLSL 3.0 or not. Valid values are *THREE.GLSL1* or *THREE.GLSL3*. Default is *null*.",
        "name": "glslVersion",
        "title": "ShaderMaterial.glslVersion: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.glslVersion",
      },
      Object {
        "description": "If set, this calls [gl.bindAttribLocation](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation) to bind a generic vertex index to an attribute variable. Default is undefined.",
        "name": "index0AttributeName",
        "title": "ShaderMaterial.index0AttributeName: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.index0AttributeName",
      },
      Object {
        "description": "Defines whether this material uses lighting; true to pass uniform data related to lighting to this shader. Default is false.",
        "name": "lights",
        "title": "ShaderMaterial.lights: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.lights",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "linewidth",
        "title": "ShaderMaterial.linewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.linewidth",
      },
      Object {
        "description": "When set to true, morph target attributes are available in the vertex shader. Default is *false*.",
        "name": "morphTargets",
        "title": "ShaderMaterial.morphTargets: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.morphTargets",
      },
      Object {
        "description": "When set to true, morph normal attributes are available in the vertex shader. Default is *false*.",
        "name": "morphNormals",
        "title": "ShaderMaterial.morphNormals: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.morphNormals",
      },
      Object {
        "description": "Define whether the material is rendered with flat shading. Default is false.",
        "name": "flatShading",
        "title": "ShaderMaterial.flatShading: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.flatShading",
      },
      Object {
        "description": "Define whether the material uses skinning; true to pass skinning attributes to the shader. Default is false.",
        "name": "skinning",
        "title": "ShaderMaterial.skinning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.skinning",
      },
      Object {
        "description": "An object of the form: \`\`\` { \\"uniform1\\": { value: 1.0 }, \\"uniform2\\": { value: 2 } } \`\`\` specifying the uniforms to be passed to the shader code; keys are uniform names, values are definitions of the form \`\`\` { value: 1.0 } \`\`\` where *value* is the value of the uniform. Names must match the name of the uniform, as defined in the GLSL code. Note that uniforms are refreshed on every frame, so updating the value of the uniform will immediately update the value available to the GLSL code.",
        "name": "uniforms",
        "title": "ShaderMaterial.uniforms: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniforms",
      },
      Object {
        "description": "Can be used to force a uniform update while changing uniforms in Object3D.onBeforeRender(). Default is *false*.",
        "name": "uniformsNeedUpdate",
        "title": "ShaderMaterial.uniformsNeedUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniformsNeedUpdate",
      },
      Object {
        "description": "Defines whether vertex coloring is used. Default is *false*.",
        "name": "vertexColors",
        "title": "ShaderMaterial.vertexColors: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.vertexColors",
      },
      Object {
        "description": "Vertex shader GLSL code. This is the actual code for the shader. In the example above, the *vertexShader* and *fragmentShader* code is extracted from the DOM; it could be passed as a string directly or loaded via AJAX instead.",
        "name": "vertexShader",
        "title": "ShaderMaterial.vertexShader: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.vertexShader",
      },
      Object {
        "description": "Render geometry as wireframe (using GL_LINES instead of GL_TRIANGLES). Default is false (i.e. render as flat polygons).",
        "name": "wireframe",
        "title": "ShaderMaterial.wireframe: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.wireframe",
      },
      Object {
        "description": "Controls wireframe thickness. Default is 1.
 Due to limitations of the [OpenGL Core Profile](https://www.khronos.org/registry/OpenGL/specs/gl/glspec46.core.pdf) with the WebGL renderer on most platforms linewidth will always be 1 regardless of the set value.",
        "name": "wireframeLinewidth",
        "title": "ShaderMaterial.wireframeLinewidth: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.wireframeLinewidth",
      },
      Object {
        "description": "Generates a shallow copy of this material. Note that the vertexShader and fragmentShader are copied *by reference*, as are the definitions of the *attributes*; this means that clones of the material will share the same compiled WebGLProgram. However, the *uniforms* are copied *by value*, which allows you to have different sets of uniforms for different copies of the material.",
        "name": "clone",
        "title": "ShaderMaterial.clone() this: ShaderMaterial: ShaderMaterial",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial.clone",
      },
    ],
    "title": "ShaderMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/ShaderMaterial",
  },
  Object {
    "description": "This material can receive shadows, but otherwise is completely transparent.",
    "name": "ShadowMaterial",
    "properties": Array [
      Object {
        "description": "Defines whether this material is transparent. Default is *true*.",
        "name": "transparent",
        "title": "ShadowMaterial.transparent: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/ShadowMaterial.transparent",
      },
    ],
    "title": "ShadowMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/ShadowMaterial",
  },
  Object {
    "description": "A material for a use with a Sprite.",
    "name": "SpriteMaterial",
    "properties": Array [
      Object {
        "description": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null.
 Only the color of the texture is used, ignoring the alpha channel if one exists. For RGB and RGBA textures, the WebGL renderer will use the green channel when sampling this texture due to the extra bit of precision provided for green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and luminance/alpha textures will also still work as expected.",
        "name": "alphaMap",
        "title": "SpriteMaterial.alphaMap: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/SpriteMaterial.alphaMap",
      },
      Object {
        "description": "Color of the material, by default set to white (0xffffff). The .map is mutiplied by the color.",
        "name": "color",
        "title": "SpriteMaterial.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/SpriteMaterial.color",
      },
      Object {
        "description": "The texture map. Default is null.",
        "name": "map",
        "title": "SpriteMaterial.map: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/SpriteMaterial.map",
      },
      Object {
        "description": "The rotation of the sprite in radians. Default is 0.",
        "name": "rotation",
        "title": "SpriteMaterial.rotation: Radians",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/SpriteMaterial.rotation",
      },
      Object {
        "description": "Whether the size of the sprite is attenuated by the camera depth. (Perspective camera only.) Default is *true*.",
        "name": "sizeAttenuation",
        "title": "SpriteMaterial.sizeAttenuation: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/materials/SpriteMaterial.sizeAttenuation",
      },
    ],
    "title": "SpriteMaterial( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/materials/SpriteMaterial",
  },
  Object {
    "description": "Represents an axis-aligned bounding box (AABB) in 2D space.",
    "name": "Box2",
    "properties": Array [
      Object {
        "description": "Vector2 representing the lower (x, y) boundary of the box.
 Default is ( + Infinity, + Infinity ).",
        "name": "min",
        "title": "Box2.min: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Box2.min",
      },
      Object {
        "description": "Vector2 representing the lower upper (x, y) boundary of the box.
 Default is ( - Infinity, - Infinity ).",
        "name": "max",
        "title": "Box2.max: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Box2.max",
      },
      Object {
        "description": "point - Vector2 to clamp. 
 target â€” the result will be copied into this Vector2.
 [Clamps](https://en.wikipedia.org/wiki/Clamping_(graphics)) the point within the bounds of this box.",
        "name": "clampPoint",
        "title": "Box2.clampPoint( point: Vector2, target: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.clampPoint",
      },
      Object {
        "description": "Returns a new Box2 with the same min and max as this one.",
        "name": "clone",
        "title": "Box2.clone(): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.clone",
      },
      Object {
        "description": "box - Box2 to test for inclusion.
 Returns true if this box includes the entirety of box. If this and box are identical, 
 this function also returns true.",
        "name": "containsBox",
        "title": "Box2.containsBox( box: Box2 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.containsBox",
      },
      Object {
        "description": "point - Vector2 to check for inclusion.
 Returns true if the specified point lies within or on the boundaries of this box.",
        "name": "containsPoint",
        "title": "Box2.containsPoint( point: Vector2 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.containsPoint",
      },
      Object {
        "description": "Copies the min and max from box to this box.",
        "name": "copy",
        "title": "Box2.copy( box: Box2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.copy",
      },
      Object {
        "description": "point - Vector2 to measure distance to.
 Returns the distance from any edge of this box to the specified point. If the point lies inside of this box, the distance will be 0.",
        "name": "distanceToPoint",
        "title": "Box2.distanceToPoint( point: Vector2 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.distanceToPoint",
      },
      Object {
        "description": "box - Box to compare with this one.
 Returns true if this box and box share the same lower and upper bounds.",
        "name": "equals",
        "title": "Box2.equals( box: Box2 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.equals",
      },
      Object {
        "description": "point - Vector2 that should be included in the box.
 Expands the boundaries of this box to include point.",
        "name": "expandByPoint",
        "title": "Box2.expandByPoint( point: Vector2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.expandByPoint",
      },
      Object {
        "description": "scalar - Distance to expand the box by.
 Expands each dimension of the box by scalar. If negative, the dimensions of the box will be contracted.",
        "name": "expandByScalar",
        "title": "Box2.expandByScalar( scalar: Float ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.expandByScalar",
      },
      Object {
        "description": "vector - Vector2 to expand the box by.
 Expands this box equilaterally by vector. The width of this box will be expanded by the x component of vector in both directions. The height of this box will be expanded by the y component of vector in both directions.",
        "name": "expandByVector",
        "title": "Box2.expandByVector( vector: Vector2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.expandByVector",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector2.
 Returns the center point of the box as a Vector2.",
        "name": "getCenter",
        "title": "Box2.getCenter( target: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.getCenter",
      },
      Object {
        "description": "point - Vector2.
 target â€” the result will be copied into this Vector2.
 Returns a point as a proportion of this box's width and height.",
        "name": "getParameter",
        "title": "Box2.getParameter( point: Vector2, target: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.getParameter",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector2.
 Returns the width and height of this box.",
        "name": "getSize",
        "title": "Box2.getSize( target: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.getSize",
      },
      Object {
        "description": "box - Box to intersect with.
 Returns the intersection of this and box, setting the upper bound of this box to the lesser of the two boxes' upper bounds and the lower bound of this box to the greater of the two boxes' lower bounds.",
        "name": "intersect",
        "title": "Box2.intersect( box: Box2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.intersect",
      },
      Object {
        "description": "box - Box to check for intersection against.
 Determines whether or not this box intersects box.",
        "name": "intersectsBox",
        "title": "Box2.intersectsBox( box: Box2 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.intersectsBox",
      },
      Object {
        "description": "Returns true if this box includes zero points within its bounds.
 Note that a box with equal lower and upper bounds still includes one point, the one both bounds share.",
        "name": "isEmpty",
        "title": "Box2.isEmpty(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.isEmpty",
      },
      Object {
        "description": "Makes this box empty.",
        "name": "makeEmpty",
        "title": "Box2.makeEmpty(): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.makeEmpty",
      },
      Object {
        "description": "min - (required ) Vector2 representing the lower (x, y) boundary of the box. 
 max - (required) Vector2 representing the upper (x, y) boundary of the box. 
 Sets the lower and upper (x, y) boundaries of this box.
 Please note that this method only copies the values from the given objects.",
        "name": "set",
        "title": "Box2.set( min: Vector2, max: Vector2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.set",
      },
      Object {
        "description": "center - Desired center position of the box (Vector2). 
 size - Desired x and y dimensions of the box (Vector2).
 Centers this box on center and sets this box's width and height to the values specified in size.",
        "name": "setFromCenterAndSize",
        "title": "Box2.setFromCenterAndSize( center: Vector2, size: Vector2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.setFromCenterAndSize",
      },
      Object {
        "description": "points - Array of Vector2s that the resulting box will contain.
 Sets the upper and lower bounds of this box to include all of the points in points.",
        "name": "setFromPoints",
        "title": "Box2.setFromPoints( points: Array ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.setFromPoints",
      },
      Object {
        "description": "offset - Direction and distance of offset.
 Adds offset to both the upper and lower bounds of this box, effectively moving this box offset units in 2D space.",
        "name": "translate",
        "title": "Box2.translate( offset: Vector2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.translate",
      },
      Object {
        "description": "box - Box that will be unioned with this box.
 Unions this box with box, setting the upper bound of this box to the greater of the two boxes' upper bounds and the lower bound of this box to the lesser of the two boxes' lower bounds.",
        "name": "union",
        "title": "Box2.union( box: Box2 ): Box2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box2.union",
      },
    ],
    "title": "Box2( min: Vector2, max: Vector2 )",
    "url": "https://threejs.org/docs/#api/en/math/Box2",
  },
  Object {
    "description": "Represents an axis-aligned bounding box (AABB) in 3D space.",
    "name": "Box3",
    "properties": Array [
      Object {
        "description": "Vector3 representing the lower (x, y, z) boundary of the box.
 Default is ( + Infinity, + Infinity, + Infinity ).",
        "name": "min",
        "title": "Box3.min: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Box3.min",
      },
      Object {
        "description": "Vector3 representing the upper (x, y, z) boundary of the box.
 Default is ( - Infinity, - Infinity, - Infinity ).",
        "name": "max",
        "title": "Box3.max: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Box3.max",
      },
      Object {
        "description": "matrix - The Matrix4 to apply
 Transforms this Box3 with the supplied matrix.",
        "name": "applyMatrix4",
        "title": "Box3.applyMatrix4( matrix: Matrix4 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.applyMatrix4",
      },
      Object {
        "description": "point - Vector3 to clamp. 
 target â€” the result will be copied into this Vector3.
 [Clamps](https://en.wikipedia.org/wiki/Clamping_(graphics)) the point within the bounds of this box.",
        "name": "clampPoint",
        "title": "Box3.clampPoint( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.clampPoint",
      },
      Object {
        "description": "Returns a new Box3 with the same min and max as this one.",
        "name": "clone",
        "title": "Box3.clone(): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.clone",
      },
      Object {
        "description": "box - Box3 to test for inclusion.
 Returns true if this box includes the entirety of box. If this and box are identical, 
 this function also returns true.",
        "name": "containsBox",
        "title": "Box3.containsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.containsBox",
      },
      Object {
        "description": "point - Vector3 to check for inclusion.
 Returns true if the specified point lies within or on the boundaries of this box.",
        "name": "containsPoint",
        "title": "Box3.containsPoint( point: Vector3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.containsPoint",
      },
      Object {
        "description": "box - Box3 to copy.
 Copies the min and max from box to this box.",
        "name": "copy",
        "title": "Box3.copy( box: Box3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.copy",
      },
      Object {
        "description": "point - Vector3 to measure distance to.
 Returns the distance from any edge of this box to the specified point. If the point lies inside of this box, the distance will be 0.",
        "name": "distanceToPoint",
        "title": "Box3.distanceToPoint( point: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.distanceToPoint",
      },
      Object {
        "description": "box - Box to compare with this one.
 Returns true if this box and box share the same lower and upper bounds.",
        "name": "equals",
        "title": "Box3.equals( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.equals",
      },
      Object {
        "description": "object - Object3D to expand the box by.
 Expands the boundaries of this box to include object and its children, accounting for the object's, and children's, world transforms. The function may result in a larger box than strictly necessary.",
        "name": "expandByObject",
        "title": "Box3.expandByObject( object: Object3D ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.expandByObject",
      },
      Object {
        "description": "point - Vector3 that should be included in the box.
 Expands the boundaries of this box to include point.",
        "name": "expandByPoint",
        "title": "Box3.expandByPoint( point: Vector3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.expandByPoint",
      },
      Object {
        "description": "scalar - Distance to expand the box by.
 Expands each dimension of the box by scalar. If negative, the dimensions of the box will be contracted.",
        "name": "expandByScalar",
        "title": "Box3.expandByScalar( scalar: Float ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.expandByScalar",
      },
      Object {
        "description": "vector - Vector3 to expand the box by.
 Expands this box equilaterally by vector. The width of this box will be expanded by the x component of vector in both directions. The height of this box will be expanded by the y component of vector in both directions. The depth of this box will be expanded by the z component of *vector* in both directions.",
        "name": "expandByVector",
        "title": "Box3.expandByVector( vector: Vector3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.expandByVector",
      },
      Object {
        "description": "target â€” the result will be copied into this Sphere.
 Gets a Sphere that bounds the box.",
        "name": "getBoundingSphere",
        "title": "Box3.getBoundingSphere( target: Sphere ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.getBoundingSphere",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Returns the center point of the box as a Vector3.",
        "name": "getCenter",
        "title": "Box3.getCenter( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.getCenter",
      },
      Object {
        "description": "point - Vector3.
 target â€” the result will be copied into this Vector3.
 Returns a point as a proportion of this box's width and height.",
        "name": "getParameter",
        "title": "Box3.getParameter( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.getParameter",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Returns the width, height and depth of this box.",
        "name": "getSize",
        "title": "Box3.getSize( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.getSize",
      },
      Object {
        "description": "box - Box to intersect with.
 Computes the intersection of this and box, setting the upper bound of this box to the lesser of the two boxes' upper bounds and the lower bound of this box to the greater of the two boxes' lower bounds. If there's no overlap, makes this box empty.",
        "name": "intersect",
        "title": "Box3.intersect( box: Box3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.intersect",
      },
      Object {
        "description": "box - Box to check for intersection against.
 Determines whether or not this box intersects box.",
        "name": "intersectsBox",
        "title": "Box3.intersectsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.intersectsBox",
      },
      Object {
        "description": "plane - Plane to check for intersection against.
 Determines whether or not this box intersects plane.",
        "name": "intersectsPlane",
        "title": "Box3.intersectsPlane( plane: Plane ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.intersectsPlane",
      },
      Object {
        "description": "sphere - Sphere to check for intersection against.
 Determines whether or not this box intersects sphere.",
        "name": "intersectsSphere",
        "title": "Box3.intersectsSphere( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.intersectsSphere",
      },
      Object {
        "description": "triangle - Triangle to check for intersection against.
 Determines whether or not this box intersects triangle.",
        "name": "intersectsTriangle",
        "title": "Box3.intersectsTriangle( triangle: Triangle ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.intersectsTriangle",
      },
      Object {
        "description": "Returns true if this box includes zero points within its bounds.
 Note that a box with equal lower and upper bounds still includes one point, the one both bounds share.",
        "name": "isEmpty",
        "title": "Box3.isEmpty(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.isEmpty",
      },
      Object {
        "description": "Makes this box empty.",
        "name": "makeEmpty",
        "title": "Box3.makeEmpty(): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.makeEmpty",
      },
      Object {
        "description": "min - Vector3 representing the lower (x, y, z) boundary of the box.
 max - Vector3 representing the lower upper (x, y, z) boundary of the box.
 Sets the lower and upper (x, y, z) boundaries of this box.
 Please note that this method only copies the values from the given objects.",
        "name": "set",
        "title": "Box3.set( min: Vector3, max: Vector3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.set",
      },
      Object {
        "description": "array â€” An array of position data that the resulting box will envelop.
 Sets the upper and lower bounds of this box to include all of the data in *array*.",
        "name": "setFromArray",
        "title": "Box3.setFromArray( array: Array ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.setFromArray",
      },
      Object {
        "description": "attribute - A buffer attribute of position data that the resulting box will envelop.
 Sets the upper and lower bounds of this box to include all of the data in attribute.",
        "name": "setFromBufferAttribute",
        "title": "Box3.setFromBufferAttribute( attribute: BufferAttribute ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.setFromBufferAttribute",
      },
      Object {
        "description": "center, - Desired center position of the box. 
 size - Desired x, y and z dimensions of the box.
 Centers this box on center and sets this box's width, height and depth to the values specified 
 in size",
        "name": "setFromCenterAndSize",
        "title": "Box3.setFromCenterAndSize( center: Vector3, size: Vector3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.setFromCenterAndSize",
      },
      Object {
        "description": "object - Object3D to compute the bounding box of.
 Computes the world-axis-aligned bounding box of an Object3D (including its children), accounting for the object's, and children's, world transforms. The function may result in a larger box than strictly necessary.",
        "name": "setFromObject",
        "title": "Box3.setFromObject( object: Object3D ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.setFromObject",
      },
      Object {
        "description": "points - Array of Vector3s that the resulting box will contain.
 Sets the upper and lower bounds of this box to include all of the points in points.",
        "name": "setFromPoints",
        "title": "Box3.setFromPoints( points: Array ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.setFromPoints",
      },
      Object {
        "description": "offset - Direction and distance of offset.
 Adds offset to both the upper and lower bounds of this box, effectively moving this box offset units in 3D space.",
        "name": "translate",
        "title": "Box3.translate( offset: Vector3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.translate",
      },
      Object {
        "description": "box - Box that will be unioned with this box.
 Computes the union of this box and box, setting the upper bound of this box to the greater of the two boxes' upper bounds and the lower bound of this box to the lesser of the two boxes' lower bounds.",
        "name": "union",
        "title": "Box3.union( box: Box3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Box3.union",
      },
    ],
    "title": "Box3( min: Vector3, max: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/math/Box3",
  },
  Object {
    "description": "Class representing a color.",
    "name": "Color",
    "properties": Array [
      Object {
        "description": "Red channel value between 0 and 1. Default is 1.",
        "name": "r",
        "title": "Color.r: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Color.r",
      },
      Object {
        "description": "Green channel value between 0 and 1. Default is 1.",
        "name": "g",
        "title": "Color.g: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Color.g",
      },
      Object {
        "description": "Blue channel value between 0 and 1. Default is 1.",
        "name": "b",
        "title": "Color.b: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Color.b",
      },
      Object {
        "description": "Adds the RGB values of color to the RGB values of this color.",
        "name": "add",
        "title": "Color.add( color: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.add",
      },
      Object {
        "description": "Sets this color's RGB values to the sum of the RGB values of color1 and color2.",
        "name": "addColors",
        "title": "Color.addColors( color1: Color, color2: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.addColors",
      },
      Object {
        "description": "Adds s to the RGB values of this color.",
        "name": "addScalar",
        "title": "Color.addScalar( s: Number ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.addScalar",
      },
      Object {
        "description": "Returns a new Color with the same r, g and b values as this one.",
        "name": "clone",
        "title": "Color.clone(): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.clone",
      },
      Object {
        "description": "Copies the r, g and b parameters from color in to this color.",
        "name": "copy",
        "title": "Color.copy( color: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.copy",
      },
      Object {
        "description": "gammaFactor - (optional). Default is *2.0*.
 Converts this color from gamma space to linear space by taking r, g and b to the power of gammaFactor.",
        "name": "convertGammaToLinear",
        "title": "Color.convertGammaToLinear( gammaFactor: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.convertGammaToLinear",
      },
      Object {
        "description": "gammaFactor - (optional). Default is *2.0*.
 Converts this color from linear space to gamma space by taking r, g and b to the power of 1 / gammaFactor.",
        "name": "convertLinearToGamma",
        "title": "Color.convertLinearToGamma( gammaFactor: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.convertLinearToGamma",
      },
      Object {
        "description": "Converts this color from linear space to sRGB space.",
        "name": "convertLinearToSRGB",
        "title": "Color.convertLinearToSRGB(): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.convertLinearToSRGB",
      },
      Object {
        "description": "Converts this color from sRGB space to linear space.",
        "name": "convertSRGBToLinear",
        "title": "Color.convertSRGBToLinear(): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.convertSRGBToLinear",
      },
      Object {
        "description": "color â€” Color to copy.
 gammaFactor - (optional). Default is *2.0*.
 Copies the given color into this color, and then converts this color from gamma space to linear space by taking r, g and b to the power of gammaFactor.",
        "name": "copyGammaToLinear",
        "title": "Color.copyGammaToLinear( color: Color, gammaFactor: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.copyGammaToLinear",
      },
      Object {
        "description": "color â€” Color to copy.
 gammaFactor - (optional). Default is *2.0*.
 Copies the given color into this color, and then converts this color from linear space to gamma space by taking r, g and b to the power of 1 / gammaFactor.",
        "name": "copyLinearToGamma",
        "title": "Color.copyLinearToGamma( color: Color, gammaFactor: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.copyLinearToGamma",
      },
      Object {
        "description": "color â€” Color to copy.
 Copies the given color into this color, and then converts this color from linear space to sRGB space.",
        "name": "copyLinearToSRGB",
        "title": "Color.copyLinearToSRGB( color: Color] ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.copyLinearToSRGB",
      },
      Object {
        "description": "color â€” Color to copy.
 Copies the given color into this color, and then converts this color from sRGB space to linear space.",
        "name": "copySRGBToLinear",
        "title": "Color.copySRGBToLinear( color: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.copySRGBToLinear",
      },
      Object {
        "description": "Compares the RGB values of color with those of this object. Returns true if they are the same, false otherwise.",
        "name": "equals",
        "title": "Color.equals( color: Color ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.equals",
      },
      Object {
        "description": "array - Array of floats in the form r, g, b ].
 offset - An optional offset into the array.
 Sets this color's components based on an array formatted like r, g, b ].",
        "name": "fromArray",
        "title": "Color.fromArray( array: Array, offset: Integer ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.fromArray",
      },
      Object {
        "description": "attribute - the source attribute.
 index - index in the attribute.
 Sets this color's components from the attribute.",
        "name": "fromBufferAttribute",
        "title": "Color.fromBufferAttribute( attribute: BufferAttribute, index: Integer ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.fromBufferAttribute",
      },
      Object {
        "description": "Returns the hexadecimal value of this color.",
        "name": "getHex",
        "title": "Color.getHex(): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.getHex",
      },
      Object {
        "description": "Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').",
        "name": "getHexString",
        "title": "Color.getHexString(): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.getHexString",
      },
      Object {
        "description": "target â€” the result will be copied into this Object. Adds h, s and l keys to the object (if not already present).
 Convert this Color's r, g and b values to [HSL](https://en.wikipedia.org/wiki/HSL_and_HSV) format and returns an object of the form: \`\`\` { h: 0, s: 0, l: 0 } \`\`\`",
        "name": "getHSL",
        "title": "Color.getHSL( target: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.getHSL",
      },
      Object {
        "description": "Returns the value of this color as a CSS style string. Example: 'rgb(255,0,0)'.",
        "name": "getStyle",
        "title": "Color.getStyle(): String",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.getStyle",
      },
      Object {
        "description": "color - color to converge on.
 alpha - interpolation factor in the closed interval [0, 1].
 Linearly interpolates this color's RGB values toward the RGB values of the passed argument. The alpha argument can be thought of as the ratio between the two colors, where 0.0 is this color and 1.0 is the first argument.",
        "name": "lerp",
        "title": "Color.lerp( color: Color, alpha: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.lerp",
      },
      Object {
        "description": "color1 - the starting Color.
 color2 - Color to interpolate towards.
 alpha - interpolation factor, typically in the closed interval color1 and color2 where alpha is the percent distance along the line connecting the two colors - alpha = 0 will be color1, and alpha = 1 will be color2.",
        "name": "lerpColors",
        "title": "Color.lerpColors( color1: Color, color2: Color, alpha: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.lerpColors",
      },
      Object {
        "description": "color - color to converge on.
 alpha - interpolation factor in the closed interval .lerp by not interpolating straight from one color to the other, but instead going through all the hues in between those two colors. The alpha argument can be thought of as the ratio between the two colors, where 0.0 is this color and 1.0 is the first argument.",
        "name": "lerpHSL",
        "title": "Color.lerpHSL( color: Color, alpha: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.lerpHSL",
      },
      Object {
        "description": "Multiplies this color's RGB values by the given color's RGB values.",
        "name": "multiply",
        "title": "Color.multiply( color: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.multiply",
      },
      Object {
        "description": "Multiplies this color's RGB values by s.",
        "name": "multiplyScalar",
        "title": "Color.multiplyScalar( s: Number ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.multiplyScalar",
      },
      Object {
        "description": "Adds the given h, s, and l to this color's values. Internally, this converts the color's r, g and b values to HSL, adds h, s, and l, and then converts the color back to RGB.",
        "name": "offsetHSL",
        "title": "Color.offsetHSL( h: Float, s: Float, l: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.offsetHSL",
      },
      Object {
        "description": "value - Value to set this color to.
 See the Constructor above for full details of what value can be. Delegates to .copy, .setStyle, or .setHex depending on input type.",
        "name": "set",
        "title": "Color.set( value: Color_Hex_or_String ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.set",
      },
      Object {
        "description": "hex â€” [hexadecimal triplet](https://en.wikipedia.org/wiki/Web_colors#Hex_triplet) format.
 Sets this color from a hexadecimal value.",
        "name": "setHex",
        "title": "Color.setHex( hex: Integer ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.setHex",
      },
      Object {
        "description": "h â€” hue value between 0.0 and 1.0 
 s â€” saturation value between 0.0 and 1.0 
 l â€” lightness value between 0.0 and 1.0
 Sets color from HSL values.",
        "name": "setHSL",
        "title": "Color.setHSL( h: Float, s: Float, l: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.setHSL",
      },
      Object {
        "description": "r â€” Red channel value between 0.0 and 1.0.
 g â€” Green channel value between 0.0 and 1.0.
 b â€” Blue channel value between 0.0 and 1.0.
 Sets this color from RGB values.",
        "name": "setRGB",
        "title": "Color.setRGB( r: Float, g: Float, b: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.setRGB",
      },
      Object {
        "description": "scalar â€” a value between 0.0 and 1.0.
 Sets all three color components to the value scalar.",
        "name": "setScalar",
        "title": "Color.setScalar( scalar: Float ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.setScalar",
      },
      Object {
        "description": "style â€” color as a CSS-style string.
 Sets this color from a CSS-style string. For example, \\"rgb(250, 0,0)\\", \\"rgb(100%, 0%, 0%)\\", \\"hsl(0, 100%, 50%)\\", \\"#ff0000\\", \\"#f00\\", or \\"red\\" ( or any [X11 color name](https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart) - all 140 color names are supported ).
 Translucent colors such as \\"rgba(255, 0, 0, 0.5)\\" and \\"hsla(0, 100%, 50%, 0.5)\\" are also accepted, but the alpha-channel coordinate will be discarded.
 Note that for X11 color names, multiple words such as Dark Orange become the string 'darkorange'.",
        "name": "setStyle",
        "title": "Color.setStyle( style: String ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.setStyle",
      },
      Object {
        "description": "style â€” color name ( from [X11 color names](https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart) ).
 Sets this color from a color name. Faster than .setStyle method if you don't need the other CSS-style formats.
 For convenience, the list of names is exposed in Color.NAMES as a hash: \`\`\`Color.NAMES.aliceblue // returns 0xF0F8FF\`\`\`",
        "name": "setColorName",
        "title": "Color.setColorName( style: String ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.setColorName",
      },
      Object {
        "description": "Subtracts the RGB components of the given color from the RGB components of this color. If this results in a negative component, that component is set to zero.",
        "name": "sub",
        "title": "Color.sub( color: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.sub",
      },
      Object {
        "description": "array - An optional array to store the color to. 
 offset - An optional offset into the array.
 Returns an array of the form [ r, g, b ].",
        "name": "toArray",
        "title": "Color.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Color.toArray",
      },
    ],
    "title": "Color( r: Color_Hex_or_String, g: Float, b: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Color",
  },
  Object {
    "description": "A point's [cylindrical coordinates](https://en.wikipedia.org/wiki/Cylindrical_coordinate_system).",
    "name": "Cylindrical",
    "properties": Array [
      Object {
        "description": undefined,
        "name": "radius",
        "title": "Cylindrical.radius: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.radius",
      },
      Object {
        "description": undefined,
        "name": "theta",
        "title": "Cylindrical.theta: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.theta",
      },
      Object {
        "description": undefined,
        "name": "y",
        "title": "Cylindrical.y: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.y",
      },
      Object {
        "description": "Returns a new cylindrical with the same radius, theta and y properties as this one.",
        "name": "clone",
        "title": "Cylindrical.clone(): Cylindrical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.clone",
      },
      Object {
        "description": "Copies the values of the passed Cylindrical's radius, theta and y properties to this cylindrical.",
        "name": "copy",
        "title": "Cylindrical.copy( other: Cylindrical ): Cylindrical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.copy",
      },
      Object {
        "description": "Sets values of this cylindrical's radius, theta and y properties.",
        "name": "set",
        "title": "Cylindrical.set( radius: Float, theta: Float, y: Float ): Cylindrical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.set",
      },
      Object {
        "description": "Sets values of this cylindrical's radius, theta and y properties from the Vector3.",
        "name": "setFromVector3",
        "title": "Cylindrical.setFromVector3( vec3: Vector3 ): Cylindrical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.setFromVector3",
      },
      Object {
        "description": "Sets values of this cylindrical's radius, theta and y properties from Cartesian coordinates.",
        "name": "setFromCartesianCoords",
        "title": "Cylindrical.setFromCartesianCoords( x: Float, y: Float, z: Float ): Cylindrical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Cylindrical.setFromCartesianCoords",
      },
    ],
    "title": "Cylindrical( radius: Float, theta: Float, y: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Cylindrical",
  },
  Object {
    "description": "A class representing [Euler Angles](http://en.wikipedia.org/wiki/Euler_angles).
 Euler angles describe a rotational transformation by rotating an object on its various axes in specified amounts per axis, and a specified axis order.",
    "name": "Euler",
    "properties": Array [
      Object {
        "description": "The order in which to apply rotations. Default is 'XYZ', which means that the object will first be rotated around its X axis, then its Y axis and finally its Z axis. Other possibilities are: 'YZX', 'ZXY', 'XZY', 'YXZ' and 'ZYX'. These must be in upper case.
 Three.js uses *intrinsic* Tait-Bryan angles. This means that rotations are performed with respect to the *local* coordinate system. That is, for order 'XYZ', the rotation is first around the local-X axis (which is the same as the world-X axis), then around local-Y (which may now be different from the world Y-axis), then local-Z (which may be different from the world Z-axis).",
        "name": "order",
        "title": "Euler.order: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Euler.order",
      },
      Object {
        "description": "The current value of the x component.",
        "name": "x",
        "title": "Euler.x: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Euler.x",
      },
      Object {
        "description": "The current value of the y component.",
        "name": "y",
        "title": "Euler.y: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Euler.y",
      },
      Object {
        "description": "The current value of the z component.",
        "name": "z",
        "title": "Euler.z: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Euler.z",
      },
      Object {
        "description": "Copies value of euler to this euler.",
        "name": "copy",
        "title": "Euler.copy( euler: Euler ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.copy",
      },
      Object {
        "description": "Returns a new Euler with the same parameters as this one.",
        "name": "clone",
        "title": "Euler.clone(): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.clone",
      },
      Object {
        "description": "Checks for strict equality of this euler and euler.",
        "name": "equals",
        "title": "Euler.equals( euler: Euler ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.equals",
      },
      Object {
        "description": "array of length 3 or 4. The optional 4th argument corresponds to the order.
 Assigns this euler's x angle to arrayy angle to arrayz angle to arrayorder to array[3].",
        "name": "fromArray",
        "title": "Euler.fromArray( array: Array ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.fromArray",
      },
      Object {
        "description": "Resets the euler angle with a new order by creating a quaternion from this euler angle and then setting this euler angle with the quaternion and the new order. 
 *WARNING*: this discards revolution information.",
        "name": "reorder",
        "title": "Euler.reorder( newOrder: String ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.reorder",
      },
      Object {
        "description": "x - the angle of the x axis in radians.
 y - the angle of the y axis in radians.
 z - the angle of the z axis in radians.
 order - (optional) a string representing the order that the rotations are applied.
 Sets the angles of this euler transform and optionally the order.",
        "name": "set",
        "title": "Euler.set( x: Float, y: Float, z: Float, order: String ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.set",
      },
      Object {
        "description": "m - a Matrix4 of which the upper 3x3 of matrix is a pure [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix) (i.e. unscaled).
 order - (optional) a string representing the order that the rotations are applied.
 Sets the angles of this euler transform from a pure rotation matrix based on the orientation specified by order.",
        "name": "setFromRotationMatrix",
        "title": "Euler.setFromRotationMatrix( m: Matrix4, order: String ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.setFromRotationMatrix",
      },
      Object {
        "description": "q - a normalized quaternion.
 order - (optional) a string representing the order that the rotations are applied.
 Sets the angles of this euler transform from a normalized quaternion based on the orientation specified by order.",
        "name": "setFromQuaternion",
        "title": "Euler.setFromQuaternion( q: Quaternion, order: String ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.setFromQuaternion",
      },
      Object {
        "description": "vector - Vector3.
 order - (optional) a string representing the order that the rotations are applied.
 Set the x, y and z, and optionally update the order.",
        "name": "setFromVector3",
        "title": "Euler.setFromVector3( vector: Vector3, order: String ): Euler",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.setFromVector3",
      },
      Object {
        "description": "array - (optional) array to store the euler in.
 offset (optional) offset in the array.
 Returns an array of the form x, y, z, order ].",
        "name": "toArray",
        "title": "Euler.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.toArray",
      },
      Object {
        "description": "optionalResult â€” (optional) If specified, the result will be copied into this Vector, otherwise a new one will be created. 
 Returns the Euler's x, y and z properties as a Vector3.",
        "name": "toVector3",
        "title": "Euler.toVector3( optionalResult: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Euler.toVector3",
      },
    ],
    "title": "Euler( x: Float, y: Float, z: Float, order: String )",
    "url": "https://threejs.org/docs/#api/en/math/Euler",
  },
  Object {
    "description": "[Frustums](http://en.wikipedia.org/wiki/Frustum) are used to determine what is inside the camera's field of view. They help speed up the rendering process - objects which lie outside a camera's frustum can safely be excluded from rendering.
 This class is mainly intended for use internally by a renderer for calculating a camera or shadowCamera's frustum.",
    "name": "Frustum",
    "properties": Array [
      Object {
        "description": "Array of 6 planes.",
        "name": "planes",
        "title": "Frustum.planes: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.planes",
      },
      Object {
        "description": "Return a new Frustum with the same parameters as this one.",
        "name": "clone",
        "title": "Frustum.clone(): Frustum",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.clone",
      },
      Object {
        "description": "point - Vector3 to test.
 Checks to see if the frustum contains the point.",
        "name": "containsPoint",
        "title": "Frustum.containsPoint( point: Vector3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.containsPoint",
      },
      Object {
        "description": "frustum - The frustum to copy
 Copies the properties of the passed frustum into this one.",
        "name": "copy",
        "title": "Frustum.copy( frustum: Frustum ): Frustum",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.copy",
      },
      Object {
        "description": "box - Box3 to check for intersection.
 Return true if box intersects with this frustum.",
        "name": "intersectsBox",
        "title": "Frustum.intersectsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.intersectsBox",
      },
      Object {
        "description": "Checks whether the object's bounding sphere is intersecting the Frustum.
 Note that the object must have a geometry so that the bounding sphere can be calculated.",
        "name": "intersectsObject",
        "title": "Frustum.intersectsObject( object: Object3D ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.intersectsObject",
      },
      Object {
        "description": "sphere - Sphere to check for intersection.
 Return true if sphere intersects with this frustum.",
        "name": "intersectsSphere",
        "title": "Frustum.intersectsSphere( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.intersectsSphere",
      },
      Object {
        "description": "Checks whether the sprite is intersecting the Frustum.",
        "name": "intersectsSprite",
        "title": "Frustum.intersectsSprite( sprite: Sprite ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.intersectsSprite",
      },
      Object {
        "description": "Sets the frustum from the passed planes. No plane order is implied.
 Note that this method only copies the values from the given objects.",
        "name": "set",
        "title": "Frustum.set( p0: Plane, p1: Plane, p2: Plane, p3: Plane, p4: Plane, p5: Plane ): Frustum",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.set",
      },
      Object {
        "description": "matrix - Projection Matrix4 used to set the planes
 Sets the frustum planes from the projection matrix.",
        "name": "setFromProjectionMatrix",
        "title": "Frustum.setFromProjectionMatrix( matrix: Matrix4 ): Frustum",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Frustum.setFromProjectionMatrix",
      },
    ],
    "title": "Frustum(p0: Plane, p1: Plane, p2: Plane, p3: Plane, p4: Plane, p5: Plane)",
    "url": "https://threejs.org/docs/#api/en/math/Frustum",
  },
  Object {
    "description": "Abstract base class of interpolants over parametric samples.
 The parameter domain is one dimensional, typically the time or a path along a curve defined by the data.
 The sample values can have any dimensionality and derived classes may apply special interpretations to the data.
 This class provides the interval seek in a Template Method, deferring the actual interpolation to derived classes.
 Time complexity is *O(1)* for linear access crossing at most two points and *O(log N)* for random access, where *N* is the number of positions.
 References: [http://www.oodesign.com/template-method-pattern.html](http://www.oodesign.com/template-method-pattern.html)",
    "name": "Interpolant",
    "properties": Array [
      Object {
        "description": "",
        "name": "parameterPositions",
        "title": "Interpolant.parameterPositions: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Interpolant.parameterPositions",
      },
      Object {
        "description": "",
        "name": "resultBuffer",
        "title": "Interpolant.resultBuffer: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Interpolant.resultBuffer",
      },
      Object {
        "description": "",
        "name": "sampleValues",
        "title": "Interpolant.sampleValues: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Interpolant.sampleValues",
      },
      Object {
        "description": "Optional, subclass-specific settings structure.",
        "name": "settings",
        "title": "Interpolant.settings: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Interpolant.settings",
      },
      Object {
        "description": "",
        "name": "valueSize",
        "title": "Interpolant.valueSize: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Interpolant.valueSize",
      },
      Object {
        "description": "Evaluate the interpolant at position *t*.",
        "name": "evaluate",
        "title": "Interpolant.evaluate( t: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Interpolant.evaluate",
      },
    ],
    "title": "Constructor",
    "url": "https://threejs.org/docs/#api/en/math/Interpolant",
  },
  Object {
    "description": "A geometric line segment represented by a start and end point.",
    "name": "Line3",
    "properties": Array [
      Object {
        "description": "Vector3 representing the start point of the line.",
        "name": "start",
        "title": "Line3.start: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Line3.start",
      },
      Object {
        "description": "Vector3 representing the end point of the line.",
        "name": "end",
        "title": "Line3.end: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Line3.end",
      },
      Object {
        "description": "Applies a matrix transform to the line segment.",
        "name": "applyMatrix4",
        "title": "Line3.applyMatrix4( matrix: Matrix4 ): Line3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.applyMatrix4",
      },
      Object {
        "description": "t - Use values 0-1 to return a position along the line segment. 
 target â€” the result will be copied into this Vector3.
 Returns a vector at a certain position along the line. When t = 0, it returns the start vector, and when t = 1 it returns the end vector.",
        "name": "at",
        "title": "Line3.at( t: Float, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.at",
      },
      Object {
        "description": "Returns a new Line3 with the same start and end vectors as this one.",
        "name": "clone",
        "title": "Line3.clone(): Line3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.clone",
      },
      Object {
        "description": "point - return the closest point on the line to this point.
 clampToLine - whether to clamp the returned value to the line segment.
 target â€” the result will be copied into this Vector3.
 Returns the closets point on the line. If clampToLine is true, then the returned value will be clamped to the line segment.",
        "name": "closestPointToPoint",
        "title": "Line3.closestPointToPoint( point: Vector3, clampToLine: Boolean, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.closestPointToPoint",
      },
      Object {
        "description": "point - the point for which to return a point parameter. 
 clampToLine - Whether to clamp the result to the range clampToLine is true, then the returned value will be between 0 and 1.",
        "name": "closestPointToPointParameter",
        "title": "Line3.closestPointToPointParameter( point: Vector3, clampToLine: Boolean ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.closestPointToPointParameter",
      },
      Object {
        "description": "Copies the passed line's start and end vectors to this line.",
        "name": "copy",
        "title": "Line3.copy( line: Line3 ): Line3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.copy",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Returns the delta vector of the line segment ( end vector minus the start vector).",
        "name": "delta",
        "title": "Line3.delta( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.delta",
      },
      Object {
        "description": "Returns the [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line distance) between the line's start and end points.",
        "name": "distance",
        "title": "Line3.distance(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.distance",
      },
      Object {
        "description": "Returns the square of the [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line distance) between the line's start and end vectors.",
        "name": "distanceSq",
        "title": "Line3.distanceSq(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.distanceSq",
      },
      Object {
        "description": "line - Line3 to compare with this one.
 Returns true if both line's start and end points are equal.",
        "name": "equals",
        "title": "Line3.equals( line: Line3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.equals",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Returns the center of the line segment.",
        "name": "getCenter",
        "title": "Line3.getCenter( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.getCenter",
      },
      Object {
        "description": "start - set the start point of the line.
 end - set the end point of the line.
 Sets the start and end values by copying the provided vectors.",
        "name": "set",
        "title": "Line3.set( start: Vector3, end: Vector3 ): Line3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Line3.set",
      },
    ],
    "title": "Line3( start: Vector3, end: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/math/Line3",
  },
  Object {
    "description": "An object with several math utility functions.",
    "name": "MathUtils",
    "properties": Array [
      Object {
        "description": "value â€” Value to be clamped.
 min â€” Minimum value.
 max â€” Maximum value.
 Clamps the value to be between min and max.",
        "name": "clamp",
        "title": "MathUtils.clamp( value: Float, min: Float, max: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.clamp",
      },
      Object {
        "description": "Converts degrees to radians.",
        "name": "degToRad",
        "title": "MathUtils.degToRad( degrees: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.degToRad",
      },
      Object {
        "description": "n, m - Integers
 Computes the Euclidean modulo of m % n, that is: \`\`\`( ( n % m ) + m ) % m\`\`\`",
        "name": "euclideanModulo",
        "title": "MathUtils.euclideanModulo( n: Integer, m: Integer ): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.euclideanModulo",
      },
      Object {
        "description": "Generate a [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) (universally unique identifier).",
        "name": "generateUUID",
        "title": "MathUtils.generateUUID( ): UUID",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.generateUUID",
      },
      Object {
        "description": "Return *true* if n is a power of 2.",
        "name": "isPowerOfTwo",
        "title": "MathUtils.isPowerOfTwo( n: Number ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.isPowerOfTwo",
      },
      Object {
        "description": "x - Start point.
 y - End point.
 value - A value between start and end.
 Returns the percentage in the closed interval [0, 1] of the given value between the start and end point.",
        "name": "inverseLerp",
        "title": "MathUtils.inverseLerp( x: Float, y: Float, value: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.inverseLerp",
      },
      Object {
        "description": "x - Start point. 
 y - End point. 
 t - interpolation factor in the closed interval interpolated</a> from two known points based on the given interval - [page:Float t = 0 will return x and t = 1 will return y.",
        "name": "lerp",
        "title": "MathUtils.lerp( x: Float, y: Float, t: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.lerp",
      },
      Object {
        "description": "x - Current point. 
 y - Target point. 
 lambda - A higher lambda value will make the movement more sudden, and a lower value will make the movement more gradual. 
 dt - Delta time in seconds.
 Smoothly interpolate a number from x toward y in a spring-like manner using the dt to maintain frame rate independent movement. For details, see [Frame rate independent damping using lerp](http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/).",
        "name": "damp",
        "title": "MathUtils.damp( x: Float, y: Float, lambda: Float, dt: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.damp",
      },
      Object {
        "description": "x â€” Value to be mapped.
 a1 â€” Minimum value for range A.
 a2 â€” Maximum value for range A.
 b1 â€” Minimum value for range B.
 b2 â€” Maximum value for range B.
 Linear mapping of x from range a1, a2] to range b1, b2].",
        "name": "mapLinear",
        "title": "MathUtils.mapLinear( x: Float, a1: Float, a2: Float, b1: Float, b2: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.mapLinear",
      },
      Object {
        "description": "x â€” The value to pingpong.
 length â€” The positive value the function will pingpong to. Default is 1.
 Returns a value that alternates between 0 and length.",
        "name": "pingpong",
        "title": "MathUtils.pingpong( x: Float, length: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.pingpong",
      },
      Object {
        "description": "Returns the smallest power of 2 that is greater than or equal to n.",
        "name": "ceilPowerOfTwo",
        "title": "MathUtils.ceilPowerOfTwo( n: Number ): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.ceilPowerOfTwo",
      },
      Object {
        "description": "Returns the largest power of 2 that is less than or equal to n.",
        "name": "floorPowerOfTwo",
        "title": "MathUtils.floorPowerOfTwo( n: Number ): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.floorPowerOfTwo",
      },
      Object {
        "description": "Converts radians to degrees.",
        "name": "radToDeg",
        "title": "MathUtils.radToDeg( radians: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.radToDeg",
      },
      Object {
        "description": "Random float in the interval low, high].",
        "name": "randFloat",
        "title": "MathUtils.randFloat( low: Float, high: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.randFloat",
      },
      Object {
        "description": "Random float in the interval range / 2, range / 2].",
        "name": "randFloatSpread",
        "title": "MathUtils.randFloatSpread( range: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.randFloatSpread",
      },
      Object {
        "description": "Random integer in the interval low, high].",
        "name": "randInt",
        "title": "MathUtils.randInt( low: Integer, high: Integer ): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.randInt",
      },
      Object {
        "description": "Deterministic pseudo-random float in the interval seed is optional.",
        "name": "seededRandom",
        "title": "MathUtils.seededRandom( seed: Integer ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.seededRandom",
      },
      Object {
        "description": "x - The value to evaluate based on its position between min and max. 
 min - Any x value below min will be 0.
 max - Any x value above max will be 1.
 Returns a value between 0-1 that represents the percentage that x has moved between min and max, but smoothed or slowed down the closer X is to the min and max.
 See [Smoothstep](http://en.wikipedia.org/wiki/Smoothstep) for details.",
        "name": "smoothstep",
        "title": "MathUtils.smoothstep( x: Float, min: Float, max: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.smoothstep",
      },
      Object {
        "description": "x - The value to evaluate based on its position between min and max. 
 min - Any x value below min will be 0.
 max - Any x value above max will be 1.
 Returns a value between 0-1. A [variation on smoothstep](https://en.wikipedia.org/wiki/Smoothstep#Variations) that has zero 1st and 2nd order derivatives at x=0 and x=1.",
        "name": "smootherstep",
        "title": "MathUtils.smootherstep( x: Float, min: Float, max: Float ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.smootherstep",
      },
      Object {
        "description": "q - the quaternion to be set
 a - the rotation applied to the first axis, in radians 
 b - the rotation applied to the second axis, in radians 
 c - the rotation applied to the third axis, in radians 
 order - a string specifying the axes order: 'XYX', 'XZX', 'YXY', 'YZY', 'ZXZ', or 'ZYZ'
 Sets quaternion q from the [intrinsic Proper Euler Angles](http://en.wikipedia.org/wiki/Euler_angles) defined by angles a, b, and c, and order order.
 Rotations are applied to the axes in the order specified by order: rotation by angle a is applied first, then by angle b, then by angle c. Angles are in radians.",
        "name": "setQuaternionFromProperEuler",
        "title": "MathUtils.setQuaternionFromProperEuler( q: Quaternion, a: Float, b: Float, c: Float, order: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/MathUtils.setQuaternionFromProperEuler",
      },
    ],
    "title": "MathUtils",
    "url": "https://threejs.org/docs/#api/en/math/MathUtils",
  },
  Object {
    "description": "A class representing a 3x3 [matrix](https://en.wikipedia.org/wiki/Matrix_(mathematics)).",
    "name": "Matrix3",
    "properties": Array [
      Object {
        "description": "A [column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order) list of matrix values.",
        "name": "elements",
        "title": "Matrix3.elements: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.elements",
      },
      Object {
        "description": "Creates a new Matrix3 and with identical elements to this one.",
        "name": "clone",
        "title": "Matrix3.clone(): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.clone",
      },
      Object {
        "description": "Copies the elements of matrix m into this matrix.",
        "name": "copy",
        "title": "Matrix3.copy( m: Matrix3 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.copy",
      },
      Object {
        "description": "Computes and returns the [determinant](https://en.wikipedia.org/wiki/Determinant) of this matrix.",
        "name": "determinant",
        "title": "Matrix3.determinant(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.determinant",
      },
      Object {
        "description": "Return true if this matrix and m are equal.",
        "name": "equals",
        "title": "Matrix3.equals( m: Matrix3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.equals",
      },
      Object {
        "description": "Extracts the [basis](https://en.wikipedia.org/wiki/Basis_(linear_algebra)) of this matrix into the three axis vectors provided. If this matrix is: \`\`\` a, b, c, d, e, f, g, h, i \`\`\` then the xAxis, yAxis, zAxis will be set to: \`\`\` xAxis = (a, d, g) yAxis = (b, e, h) zAxis = (c, f, i) \`\`\`",
        "name": "extractBasis",
        "title": "Matrix3.extractBasis( xAxis: Vector3, yAxis: Vector3, zAxis: Vector3 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.extractBasis",
      },
      Object {
        "description": "array - the array to read the elements from.
 offset - (optional) index of first element in the array. Default is 0.
 Sets the elements of this matrix based on an array in [column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order) format.",
        "name": "fromArray",
        "title": "Matrix3.fromArray( array: Array, offset: Integer ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.fromArray",
      },
      Object {
        "description": "Inverts this matrix, using the [analytic method](https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution). You can not invert with a determinant of zero. If you attempt this, the method produces a zero matrix instead.",
        "name": "invert",
        "title": "Matrix3.invert(): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.invert",
      },
      Object {
        "description": "m - Matrix4
 Sets this matrix as the upper left 3x3 of the [normal matrix](https://en.wikipedia.org/wiki/Normal_matrix) of the passed matrix4. The normal matrix is the [inverse](https://en.wikipedia.org/wiki/Invertible_matrix) [transpose](https://en.wikipedia.org/wiki/Transpose) of the matrix m.",
        "name": "getNormalMatrix",
        "title": "Matrix3.getNormalMatrix( m: Matrix4 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.getNormalMatrix",
      },
      Object {
        "description": "Resets this matrix to the 3x3 identity matrix: \`\`\` 1, 0, 0 0, 1, 0 0, 0, 1 \`\`\`",
        "name": "identity",
        "title": "Matrix3.identity(): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.identity",
      },
      Object {
        "description": "Post-multiplies this matrix by m.",
        "name": "multiply",
        "title": "Matrix3.multiply( m: Matrix3 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.multiply",
      },
      Object {
        "description": "Sets this matrix to a x b.",
        "name": "multiplyMatrices",
        "title": "Matrix3.multiplyMatrices( a: Matrix3, b: Matrix3 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.multiplyMatrices",
      },
      Object {
        "description": "Multiplies every component of the matrix by the scalar value *s*.",
        "name": "multiplyScalar",
        "title": "Matrix3.multiplyScalar( s: Float ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.multiplyScalar",
      },
      Object {
        "description": "n11 - value to put in row 1, col 1.
 n12 - value to put in row 1, col 2.
 ...
 ...
 n32 - value to put in row 3, col 2.
 n33 - value to put in row 3, col 3.
 Sets the 3x3 matrix values to the given [row-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order) sequence of values.",
        "name": "set",
        "title": "Matrix3.set( n11: Float, n12: Float, n13: Float, n21: Float, n22: Float, n23: Float, n31: Float, n32: Float, n33: Float ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.set",
      },
      Object {
        "description": "Pre-multiplies this matrix by m.",
        "name": "premultiply",
        "title": "Matrix3.premultiply( m: Matrix3 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.premultiply",
      },
      Object {
        "description": "Set this matrix to the upper 3x3 matrix of the Matrix4 m.",
        "name": "setFromMatrix4",
        "title": "Matrix3.setFromMatrix4( m: Matrix4 ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.setFromMatrix4",
      },
      Object {
        "description": "tx - offset x
 ty - offset y
 sx - repeat x
 sy - repeat y
 rotation - rotation (in radians)
 cx - center x of rotation
 cy - center y of rotation
 Sets the UV transform matrix from offset, repeat, rotation, and center.",
        "name": "setUvTransform",
        "title": "Matrix3.setUvTransform( tx: Float, ty: Float, sx: Float, sy: Float, rotation: Float, cx: Float, cy: Float ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.setUvTransform",
      },
      Object {
        "description": "array - (optional) array to store the resulting vector in. If not given a new array will be created.
 offset - (optional) offset in the array at which to put the result.
 Writes the elements of this matrix to an array in [column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order) format.",
        "name": "toArray",
        "title": "Matrix3.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.toArray",
      },
      Object {
        "description": "[Transposes](https://en.wikipedia.org/wiki/Transpose) this matrix in place.",
        "name": "transpose",
        "title": "Matrix3.transpose(): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.transpose",
      },
      Object {
        "description": "array - array to store the resulting vector in.
 [Transposes](https://en.wikipedia.org/wiki/Transpose) this matrix into the supplied array, and returns itself unchanged.",
        "name": "transposeIntoArray",
        "title": "Matrix3.transposeIntoArray( array: Array ): Matrix3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix3.transposeIntoArray",
      },
    ],
    "title": "Matrix3()",
    "url": "https://threejs.org/docs/#api/en/math/Matrix3",
  },
  Object {
    "description": "A class representing a 4x4 [matrix](https://en.wikipedia.org/wiki/Matrix_(mathematics)).
 The most common use of a 4x4 matrix in 3D computer graphics is as a [Transformation Matrix](https://en.wikipedia.org/wiki/Transformation_matrix). For an introduction to transformation matrices as used in WebGL, check out [this tutorial](http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices).
 This allows a Vector3 representing a point in 3D space to undergo transformations such as translation, rotation, shear, scale, reflection, orthogonal or perspective projection and so on, by being multiplied by the matrix. This is known as *applying* the matrix to the vector.
 Every Object3D has three associated Matrix4s:",
    "name": "Matrix4",
    "properties": Array [
      Object {
        "description": "A [column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order) list of matrix values.",
        "name": "elements",
        "title": "Matrix4.elements: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.elements",
      },
      Object {
        "description": "Creates a new Matrix4 with identical elements to this one.",
        "name": "clone",
        "title": "Matrix4.clone(): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.clone",
      },
      Object {
        "description": "Sets this matrix to the transformation composed of position, quaternion and scale.",
        "name": "compose",
        "title": "Matrix4.compose( position: Vector3, quaternion: Quaternion, scale: Vector3 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.compose",
      },
      Object {
        "description": "Copies the elements of matrix m into this matrix.",
        "name": "copy",
        "title": "Matrix4.copy( m: Matrix4 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.copy",
      },
      Object {
        "description": "Copies the translation component of the supplied matrix m into this matrix's translation component.",
        "name": "copyPosition",
        "title": "Matrix4.copyPosition( m: Matrix4 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.copyPosition",
      },
      Object {
        "description": "Decomposes this matrix into it's position, quaternion and scale components.
 Note: Not all matrices are decomposable in this way. For example, if an object has a non-uniformly scaled parent, then the object's world matrix may not be decomposable, and this method may not be appropriate.",
        "name": "decompose",
        "title": "Matrix4.decompose( position: Vector3, quaternion: Quaternion, scale: Vector3 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.decompose",
      },
      Object {
        "description": "Computes and returns the [determinant](https://en.wikipedia.org/wiki/Determinant) of this matrix.
 Based on the method outlined [here](http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm).",
        "name": "determinant",
        "title": "Matrix4.determinant(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.determinant",
      },
      Object {
        "description": "Return true if this matrix and m are equal.",
        "name": "equals",
        "title": "Matrix4.equals( m: Matrix4 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.equals",
      },
      Object {
        "description": "Extracts the [basis](https://en.wikipedia.org/wiki/Basis_(linear_algebra)) of this matrix into the three axis vectors provided. If this matrix is: \`\`\` a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p \`\`\` then the xAxis, yAxis, zAxis will be set to: \`\`\` xAxis = (a, e, i) yAxis = (b, f, j) zAxis = (c, g, k) \`\`\`",
        "name": "extractBasis",
        "title": "Matrix4.extractBasis( xAxis: Vector3, yAxis: Vector3, zAxis: Vector3 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.extractBasis",
      },
      Object {
        "description": "Extracts the rotation component of the supplied matrix m into this matrix's rotation component.",
        "name": "extractRotation",
        "title": "Matrix4.extractRotation( m: Matrix4 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.extractRotation",
      },
      Object {
        "description": "array - the array to read the elements from.
 offset - ( optional ) offset into the array. Default is 0.
 Sets the elements of this matrix based on an array in [column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order) format.",
        "name": "fromArray",
        "title": "Matrix4.fromArray( array: Array, offset: Integer ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.fromArray",
      },
      Object {
        "description": "Inverts this matrix, using the [analytic method](https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution). You can not invert with a determinant of zero. If you attempt this, the method produces a zero matrix instead.",
        "name": "invert",
        "title": "Matrix4.invert(): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.invert",
      },
      Object {
        "description": "Gets the maximum scale value of the 3 axes.",
        "name": "getMaxScaleOnAxis",
        "title": "Matrix4.getMaxScaleOnAxis(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.getMaxScaleOnAxis",
      },
      Object {
        "description": "Resets this matrix to the [identity matrix](https://en.wikipedia.org/wiki/Identity_matrix).",
        "name": "identity",
        "title": "Matrix4.identity(): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.identity",
      },
      Object {
        "description": "Constructs a rotation matrix, looking from eye towards center oriented by the up vector.",
        "name": "lookAt",
        "title": "Matrix4.lookAt( eye: Vector3, center: Vector3, up: Vector3, ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.lookAt",
      },
      Object {
        "description": "axis â€” Rotation axis, should be normalized.
 theta â€” Rotation angle in radians.
 Sets this matrix as rotation transform around axis by theta radians.
 This is a somewhat controversial but mathematically sound alternative to rotating via Quaternions. See the discussion [here](https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199).",
        "name": "makeRotationAxis",
        "title": "Matrix4.makeRotationAxis( axis: Vector3, theta: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeRotationAxis",
      },
      Object {
        "description": "Set this to the [basis](https://en.wikipedia.org/wiki/Basis_(linear_algebra)) matrix consisting of the three provided basis vectors: \`\`\` xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1 \`\`\`",
        "name": "makeBasis",
        "title": "Matrix4.makeBasis( xAxis: Vector3, yAxis: Vector3, zAxis: Vector3 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeBasis",
      },
      Object {
        "description": "Creates a [perspective projection](https://en.wikipedia.org/wiki/3D_projection#Perspective_projection) matrix. This is used internally by PerspectiveCamera.updateProjectionMatrix()",
        "name": "makePerspective",
        "title": "Matrix4.makePerspective( left: Float, right: Float, top: Float, bottom: Float, near: Float, far: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makePerspective",
      },
      Object {
        "description": "Creates an [orthographic projection](https://en.wikipedia.org/wiki/Orthographic_projection) matrix. This is used internally by OrthographicCamera.updateProjectionMatrix().",
        "name": "makeOrthographic",
        "title": "Matrix4.makeOrthographic( left: Float, right: Float, top: Float, bottom: Float, near: Float, far: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeOrthographic",
      },
      Object {
        "description": "Sets the rotation component (the upper left 3x3 matrix) of this matrix to the rotation specified by the given Euler Angle. The rest of the matrix is set to the identity. Depending on the order of the euler, there are six possible outcomes. See [this page](https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix) for a complete list.",
        "name": "makeRotationFromEuler",
        "title": "Matrix4.makeRotationFromEuler( euler: Euler ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeRotationFromEuler",
      },
      Object {
        "description": "Sets the rotation component of this matrix to the rotation specified by q, as outlined [here](https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion). The rest of the matrix is set to the identity. So, given q = w + xi + yj + zk, the resulting matrix will be: \`\`\` 1-2yÂ²-2zÂ² 2xy-2zw 2xz+2yw 0 2xy+2zw 1-2xÂ²-2zÂ² 2yz-2xw 0 2xz-2yw 2yz+2xw 1-2xÂ²-2yÂ² 0 0 0 0 1 \`\`\`",
        "name": "makeRotationFromQuaternion",
        "title": "Matrix4.makeRotationFromQuaternion( q: Quaternion ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeRotationFromQuaternion",
      },
      Object {
        "description": "theta â€” Rotation angle in radians.
 Sets this matrix as a rotational transformation around the X axis by theta (Î¸) radians. The resulting matrix will be: \`\`\` 1 0 0 0 0 cos(Î¸) -sin(Î¸) 0 0 sin(Î¸) cos(Î¸) 0 0 0 0 1 \`\`\`",
        "name": "makeRotationX",
        "title": "Matrix4.makeRotationX( theta: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeRotationX",
      },
      Object {
        "description": "theta â€” Rotation angle in radians.
 Sets this matrix as a rotational transformation around the Y axis by theta (Î¸) radians. The resulting matrix will be: \`\`\` cos(Î¸) 0 sin(Î¸) 0 0 1 0 0 -sin(Î¸) 0 cos(Î¸) 0 0 0 0 1 \`\`\`",
        "name": "makeRotationY",
        "title": "Matrix4.makeRotationY( theta: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeRotationY",
      },
      Object {
        "description": "theta â€” Rotation angle in radians.
 Sets this matrix as a rotational transformation around the Z axis by theta (Î¸) radians. The resulting matrix will be: \`\`\` cos(Î¸) -sin(Î¸) 0 0 sin(Î¸) cos(Î¸) 0 0 0 0 1 0 0 0 0 1 \`\`\`",
        "name": "makeRotationZ",
        "title": "Matrix4.makeRotationZ( theta: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeRotationZ",
      },
      Object {
        "description": "x - the amount to scale in the X axis.
 y - the amount to scale in the Y axis.
 z - the amount to scale in the Z axis.
 Sets this matrix as scale transform: \`\`\` x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1 \`\`\`",
        "name": "makeScale",
        "title": "Matrix4.makeScale( x: Float, y: Float, z: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeScale",
      },
      Object {
        "description": "x - the amount to shear in the X axis.
 y - the amount to shear in the Y axis.
 z - the amount to shear in the Z axis.
 Sets this matrix as a shear transform: \`\`\` 1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1 \`\`\`",
        "name": "makeShear",
        "title": "Matrix4.makeShear( x: Float, y: Float, z: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeShear",
      },
      Object {
        "description": "x - the amount to translate in the X axis.
 y - the amount to translate in the Y axis.
 z - the amount to translate in the Z axis.
 Sets this matrix as a translation transform: \`\`\` 1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1 \`\`\`",
        "name": "makeTranslation",
        "title": "Matrix4.makeTranslation( x: Float, y: Float, z: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.makeTranslation",
      },
      Object {
        "description": "Post-multiplies this matrix by m.",
        "name": "multiply",
        "title": "Matrix4.multiply( m: Matrix4 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.multiply",
      },
      Object {
        "description": "Sets this matrix to a x b.",
        "name": "multiplyMatrices",
        "title": "Matrix4.multiplyMatrices( a: Matrix4, b: Matrix4 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.multiplyMatrices",
      },
      Object {
        "description": "Multiplies every component of the matrix by a scalar value s.",
        "name": "multiplyScalar",
        "title": "Matrix4.multiplyScalar( s: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.multiplyScalar",
      },
      Object {
        "description": "Pre-multiplies this matrix by m.",
        "name": "premultiply",
        "title": "Matrix4.premultiply( m: Matrix4 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.premultiply",
      },
      Object {
        "description": "Multiplies the columns of this matrix by vector v.",
        "name": "scale",
        "title": "Matrix4.scale( v: Vector3 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.scale",
      },
      Object {
        "description": "Set the elements of this matrix to the supplied row-major values n11, n12, ... n44.",
        "name": "set",
        "title": "Matrix4.set( n11: Float, n12: Float, n13: Float, n14: Float, n21: Float, n22: Float, n23: Float, n24: Float, n31: Float, n32: Float, n33: Float, n34: Float, n41: Float, n42: Float, n43: Float, n44: Float ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.set",
      },
      Object {
        "description": "Set the upper 3x3 elements of this matrix to the values of the Matrix3 m.",
        "name": "setFromMatrix3",
        "title": "Matrix4.setFromMatrix3( m: Matrix3 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.setFromMatrix3",
      },
      Object {
        "description": undefined,
        "name": "setPosition",
        "title": "Matrix4.setPosition( v: Vector3 ): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.setPosition",
      },
      Object {
        "description": "Sets the position component for this matrix from vector v, without affecting the rest of the matrix - i.e. if the matrix is currently: \`\`\` a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p \`\`\` This becomes: \`\`\` a, b, c, v.x, e, f, g, v.y, i, j, k, v.z, m, n, o, p \`\`\`",
        "name": "setPosition",
        "title": "Matrix4.setPosition( x: Float, y: Float, z: Float ) // optional API: Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.setPosition",
      },
      Object {
        "description": "array - (optional) array to store the resulting vector in.
 offset - (optional) offset in the array at which to put the result.
 Writes the elements of this matrix to an array in [column-major](https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order) format.",
        "name": "toArray",
        "title": "Matrix4.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.toArray",
      },
      Object {
        "description": "[Transposes](https://en.wikipedia.org/wiki/Transpose) this matrix.",
        "name": "transpose",
        "title": "Matrix4.transpose(): Matrix4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Matrix4.transpose",
      },
    ],
    "title": "Matrix4()",
    "url": "https://threejs.org/docs/#api/en/math/Matrix4",
  },
  Object {
    "description": "A two dimensional surface that extends infinitely in 3d space, represented in [Hessian normal form](http://mathworld.wolfram.com/HessianNormalForm.html) by a unit length normal vector and a constant.",
    "name": "Plane",
    "properties": Array [
      Object {
        "description": undefined,
        "name": "normal",
        "title": "Plane.normal: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Plane.normal",
      },
      Object {
        "description": undefined,
        "name": "constant",
        "title": "Plane.constant: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Plane.constant",
      },
      Object {
        "description": "matrix - the Matrix4 to apply.
 optionalNormalMatrix - (optional) pre-computed normal Matrix3 of the Matrix4 being applied.
 Apply a Matrix4 to the plane. The matrix must be an affine, homogeneous transform.
 If supplying an optionalNormalMatrix, it can be created like so: \`\`\` const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix ); \`\`\`",
        "name": "applyMatrix4",
        "title": "Plane.applyMatrix4( matrix: Matrix4, optionalNormalMatrix: Matrix3 ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.applyMatrix4",
      },
      Object {
        "description": "Returns a new plane with the same normal and constant as this one.",
        "name": "clone",
        "title": "Plane.clone(): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.clone",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Returns a Vector3 coplanar to the plane, by calculating the projection of the normal vector at the origin onto the plane.",
        "name": "coplanarPoint",
        "title": "Plane.coplanarPoint( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.coplanarPoint",
      },
      Object {
        "description": "Copies the values of the passed plane's normal and constant properties to this plane.",
        "name": "copy",
        "title": "Plane.copy( plane: Plane ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.copy",
      },
      Object {
        "description": "Returns the signed distance from the point to the plane.",
        "name": "distanceToPoint",
        "title": "Plane.distanceToPoint( point: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.distanceToPoint",
      },
      Object {
        "description": "Returns the signed distance from the sphere to the plane.",
        "name": "distanceToSphere",
        "title": "Plane.distanceToSphere( sphere: Sphere ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.distanceToSphere",
      },
      Object {
        "description": "Checks to see if two planes are equal (their normal and constant properties match).",
        "name": "equals",
        "title": "Plane.equals( plane: Plane ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.equals",
      },
      Object {
        "description": "line - the Line3 to check for intersection.
 target â€” the result will be copied into this Vector3.
 Returns the intersection point of the passed line and the plane. Returns null if the line does not intersect. Returns the line's starting point if the line is coplanar with the plane.",
        "name": "intersectLine",
        "title": "Plane.intersectLine( line: Line3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.intersectLine",
      },
      Object {
        "description": "box - the Box3 to check for intersection.
 Determines whether or not this plane intersects box.",
        "name": "intersectsBox",
        "title": "Plane.intersectsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.intersectsBox",
      },
      Object {
        "description": "line - the Line3 to check for intersection.
 Tests whether a line segment intersects with (passes through) the plane.",
        "name": "intersectsLine",
        "title": "Plane.intersectsLine( line: Line3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.intersectsLine",
      },
      Object {
        "description": "sphere - the Sphere to check for intersection.
 Determines whether or not this plane intersects sphere.",
        "name": "intersectsSphere",
        "title": "Plane.intersectsSphere( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.intersectsSphere",
      },
      Object {
        "description": "Negates both the normal vector and the constant.",
        "name": "negate",
        "title": "Plane.negate(): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.negate",
      },
      Object {
        "description": "Normalizes the normal vector, and adjusts the constant value accordingly.",
        "name": "normalize",
        "title": "Plane.normalize(): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.normalize",
      },
      Object {
        "description": "point - the Vector3 to project onto the plane.
 target â€” the result will be copied into this Vector3.
 Projects a point onto the plane.",
        "name": "projectPoint",
        "title": "Plane.projectPoint( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.projectPoint",
      },
      Object {
        "description": "normal - a unit length Vector3 defining the normal of the plane.
 constant - the signed distance from the origin to the plane. Default is *0*.
 Sets this plane's normal and constant properties by copying the values from the given normal.",
        "name": "set",
        "title": "Plane.set( normal: Vector3, constant: Float ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.set",
      },
      Object {
        "description": "x - x value of the unit length normal vector.
 y - y value of the unit length normal vector.
 z - z value of the unit length normal vector.
 w - the value of the plane's constant property.
 Set the individual components that define the plane.",
        "name": "setComponents",
        "title": "Plane.setComponents( x: Float, y: Float, z: Float, w: Float ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.setComponents",
      },
      Object {
        "description": "a - first point on the plane.
 b - second point on the plane.
 c - third point on the plane.
 Defines the plane based on the 3 provided points. The winding order is assumed to be counter-clockwise, and determines the direction of the normal.",
        "name": "setFromCoplanarPoints",
        "title": "Plane.setFromCoplanarPoints( a: Vector3, b: Vector3, c: Vector3 ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.setFromCoplanarPoints",
      },
      Object {
        "description": "normal - a unit length Vector3 defining the normal of the plane.
 point - Vector3
 Sets the plane's properties as defined by a normal and an arbitrary coplanar point.",
        "name": "setFromNormalAndCoplanarPoint",
        "title": "Plane.setFromNormalAndCoplanarPoint( normal: Vector3, point: Vector3 ) this: Vector3: Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.setFromNormalAndCoplanarPoint",
      },
      Object {
        "description": "offset - the amount to move the plane by.
 Translates the plane by the distance defined by the offset vector. Note that this only affects the plane constant and will not affect the normal vector.",
        "name": "translate",
        "title": "Plane.translate( offset: Vector3 ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Plane.translate",
      },
    ],
    "title": "Plane( normal: Vector3, constant: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Plane",
  },
  Object {
    "description": "Implementation of a [quaternion](http://en.wikipedia.org/wiki/Quaternion).
 Quaternions are used in three.js to represent [rotations](https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation).",
    "name": "Quaternion",
    "properties": Array [
      Object {
        "description": undefined,
        "name": "x",
        "title": "Quaternion.x: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.x",
      },
      Object {
        "description": undefined,
        "name": "y",
        "title": "Quaternion.y: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.y",
      },
      Object {
        "description": undefined,
        "name": "z",
        "title": "Quaternion.z: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.z",
      },
      Object {
        "description": undefined,
        "name": "w",
        "title": "Quaternion.w: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.w",
      },
      Object {
        "description": "Returns the angle between this quaternion and quaternion q in radians.",
        "name": "angleTo",
        "title": "Quaternion.angleTo( q: Quaternion ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.angleTo",
      },
      Object {
        "description": "Creates a new Quaternion with identical x, y, z and w properties to this one.",
        "name": "clone",
        "title": "Quaternion.clone(): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.clone",
      },
      Object {
        "description": "Returns the rotational conjugate of this quaternion. The conjugate of a quaternion represents the same rotation in the opposite direction about the rotational axis.",
        "name": "conjugate",
        "title": "Quaternion.conjugate(): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.conjugate",
      },
      Object {
        "description": "Copies the x, y, z and w properties of q into this quaternion.",
        "name": "copy",
        "title": "Quaternion.copy( q: Quaternion ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.copy",
      },
      Object {
        "description": "v - Quaternion that this quaternion will be compared to.
 Compares the x, y, z and w properties of v to the equivalent properties of this quaternion to determine if they represent the same rotation.",
        "name": "equals",
        "title": "Quaternion.equals( v: Quaternion ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.equals",
      },
      Object {
        "description": "Calculates the [dot product](https://en.wikipedia.org/wiki/Dot_product) of quaternions v and this one.",
        "name": "dot",
        "title": "Quaternion.dot( v: Quaternion ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.dot",
      },
      Object {
        "description": "array - array of format (x, y, z, w) used to construct the quaternion.
 offset - (optional) an offset into the array.
 Sets this quaternion's x, y, z and w properties from an array.",
        "name": "fromArray",
        "title": "Quaternion.fromArray( array: Array, offset: Integer ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.fromArray",
      },
      Object {
        "description": "Sets this quaternion to the identity quaternion; that is, to the quaternion that represents \\"no rotation\\".",
        "name": "identity",
        "title": "Quaternion.identity(): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.identity",
      },
      Object {
        "description": "Inverts this quaternion - calculates the conjugate. The quaternion is assumed to have unit length.",
        "name": "invert",
        "title": "Quaternion.invert(): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.invert",
      },
      Object {
        "description": "Computes the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) of this quaternion, considered as a 4 dimensional vector.",
        "name": "length",
        "title": "Quaternion.length(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.length",
      },
      Object {
        "description": "Computes the squared [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) of this quaternion, considered as a 4 dimensional vector. This can be useful if you are comparing the lengths of two quaternions, as this is a slightly more efficient calculation than length().",
        "name": "lengthSq",
        "title": "Quaternion.lengthSq(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.lengthSq",
      },
      Object {
        "description": "[Normalizes](https://en.wikipedia.org/wiki/Normalized_vector) this quaternion - that is, calculated the quaternion that performs the same rotation as this one, but has length equal to *1*.",
        "name": "normalize",
        "title": "Quaternion.normalize(): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.normalize",
      },
      Object {
        "description": "Multiplies this quaternion by q.",
        "name": "multiply",
        "title": "Quaternion.multiply( q: Quaternion ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.multiply",
      },
      Object {
        "description": "Sets this quaternion to a x b.
 Adapted from the method outlined [here](http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm).",
        "name": "multiplyQuaternions",
        "title": "Quaternion.multiplyQuaternions( a: Quaternion, b: Quaternion ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.multiplyQuaternions",
      },
      Object {
        "description": "Pre-multiplies this quaternion by q.",
        "name": "premultiply",
        "title": "Quaternion.premultiply( q: Quaternion ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.premultiply",
      },
      Object {
        "description": "q - The target quaternion.
 step - The angular step in radians.
 Rotates this quaternion by a given angular step to the defined quaternion *q*. The method ensures that the final quaternion will not overshoot *q*.",
        "name": "rotateTowards",
        "title": "Quaternion.rotateTowards( q: Quaternion, step: Float ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.rotateTowards",
      },
      Object {
        "description": "qb - The other quaternion rotation
 t - interpolation factor in the closed interval t represents the amount of rotation between this quaternion (where t is 0) and qb (where t is 1). This quaternion is set to the result. Also see the static version of the *slerp* below. \`\`\` // rotate a mesh towards a target quaternion mesh.quaternion.slerp( endQuaternion, 0.01 ); \`\`\`",
        "name": "slerp",
        "title": "Quaternion.slerp( qb: Quaternion, t: Float ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.slerp",
      },
      Object {
        "description": "Performs a spherical linear interpolation between the given quaternions and stores the result in this quaternion.",
        "name": "slerpQuaternions",
        "title": "Quaternion.slerpQuaternions( qa: Quaternion, qb: Quaternion, t: Float ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.slerpQuaternions",
      },
      Object {
        "description": "Sets x, y, z, w properties of this quaternion.",
        "name": "set",
        "title": "Quaternion.set( x: Float, y: Float, z: Float, w: Float ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.set",
      },
      Object {
        "description": "Sets this quaternion from rotation specified by axis and angle.
 Adapted from the method [here](http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm).
 *Axis* is assumed to be normalized, *angle* is in radians.",
        "name": "setFromAxisAngle",
        "title": "Quaternion.setFromAxisAngle( axis: Vector3, angle: Float ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.setFromAxisAngle",
      },
      Object {
        "description": "Sets this quaternion from the rotation specified by Euler angle.",
        "name": "setFromEuler",
        "title": "Quaternion.setFromEuler( euler: Euler ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.setFromEuler",
      },
      Object {
        "description": "m - a Matrix4 of which the upper 3x3 of matrix is a pure [rotation matrix](https://en.wikipedia.org/wiki/Rotation_matrix) (i.e. unscaled).
 Sets this quaternion from rotation component of m.
 Adapted from the method [here](http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm).",
        "name": "setFromRotationMatrix",
        "title": "Quaternion.setFromRotationMatrix( m: Matrix4 ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.setFromRotationMatrix",
      },
      Object {
        "description": "Sets this quaternion to the rotation required to rotate direction vector vFrom to direction vector vTo.
 Adapted from the method [here](http://lolengine.net/blog/2013/09/18/beautiful-maths-quaternion-from-vectors).
 vFrom and vTo are assumed to be normalized.",
        "name": "setFromUnitVectors",
        "title": "Quaternion.setFromUnitVectors( vFrom: Vector3, vTo: Vector3 ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.setFromUnitVectors",
      },
      Object {
        "description": "array - An optional array to store the quaternion. If not specified, a new array will be created.
 offset - (optional) if specified, the result will be copied into this Array.
 Returns the numerical elements of this quaternion in an array of format [x, y, z, w].",
        "name": "toArray",
        "title": "Quaternion.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.toArray",
      },
      Object {
        "description": "attribute - the source attribute.
 index - index in the attribute.
 Sets x, y, z, w properties of this quaternion from the attribute.",
        "name": "fromBufferAttribute",
        "title": "Quaternion.fromBufferAttribute( attribute: BufferAttribute, index: Integer ): Quaternion",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.fromBufferAttribute",
      },
      Object {
        "description": "dst - The output array.
 dstOffset - An offset into the output array.
 src0 - The source array of the starting quaternion.
 srcOffset0 - An offset into the array *src0*.
 src1 - The source array of the target quatnerion.
 srcOffset1 - An offset into the array *src1*.
 t - Normalized interpolation factor (between 0 and 1).",
        "name": "slerpFlat",
        "title": "Quaternion.slerpFlat( dst: Array, dstOffset: Integer, src0: Array, srcOffset0: Integer, src1: Array, srcOffset1: Integer, t: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Quaternion.slerpFlat",
      },
    ],
    "title": "Quaternion( x: Float, y: Float, z: Float, w: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Quaternion",
  },
  Object {
    "description": "A ray that emits from an origin in a certain direction. This is used by the Raycaster to assist with [raycasting](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is used for mouse picking (working out what objects in the 3D space the mouse is over) amongst other things.",
    "name": "Ray",
    "properties": Array [
      Object {
        "description": "The origin of the Ray. Default is a Vector3 at (0, 0, 0).",
        "name": "origin",
        "title": "Ray.origin: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Ray.origin",
      },
      Object {
        "description": "The direction of the Ray. This must be normalized (with Vector3.normalize) for the methods to operate properly. Default is a Vector3 at (0, 0, -1).",
        "name": "direction",
        "title": "Ray.direction: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Ray.direction",
      },
      Object {
        "description": "matrix4 - the Matrix4 to apply to this Ray.
 Transform this Ray by the Matrix4.",
        "name": "applyMatrix4",
        "title": "Ray.applyMatrix4( matrix4: Matrix4 ): Ray",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.applyMatrix4",
      },
      Object {
        "description": "t - the distance along the Ray to retrieve a position for.
 target â€” the result will be copied into this Vector3.
 Get a Vector3 that is a given distance along this Ray.",
        "name": "at",
        "title": "Ray.at( t: Float, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.at",
      },
      Object {
        "description": "Creates a new Ray with identical origin and direction to this one.",
        "name": "clone",
        "title": "Ray.clone(): Ray",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.clone",
      },
      Object {
        "description": "point - the point to get the closest approach to. 
 target â€” the result will be copied into this Vector3.
 Get the point along this Ray that is closest to the Vector3 provided.",
        "name": "closestPointToPoint",
        "title": "Ray.closestPointToPoint( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.closestPointToPoint",
      },
      Object {
        "description": "Copies the origin and direction properties of ray into this ray.",
        "name": "copy",
        "title": "Ray.copy( ray: Ray ): Ray",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.copy",
      },
      Object {
        "description": "point - the Vector3 to compute a distance to.
 Get the squared distance of the closest approach between the Ray and the Vector3.",
        "name": "distanceSqToPoint",
        "title": "Ray.distanceSqToPoint( point: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.distanceSqToPoint",
      },
      Object {
        "description": "v0 - the start of the line segment.
 v1 - the end of the line segment.
 optionalPointOnRay - (optional) if this is provided, it receives the point on this Ray that is closest to the segment.
 optionalPointOnSegment - (optional) if this is provided, it receives the point on the line segment that is closest to this Ray.
 Get the squared distance between this Ray and a line segment.",
        "name": "distanceSqToSegment",
        "title": "Ray.distanceSqToSegment( v0: Vector3, v1: Vector3, optionalPointOnRay: Vector3, optionalPointOnSegment: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.distanceSqToSegment",
      },
      Object {
        "description": "plane - the Plane to get the distance to.
 Get the distance from origin to the Plane, or *null* if the Ray doesn't intersect the Plane.",
        "name": "distanceToPlane",
        "title": "Ray.distanceToPlane( plane: Plane ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.distanceToPlane",
      },
      Object {
        "description": "point - Vector3 The Vector3 to compute a distance to.
 Get the distance of the closest approach between the Ray and the point.",
        "name": "distanceToPoint",
        "title": "Ray.distanceToPoint( point: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.distanceToPoint",
      },
      Object {
        "description": "ray - the Ray to compare to.
 Returns true if this and the other ray have equal origin and direction.",
        "name": "equals",
        "title": "Ray.equals( ray: Ray ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.equals",
      },
      Object {
        "description": "box - the Box3 to intersect with.
 target â€” the result will be copied into this Vector3.
 Intersect this Ray with a Box3, returning the intersection point or *null* if there is no intersection.",
        "name": "intersectBox",
        "title": "Ray.intersectBox( box: Box3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectBox",
      },
      Object {
        "description": "plane - the Plane to intersect with.
 target â€” the result will be copied into this Vector3.
 Intersect this Ray with a Plane, returning the intersection point or *null* if there is no intersection.",
        "name": "intersectPlane",
        "title": "Ray.intersectPlane( plane: Plane, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectPlane",
      },
      Object {
        "description": "sphere - the Sphere to intersect with.
 target â€” the result will be copied into this Vector3.
 Intersect this Ray with a Sphere, returning the intersection point or *null* if there is no intersection.",
        "name": "intersectSphere",
        "title": "Ray.intersectSphere( sphere: Sphere, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectSphere",
      },
      Object {
        "description": "a, b, c - The Vector3 points making up the triangle.
 backfaceCulling - whether to use backface culling.
 target â€” the result will be copied into this Vector3.
 Intersect this Ray with a triangle, returning the intersection point or *null* if there is no intersection.",
        "name": "intersectTriangle",
        "title": "Ray.intersectTriangle( a: Vector3, b: Vector3, c: Vector3, backfaceCulling: Boolean, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectTriangle",
      },
      Object {
        "description": "box - the Box3 to intersect with.
 Return true if this Ray intersects with the Box3.",
        "name": "intersectsBox",
        "title": "Ray.intersectsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectsBox",
      },
      Object {
        "description": "plane - the Plane to intersect with.
 Return true if this Ray intersects with the Plane.",
        "name": "intersectsPlane",
        "title": "Ray.intersectsPlane( plane: Plane ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectsPlane",
      },
      Object {
        "description": "sphere - the Sphere to intersect with.
 Return true if this Ray intersects with the Sphere.",
        "name": "intersectsSphere",
        "title": "Ray.intersectsSphere( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.intersectsSphere",
      },
      Object {
        "description": "v - The Vector3 to look at.
 Adjusts the direction of the ray to point at the vector in world coordinates.",
        "name": "lookAt",
        "title": "Ray.lookAt( v: Vector3 ): Ray",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.lookAt",
      },
      Object {
        "description": "t - The distance along the Ray to interpolate.
 Shift the origin of this Ray along its direction by the distance given.",
        "name": "recast",
        "title": "Ray.recast( t: Float ): Ray",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.recast",
      },
      Object {
        "description": "origin - the origin of the Ray.
 origin - the direction of the Ray. This must be normalized (with Vector3.normalize) for the methods to operate properly.
 Sets this ray's origin and direction properties by copying the values from the given objects.",
        "name": "set",
        "title": "Ray.set( origin: Vector3, direction: Vector3 ): Ray",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Ray.set",
      },
    ],
    "title": "Ray( origin: Vector3, direction: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/math/Ray",
  },
  Object {
    "description": "A sphere defined by a center and radius.",
    "name": "Sphere",
    "properties": Array [
      Object {
        "description": "A Vector3 defining the center of the sphere. Default is (0, 0, 0).",
        "name": "center",
        "title": "Sphere.center: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.center",
      },
      Object {
        "description": "The radius of the sphere. Default is 0.",
        "name": "radius",
        "title": "Sphere.radius: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.radius",
      },
      Object {
        "description": "matrix - the Matrix4 to apply 
 Transforms this sphere with the provided Matrix4.",
        "name": "applyMatrix4",
        "title": "Sphere.applyMatrix4( matrix: Matrix4 ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.applyMatrix4",
      },
      Object {
        "description": "point - Vector3 The point to clamp.
 target â€” the result will be copied into this Vector3.
 Clamps a point within the sphere. If the point is outside the sphere, it will clamp it to the closest point on the edge of the sphere. Points already inside the sphere will not be affected.",
        "name": "clampPoint",
        "title": "Sphere.clampPoint( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.clampPoint",
      },
      Object {
        "description": "Returns a new sphere with the same center and radius as this one.",
        "name": "clone",
        "title": "Sphere.clone(): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.clone",
      },
      Object {
        "description": "point - the Vector3 to be checked
 Checks to see if the sphere contains the provided point inclusive of the surface of the sphere.",
        "name": "containsPoint",
        "title": "Sphere.containsPoint( point: Vector3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.containsPoint",
      },
      Object {
        "description": "Copies the values of the passed sphere's center and radius properties to this sphere.",
        "name": "copy",
        "title": "Sphere.copy( sphere: Sphere ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.copy",
      },
      Object {
        "description": "Returns the closest distance from the boundary of the sphere to the point. If the sphere contains the point, the distance will be negative.",
        "name": "distanceToPoint",
        "title": "Sphere.distanceToPoint( point: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.distanceToPoint",
      },
      Object {
        "description": "point - Vector3 that should be included in the sphere.
 Expands the boundaries of this sphere to include point.",
        "name": "expandByPoint",
        "title": "Sphere.expandByPoint( point: Vector3 ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.expandByPoint",
      },
      Object {
        "description": "Checks to see if the sphere is empty (the radius set to a negative number).
 Spheres with a radius of 0 contain only their center point and are not considered to be empty.",
        "name": "isEmpty",
        "title": "Sphere.isEmpty(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.isEmpty",
      },
      Object {
        "description": "Makes the sphere empty by setting center to (0, 0, 0) and radius to -1.",
        "name": "makeEmpty",
        "title": "Sphere.makeEmpty(): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.makeEmpty",
      },
      Object {
        "description": "Checks to see if the two spheres' centers and radii are equal.",
        "name": "equals",
        "title": "Sphere.equals( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.equals",
      },
      Object {
        "description": "target â€” the result will be copied into this Box3.
 Returns a[Minimum Bounding Box](https://en.wikipedia.org/wiki/Minimum_bounding_box) for the sphere.",
        "name": "getBoundingBox",
        "title": "Sphere.getBoundingBox( target: Box3 ): Box3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.getBoundingBox",
      },
      Object {
        "description": "box - Box3 to check for intersection against.
 Determines whether or not this sphere intersects a given box.",
        "name": "intersectsBox",
        "title": "Sphere.intersectsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.intersectsBox",
      },
      Object {
        "description": "plane - Plane to check for intersection against.
 Determines whether or not this sphere intersects a given plane.",
        "name": "intersectsPlane",
        "title": "Sphere.intersectsPlane( plane: Plane ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.intersectsPlane",
      },
      Object {
        "description": "sphere - Sphere to check for intersection against.
 Checks to see if two spheres intersect.",
        "name": "intersectsSphere",
        "title": "Sphere.intersectsSphere( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.intersectsSphere",
      },
      Object {
        "description": "center - center of the sphere.
 radius - radius of the sphere.
 Sets the center and radius properties of this sphere.
 Please note that this method only copies the values from the given center.",
        "name": "set",
        "title": "Sphere.set( center: Vector3, radius: Float ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.set",
      },
      Object {
        "description": "points - an Array of Vector3 positions.
 optionalCenter - Optional Vector3 position for the sphere's center.
 Computes the minimum bounding sphere for an array of points. If optionalCenteris given, it is used as the sphere's center. Otherwise, the center of the axis-aligned bounding box encompassing points is calculated.",
        "name": "setFromPoints",
        "title": "Sphere.setFromPoints( points: Array, optionalCenter: Vector3 ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.setFromPoints",
      },
      Object {
        "description": "Translate the sphere's center by the provided offset Vector3.",
        "name": "translate",
        "title": "Sphere.translate( offset: Vector3 ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.translate",
      },
      Object {
        "description": "sphere - Bounding sphere that will be unioned with this sphere.
 Expands this sphere to enclose both the original sphere and the given sphere.",
        "name": "union",
        "title": "Sphere.union( sphere: Sphere ): Sphere",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Sphere.union",
      },
    ],
    "title": "Sphere( center: Vector3, radius: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Sphere",
  },
  Object {
    "description": "A point's [spherical coordinates](https://en.wikipedia.org/wiki/Spherical_coordinate_system).",
    "name": "Spherical",
    "properties": Array [
      Object {
        "description": undefined,
        "name": "radius",
        "title": "Spherical.radius: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.radius",
      },
      Object {
        "description": undefined,
        "name": "phi",
        "title": "Spherical.phi: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.phi",
      },
      Object {
        "description": undefined,
        "name": "theta",
        "title": "Spherical.theta: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.theta",
      },
      Object {
        "description": "Returns a new spherical with the same radius, phi and theta properties as this one.",
        "name": "clone",
        "title": "Spherical.clone(): Spherical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.clone",
      },
      Object {
        "description": "Copies the values of the passed Spherical's radius, phi and theta properties to this spherical.",
        "name": "copy",
        "title": "Spherical.copy( s: Spherical ): Spherical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.copy",
      },
      Object {
        "description": "Restricts the polar angle phi to be between 0.000001 and pi - 0.000001.",
        "name": "makeSafe",
        "title": "Spherical.makeSafe(): Spherical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.makeSafe",
      },
      Object {
        "description": "Sets values of this spherical's radius, phi and theta properties.",
        "name": "set",
        "title": "Spherical.set( radius: Float, phi: Float, theta: Float ): Spherical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.set",
      },
      Object {
        "description": "Sets values of this spherical's radius, phi and theta properties from the Vector3.",
        "name": "setFromVector3",
        "title": "Spherical.setFromVector3( vec3: Vector3 ): Spherical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.setFromVector3",
      },
      Object {
        "description": "Sets values of this spherical's radius, phi and theta properties from Cartesian coordinates.",
        "name": "setFromCartesianCoords",
        "title": "Spherical.setFromCartesianCoords( x: Float, y: Float, z: Float ): Spherical",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Spherical.setFromCartesianCoords",
      },
    ],
    "title": "Spherical( radius: Float, phi: Float, theta: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Spherical",
  },
  Object {
    "description": "Represents a third-order spherical harmonics (SH). Light probes use this class to encode lighting information.",
    "name": "SphericalHarmonics3",
    "properties": Array [
      Object {
        "description": "An array holding the (9) SH coefficients. A single coefficient is represented as an instance of Vector3.",
        "name": "coefficients",
        "title": "SphericalHarmonics3.coefficients: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.coefficients",
      },
      Object {
        "description": "sh - The SH to add.
 Adds the given SH to this instance.",
        "name": "add",
        "title": "SphericalHarmonics3.add( sh: SphericalHarmonics3 ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.add",
      },
      Object {
        "description": "sh - The SH to add.
 scale - The scale factor.
 A convenience method for performing .add() and .scale() at once.",
        "name": "addScaledSH",
        "title": "SphericalHarmonics3.addScaledSH( sh: SphericalHarmonics3, scale: Number ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.addScaledSH",
      },
      Object {
        "description": "Returns a new instance of SphericalHarmonics3 with equal coefficients.",
        "name": "clone",
        "title": "SphericalHarmonics3.clone(): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.clone",
      },
      Object {
        "description": "sh - The SH to copy.
 Copies the given SH to this instance.",
        "name": "copy",
        "title": "SphericalHarmonics3.copy( sh: SphericalHarmonics3 ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.copy",
      },
      Object {
        "description": "sh - The SH to compare with.
 Returns true if the given SH and this instance have equal coefficients.",
        "name": "equals",
        "title": "SphericalHarmonics3.equals( sh: SphericalHarmonics3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.equals",
      },
      Object {
        "description": "array - The array holding the numbers of the SH coefficients.
 offset - (optional) The array offset.
 Sets the coefficients of this instance from the given array.",
        "name": "fromArray",
        "title": "SphericalHarmonics3.fromArray( array: Array, offset: Number ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.fromArray",
      },
      Object {
        "description": "normal - The normal vector (assumed to be unit length).
 target - The result vector.
 Returns the radiance in the direction of the given normal.",
        "name": "getAt",
        "title": "SphericalHarmonics3.getAt( normal: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.getAt",
      },
      Object {
        "description": "normal - The normal vector (assumed to be unit length).
 target - The result vector.
 Returns the irradiance (radiance convolved with cosine lobe) in the direction of the given normal.",
        "name": "getIrradianceAt",
        "title": "SphericalHarmonics3.getIrradianceAt( normal: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.getIrradianceAt",
      },
      Object {
        "description": "sh - The SH to interpolate with.
 alpha - The alpha factor.
 Linear interpolates between the given SH and this instance by the given alpha factor.",
        "name": "lerp",
        "title": "SphericalHarmonics3.lerp( sh: SphericalHarmonics3, alpha: Number ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.lerp",
      },
      Object {
        "description": "scale - The scale factor.
 Scales this SH by the given scale factor.",
        "name": "scale",
        "title": "SphericalHarmonics3.scale( scale: Number ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.scale",
      },
      Object {
        "description": "coefficients - An array of SH coefficients.
 Sets the given SH coefficients to this instance.",
        "name": "set",
        "title": "SphericalHarmonics3.set( coefficients: Array ): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.set",
      },
      Object {
        "description": "array - (optional) The target array.
 offset - (optional) The array offset.
 Returns an array with the coefficients, or copies them into the provided array. The coefficients are represented as numbers.",
        "name": "toArray",
        "title": "SphericalHarmonics3.toArray( array: Array, offset: Number ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.toArray",
      },
      Object {
        "description": "Sets all SH coefficients to 0.",
        "name": "zero",
        "title": "SphericalHarmonics3.zero(): SphericalHarmonics3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.zero",
      },
      Object {
        "description": "normal - The normal vector (assumed to be unit length).
 shBasis - The resulting SH basis.
 Computes the SH basis for the given normal vector.",
        "name": "getBasisAt",
        "title": "SphericalHarmonics3.getBasisAt( normal: Vector3, shBasis: Array ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3.getBasisAt",
      },
    ],
    "title": "SphericalHarmonics3()",
    "url": "https://threejs.org/docs/#api/en/math/SphericalHarmonics3",
  },
  Object {
    "description": "A geometric triangle as defined by three Vector3s representing its three corners.",
    "name": "Triangle",
    "properties": Array [
      Object {
        "description": "The first corner of the triangle. Default is a Vector3 at (0, 0, 0).",
        "name": "a",
        "title": "Triangle.a: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.a",
      },
      Object {
        "description": "The second corner of the triangle. Default is a Vector3 at (0, 0, 0).",
        "name": "b",
        "title": "Triangle.b: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.b",
      },
      Object {
        "description": "the final corner of the triangle. Default is a Vector3 at (0, 0, 0)",
        "name": "c",
        "title": "Triangle.c: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.c",
      },
      Object {
        "description": "Returns a new triangle with the same a, b and c properties as this one.",
        "name": "clone",
        "title": "Triangle.clone(): Triangle",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.clone",
      },
      Object {
        "description": "point - Vector3 
 target â€” the result will be copied into this Vector3.
 Returns the closest point on the triangle to point.",
        "name": "closestPointToPoint",
        "title": "Triangle.closestPointToPoint( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.closestPointToPoint",
      },
      Object {
        "description": "point - Vector3 to check.
 Returns true if the passed point, when projected onto the plane of the triangle, lies within the triangle.",
        "name": "containsPoint",
        "title": "Triangle.containsPoint( point: Vector3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.containsPoint",
      },
      Object {
        "description": "Copies the values of the passed triangles's a, b and c properties to this triangle.",
        "name": "copy",
        "title": "Triangle.copy( triangle: Triangle ): Triangle",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.copy",
      },
      Object {
        "description": "Returns true if the two triangles have identical a, b and c properties.",
        "name": "equals",
        "title": "Triangle.equals( triangle: Triangle ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.equals",
      },
      Object {
        "description": "Return the area of the triangle.",
        "name": "getArea",
        "title": "Triangle.getArea(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.getArea",
      },
      Object {
        "description": "point - Vector3 
 target â€” the result will be copied into this Vector3.
 Return a [barycentric coordinate](https://en.wikipedia.org/wiki/Barycentric_coordinate_system) from the given vector. 
 [Picture of barycentric coordinates](http://commons.wikimedia.org/wiki/File:Barycentric_coordinates_1.png)",
        "name": "getBarycoord",
        "title": "Triangle.getBarycoord( point: Vector3, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.getBarycoord",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Calculate the midpoint of the triangle.",
        "name": "getMidpoint",
        "title": "Triangle.getMidpoint( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.getMidpoint",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector3.
 Calculate the [normal vector](https://en.wikipedia.org/wiki/Normal_(geometry)) of the triangle.",
        "name": "getNormal",
        "title": "Triangle.getNormal( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.getNormal",
      },
      Object {
        "description": "target â€” the result will be copied into this Plane.
 Calculate a plane based on the triangle. .",
        "name": "getPlane",
        "title": "Triangle.getPlane( target: Plane ): Plane",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.getPlane",
      },
      Object {
        "description": "box - Box to check for intersection against.
 Determines whether or not this triangle intersects box.",
        "name": "intersectsBox",
        "title": "Triangle.intersectsBox( box: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.intersectsBox",
      },
      Object {
        "description": "Sets the triangle's a, b and c properties to the passed vector3s.
 Please note that this method only copies the values from the given objects.",
        "name": "set",
        "title": "Triangle.set( a: Vector3, b: Vector3, c: Vector3 ) this: Triangle: Triangle",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.set",
      },
      Object {
        "description": "points - Array of Vector3s 
 i0 - Integer index 
 i1 - Integer index 
 i2 - Integer index
 Sets the triangle's vectors to the vectors in the array.",
        "name": "setFromPointsAndIndices",
        "title": "Triangle.setFromPointsAndIndices( points: Array, i0: Integer, i1: Integer, i2: Integer ) this: Triangle: Triangle",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Triangle.setFromPointsAndIndices",
      },
    ],
    "title": "Triangle( a: Vector3, b: Vector3, c: Vector3 )",
    "url": "https://threejs.org/docs/#api/en/math/Triangle",
  },
  Object {
    "description": "Class representing a 2D [vector](https://en.wikipedia.org/wiki/Vector_space). A 2D vector is an ordered pair of numbers (labeled x and y), which can be used to represent a number of things, such as:",
    "name": "Vector2",
    "properties": Array [
      Object {
        "description": "Alias for y.",
        "name": "height",
        "title": "Vector2.height: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.height",
      },
      Object {
        "description": "Alias for x.",
        "name": "width",
        "title": "Vector2.width: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.width",
      },
      Object {
        "description": undefined,
        "name": "x",
        "title": "Vector2.x: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.x",
      },
      Object {
        "description": undefined,
        "name": "y",
        "title": "Vector2.y: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.y",
      },
      Object {
        "description": "Adds v to this vector.",
        "name": "add",
        "title": "Vector2.add( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.add",
      },
      Object {
        "description": "Adds the scalar value s to this vector's x and y values.",
        "name": "addScalar",
        "title": "Vector2.addScalar( s: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.addScalar",
      },
      Object {
        "description": "Adds the multiple of v and s to this vector.",
        "name": "addScaledVector",
        "title": "Vector2.addScaledVector( v: Vector2, s: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.addScaledVector",
      },
      Object {
        "description": "Sets this vector to a + b.",
        "name": "addVectors",
        "title": "Vector2.addVectors( a: Vector2, b: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.addVectors",
      },
      Object {
        "description": "Computes the angle in radians of this vector with respect to the positive x-axis.",
        "name": "angle",
        "title": "Vector2.angle(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.angle",
      },
      Object {
        "description": "Multiplies this vector (with an implicit 1 as the 3rd component) by m.",
        "name": "applyMatrix3",
        "title": "Vector2.applyMatrix3( m: Matrix3 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.applyMatrix3",
      },
      Object {
        "description": "The x and y components of this vector are rounded up to the nearest integer value.",
        "name": "ceil",
        "title": "Vector2.ceil(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.ceil",
      },
      Object {
        "description": "min - the minimum x and y values.
 max - the maximum x and y values in the desired range
 If this vector's x or y value is greater than the max vector's x or y value, it is replaced by the corresponding value. 
 If this vector's x or y value is less than the min vector's x or y value, it is replaced by the corresponding value.",
        "name": "clamp",
        "title": "Vector2.clamp( min: Vector2, max: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.clamp",
      },
      Object {
        "description": "min - the minimum value the length will be clamped to 
 max - the maximum value the length will be clamped to
 If this vector's length is greater than the max value, it is replaced by the max value. 
 If this vector's length is less than the min value, it is replaced by the min value.",
        "name": "clampLength",
        "title": "Vector2.clampLength( min: Float, max: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.clampLength",
      },
      Object {
        "description": "min - the minimum value the components will be clamped to 
 max - the maximum value the components will be clamped to
 If this vector's x or y values are greater than the max value, they are replaced by the max value. 
 If this vector's x or y values are less than the min value, they are replaced by the min value.",
        "name": "clampScalar",
        "title": "Vector2.clampScalar( min: Float, max: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.clampScalar",
      },
      Object {
        "description": "Returns a new Vector2 with the same x and y values as this one.",
        "name": "clone",
        "title": "Vector2.clone(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.clone",
      },
      Object {
        "description": "Copies the values of the passed Vector2's x and y properties to this Vector2.",
        "name": "copy",
        "title": "Vector2.copy( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.copy",
      },
      Object {
        "description": "Computes the distance from this vector to v.",
        "name": "distanceTo",
        "title": "Vector2.distanceTo( v: Vector2 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.distanceTo",
      },
      Object {
        "description": "Computes the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry) from this vector to v.",
        "name": "manhattanDistanceTo",
        "title": "Vector2.manhattanDistanceTo( v: Vector2 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.manhattanDistanceTo",
      },
      Object {
        "description": "Computes the squared distance from this vector to v. If you are just comparing the distance with another distance, you should compare the distance squared instead as it is slightly more efficient to calculate.",
        "name": "distanceToSquared",
        "title": "Vector2.distanceToSquared( v: Vector2 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.distanceToSquared",
      },
      Object {
        "description": "Divides this vector by v.",
        "name": "divide",
        "title": "Vector2.divide( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.divide",
      },
      Object {
        "description": "Divides this vector by scalar s.
 Sets vector to *( 0, 0 )* if s = 0.",
        "name": "divideScalar",
        "title": "Vector2.divideScalar( s: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.divideScalar",
      },
      Object {
        "description": "Calculates the [dot product](https://en.wikipedia.org/wiki/Dot_product) of this vector and v.",
        "name": "dot",
        "title": "Vector2.dot( v: Vector2 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.dot",
      },
      Object {
        "description": "Calculates the [cross product](https://en.wikipedia.org/wiki/Cross_product) of this vector and v. Note that a 'cross-product' in 2D is not well-defined. This function computes a geometric cross-product often used in 2D graphics",
        "name": "cross",
        "title": "Vector2.cross( v: Vector2 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.cross",
      },
      Object {
        "description": "Checks for strict equality of this vector and v.",
        "name": "equals",
        "title": "Vector2.equals( v: Vector2 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.equals",
      },
      Object {
        "description": "The components of this vector are rounded down to the nearest integer value.",
        "name": "floor",
        "title": "Vector2.floor(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.floor",
      },
      Object {
        "description": "array - the source array.
 offset - (optional) offset into the array. Default is 0.
 Sets this vector's x value to be arrayy value to be array[ offset + 1 ].",
        "name": "fromArray",
        "title": "Vector2.fromArray( array: Array, offset: Integer ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.fromArray",
      },
      Object {
        "description": "attribute - the source attribute.
 index - index in the attribute.
 Sets this vector's x and y values from the attribute.",
        "name": "fromBufferAttribute",
        "title": "Vector2.fromBufferAttribute( attribute: BufferAttribute, index: Integer ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.fromBufferAttribute",
      },
      Object {
        "description": "index - 0 or 1.
 If index equals 0 returns the x value. 
 If index equals 1 returns the y value.",
        "name": "getComponent",
        "title": "Vector2.getComponent( index: Integer ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.getComponent",
      },
      Object {
        "description": "Computes the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) from (0, 0) to (x, y).",
        "name": "length",
        "title": "Vector2.length(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.length",
      },
      Object {
        "description": "Computes the [Manhattan length](http://en.wikipedia.org/wiki/Taxicab_geometry) of this vector.",
        "name": "manhattanLength",
        "title": "Vector2.manhattanLength(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.manhattanLength",
      },
      Object {
        "description": "Computes the square of the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) from (0, 0) to (x, y). If you are comparing the lengths of vectors, you should compare the length squared instead as it is slightly more efficient to calculate.",
        "name": "lengthSq",
        "title": "Vector2.lengthSq(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.lengthSq",
      },
      Object {
        "description": "v - Vector2 to interpolate towards.
 alpha - interpolation factor, typically in the closed interval v, where alpha is the percent distance along the line - alpha = 0 will be this vector, and alpha = 1 will be v.",
        "name": "lerp",
        "title": "Vector2.lerp( v: Vector2, alpha: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.lerp",
      },
      Object {
        "description": "v1 - the starting Vector2.
 v2 - Vector2 to interpolate towards.
 alpha - interpolation factor, typically in the closed interval v1 and v2 where alpha is the percent distance along the line connecting the two vectors - alpha = 0 will be v1, and alpha = 1 will be v2.",
        "name": "lerpVectors",
        "title": "Vector2.lerpVectors( v1: Vector2, v2: Vector2, alpha: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.lerpVectors",
      },
      Object {
        "description": "Inverts this vector - i.e. sets x = -x and y = -y.",
        "name": "negate",
        "title": "Vector2.negate(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.negate",
      },
      Object {
        "description": "Converts this vector to a [unit vector](https://en.wikipedia.org/wiki/Unit_vector) - that is, sets it equal to a vector with the same direction as this one, but length 1.",
        "name": "normalize",
        "title": "Vector2.normalize(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.normalize",
      },
      Object {
        "description": "If this vector's x or y value is less than v's x or y value, replace that value with the corresponding max value.",
        "name": "max",
        "title": "Vector2.max( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.max",
      },
      Object {
        "description": "If this vector's x or y value is greater than v's x or y value, replace that value with the corresponding min value.",
        "name": "min",
        "title": "Vector2.min( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.min",
      },
      Object {
        "description": "Multiplies this vector by v.",
        "name": "multiply",
        "title": "Vector2.multiply( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.multiply",
      },
      Object {
        "description": "Multiplies this vector by scalar s.",
        "name": "multiplyScalar",
        "title": "Vector2.multiplyScalar( s: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.multiplyScalar",
      },
      Object {
        "description": "center - the point around which to rotate.
 angle - the angle to rotate, in radians.
 Rotates this vector around center by angle radians.",
        "name": "rotateAround",
        "title": "Vector2.rotateAround( center: Vector2, angle: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.rotateAround",
      },
      Object {
        "description": "The components of this vector are rounded to the nearest integer value.",
        "name": "round",
        "title": "Vector2.round(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.round",
      },
      Object {
        "description": "The components of this vector are rounded towards zero (up if negative, down if positive) to an integer value.",
        "name": "roundToZero",
        "title": "Vector2.roundToZero(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.roundToZero",
      },
      Object {
        "description": "Sets the x and y components of this vector.",
        "name": "set",
        "title": "Vector2.set( x: Float, y: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.set",
      },
      Object {
        "description": "index - 0 or 1.
 value - Float
 If index equals 0 set x to value. 
 If index equals 1 set y to value",
        "name": "setComponent",
        "title": "Vector2.setComponent( index: Integer, value: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.setComponent",
      },
      Object {
        "description": "Sets this vector to a vector with the same direction as this one, but length l.",
        "name": "setLength",
        "title": "Vector2.setLength( l: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.setLength",
      },
      Object {
        "description": "Sets the x and y values of this vector both equal to scalar.",
        "name": "setScalar",
        "title": "Vector2.setScalar( scalar: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.setScalar",
      },
      Object {
        "description": "Replaces this vector's x value with x.",
        "name": "setX",
        "title": "Vector2.setX( x: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.setX",
      },
      Object {
        "description": "Replaces this vector's y value with y.",
        "name": "setY",
        "title": "Vector2.setY( y: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.setY",
      },
      Object {
        "description": "Subtracts v from this vector.",
        "name": "sub",
        "title": "Vector2.sub( v: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.sub",
      },
      Object {
        "description": "Subtracts s from this vector's x and y components.",
        "name": "subScalar",
        "title": "Vector2.subScalar( s: Float ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.subScalar",
      },
      Object {
        "description": "Sets this vector to a - b.",
        "name": "subVectors",
        "title": "Vector2.subVectors( a: Vector2, b: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.subVectors",
      },
      Object {
        "description": "array - (optional) array to store this vector to. If this is not provided, a new array will be created.
 offset - (optional) optional offset into the array.
 Returns an array array.",
        "name": "toArray",
        "title": "Vector2.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.toArray",
      },
      Object {
        "description": "Sets each component of this vector to a pseudo-random value between 0 and 1, excluding 1.",
        "name": "random",
        "title": "Vector2.random(): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector2.random",
      },
    ],
    "title": "Vector2( x: Float, y: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Vector2",
  },
  Object {
    "description": "Class representing a 3D [vector](https://en.wikipedia.org/wiki/Vector_space). A 3D vector is an ordered triplet of numbers (labeled x, y, and z), which can be used to represent a number of things, such as:",
    "name": "Vector3",
    "properties": Array [
      Object {
        "description": undefined,
        "name": "x",
        "title": "Vector3.x: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.x",
      },
      Object {
        "description": undefined,
        "name": "y",
        "title": "Vector3.y: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.y",
      },
      Object {
        "description": undefined,
        "name": "z",
        "title": "Vector3.z: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.z",
      },
      Object {
        "description": "Adds v to this vector.",
        "name": "add",
        "title": "Vector3.add( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.add",
      },
      Object {
        "description": "Adds the scalar value s to this vector's x, y and z values.",
        "name": "addScalar",
        "title": "Vector3.addScalar( s: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.addScalar",
      },
      Object {
        "description": "Adds the multiple of v and s to this vector.",
        "name": "addScaledVector",
        "title": "Vector3.addScaledVector( v: Vector3, s: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.addScaledVector",
      },
      Object {
        "description": "Sets this vector to a + b.",
        "name": "addVectors",
        "title": "Vector3.addVectors( a: Vector3, b: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.addVectors",
      },
      Object {
        "description": "axis - A normalized Vector3.
 angle - An angle in radians.
 Applies a rotation specified by an axis and an angle to this vector.",
        "name": "applyAxisAngle",
        "title": "Vector3.applyAxisAngle( axis: Vector3, angle: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.applyAxisAngle",
      },
      Object {
        "description": "Applies euler transform to this vector by converting the Euler object to a Quaternion and applying.",
        "name": "applyEuler",
        "title": "Vector3.applyEuler( euler: Euler ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.applyEuler",
      },
      Object {
        "description": "Multiplies this vector by m",
        "name": "applyMatrix3",
        "title": "Vector3.applyMatrix3( m: Matrix3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.applyMatrix3",
      },
      Object {
        "description": "Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective.",
        "name": "applyMatrix4",
        "title": "Vector3.applyMatrix4( m: Matrix4 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.applyMatrix4",
      },
      Object {
        "description": "Multiplies this vector by normal matrix m and normalizes the result.",
        "name": "applyNormalMatrix",
        "title": "Vector3.applyNormalMatrix( m: Matrix3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.applyNormalMatrix",
      },
      Object {
        "description": "Applies a Quaternion transform to this vector.",
        "name": "applyQuaternion",
        "title": "Vector3.applyQuaternion( quaternion: Quaternion ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.applyQuaternion",
      },
      Object {
        "description": "Returns the angle between this vector and vector v in radians.",
        "name": "angleTo",
        "title": "Vector3.angleTo( v: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.angleTo",
      },
      Object {
        "description": "The x, y and z components of this vector are rounded up to the nearest integer value.",
        "name": "ceil",
        "title": "Vector3.ceil(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.ceil",
      },
      Object {
        "description": "min - the minimum x, y and z values.
 max - the maximum x, y and z values in the desired range
 If this vector's x, y or z value is greater than the max vector's x, y or z value, it is replaced by the corresponding value. 
 If this vector's x, y or z value is less than the min vector's x, y or z value, it is replaced by the corresponding value.",
        "name": "clamp",
        "title": "Vector3.clamp( min: Vector3, max: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.clamp",
      },
      Object {
        "description": "min - the minimum value the length will be clamped to 
 max - the maximum value the length will be clamped to
 If this vector's length is greater than the max value, the vector will be scaled down so its length is the max value. 
 If this vector's length is less than the min value, the vector will be scaled up so its length is the min value.",
        "name": "clampLength",
        "title": "Vector3.clampLength( min: Float, max: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.clampLength",
      },
      Object {
        "description": "min - the minimum value the components will be clamped to 
 max - the maximum value the components will be clamped to
 If this vector's x, y or z values are greater than the max value, they are replaced by the max value. 
 If this vector's x, y or z values are less than the min value, they are replaced by the min value.",
        "name": "clampScalar",
        "title": "Vector3.clampScalar( min: Float, max: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.clampScalar",
      },
      Object {
        "description": "Returns a new vector3 with the same x, y and z values as this one.",
        "name": "clone",
        "title": "Vector3.clone(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.clone",
      },
      Object {
        "description": "Copies the values of the passed vector3's x, y and z properties to this vector3.",
        "name": "copy",
        "title": "Vector3.copy( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.copy",
      },
      Object {
        "description": "Sets this vector to [cross product](https://en.wikipedia.org/wiki/Cross_product) of itself and v.",
        "name": "cross",
        "title": "Vector3.cross( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.cross",
      },
      Object {
        "description": "Sets this vector to [cross product](https://en.wikipedia.org/wiki/Cross_product) of a and b.",
        "name": "crossVectors",
        "title": "Vector3.crossVectors( a: Vector3, b: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.crossVectors",
      },
      Object {
        "description": "Computes the distance from this vector to v.",
        "name": "distanceTo",
        "title": "Vector3.distanceTo( v: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.distanceTo",
      },
      Object {
        "description": "Computes the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry) from this vector to v.",
        "name": "manhattanDistanceTo",
        "title": "Vector3.manhattanDistanceTo( v: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.manhattanDistanceTo",
      },
      Object {
        "description": "Computes the squared distance from this vector to v. If you are just comparing the distance with another distance, you should compare the distance squared instead as it is slightly more efficient to calculate.",
        "name": "distanceToSquared",
        "title": "Vector3.distanceToSquared( v: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.distanceToSquared",
      },
      Object {
        "description": "Divides this vector by v.",
        "name": "divide",
        "title": "Vector3.divide( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.divide",
      },
      Object {
        "description": "Divides this vector by scalar s.
 Sets vector to *( 0, 0, 0 )* if *s = 0*.",
        "name": "divideScalar",
        "title": "Vector3.divideScalar( s: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.divideScalar",
      },
      Object {
        "description": "Calculate the [dot product](https://en.wikipedia.org/wiki/Dot_product) of this vector and v.",
        "name": "dot",
        "title": "Vector3.dot( v: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.dot",
      },
      Object {
        "description": "Checks for strict equality of this vector and v.",
        "name": "equals",
        "title": "Vector3.equals( v: Vector3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.equals",
      },
      Object {
        "description": "The components of this vector are rounded down to the nearest integer value.",
        "name": "floor",
        "title": "Vector3.floor(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.floor",
      },
      Object {
        "description": "array - the source array.
 offset - ( optional) offset into the array. Default is 0.
 Sets this vector's x value to be arrayy value to be arrayz value to be array[ offset + 2 ].",
        "name": "fromArray",
        "title": "Vector3.fromArray( array: Array, offset: Integer ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.fromArray",
      },
      Object {
        "description": "attribute - the source attribute.
 index - index in the attribute.
 Sets this vector's x, y and z values from the attribute.",
        "name": "fromBufferAttribute",
        "title": "Vector3.fromBufferAttribute( attribute: BufferAttribute, index: Integer ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.fromBufferAttribute",
      },
      Object {
        "description": "index - 0, 1 or 2.
 If index equals 0 returns the x value. 
 If index equals 1 returns the y value. 
 If index equals 2 returns the z value.",
        "name": "getComponent",
        "title": "Vector3.getComponent( index: Integer ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.getComponent",
      },
      Object {
        "description": "Computes the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) from (0, 0, 0) to (x, y, z).",
        "name": "length",
        "title": "Vector3.length(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.length",
      },
      Object {
        "description": "Computes the [Manhattan length](http://en.wikipedia.org/wiki/Taxicab_geometry) of this vector.",
        "name": "manhattanLength",
        "title": "Vector3.manhattanLength(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.manhattanLength",
      },
      Object {
        "description": "Computes the square of the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) from (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should compare the length squared instead as it is slightly more efficient to calculate.",
        "name": "lengthSq",
        "title": "Vector3.lengthSq(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.lengthSq",
      },
      Object {
        "description": "v - Vector3 to interpolate towards.
 alpha - interpolation factor, typically in the closed interval v, where alpha is the percent distance along the line - alpha = 0 will be this vector, and alpha = 1 will be v.",
        "name": "lerp",
        "title": "Vector3.lerp( v: Vector3, alpha: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.lerp",
      },
      Object {
        "description": "v1 - the starting Vector3.
 v2 - Vector3 to interpolate towards.
 alpha - interpolation factor, typically in the closed interval v1 and v2 where alpha is the percent distance along the line connecting the two vectors - alpha = 0 will be v1, and alpha = 1 will be v2.",
        "name": "lerpVectors",
        "title": "Vector3.lerpVectors( v1: Vector3, v2: Vector3, alpha: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.lerpVectors",
      },
      Object {
        "description": "If this vector's x, y or z value is less than v's x, y or z value, replace that value with the corresponding max value.",
        "name": "max",
        "title": "Vector3.max( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.max",
      },
      Object {
        "description": "If this vector's x, y or z value is greater than v's x, y or z value, replace that value with the corresponding min value.",
        "name": "min",
        "title": "Vector3.min( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.min",
      },
      Object {
        "description": "Multiplies this vector by v.",
        "name": "multiply",
        "title": "Vector3.multiply( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.multiply",
      },
      Object {
        "description": "Multiplies this vector by scalar s.",
        "name": "multiplyScalar",
        "title": "Vector3.multiplyScalar( s: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.multiplyScalar",
      },
      Object {
        "description": "Sets this vector equal to a * b, component-wise.",
        "name": "multiplyVectors",
        "title": "Vector3.multiplyVectors( a: Vector3, b: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.multiplyVectors",
      },
      Object {
        "description": "Inverts this vector - i.e. sets x = -x, y = -y and z = -z.",
        "name": "negate",
        "title": "Vector3.negate(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.negate",
      },
      Object {
        "description": "Convert this vector to a [unit vector](https://en.wikipedia.org/wiki/Unit_vector) - that is, sets it equal to a vector with the same direction as this one, but length 1.",
        "name": "normalize",
        "title": "Vector3.normalize(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.normalize",
      },
      Object {
        "description": "camera â€” camera to use in the projection.
 Projects this vector from world space into the camera's normalized device coordinate (NDC) space.",
        "name": "project",
        "title": "Vector3.project( camera: Camera ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.project",
      },
      Object {
        "description": "planeNormal - A vector representing a plane normal.
 [Projects](https://en.wikipedia.org/wiki/Vector_projection) this vector onto a plane by subtracting this vector projected onto the plane's normal from this vector.",
        "name": "projectOnPlane",
        "title": "Vector3.projectOnPlane( planeNormal: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.projectOnPlane",
      },
      Object {
        "description": "[Projects](https://en.wikipedia.org/wiki/Vector_projection) this vector onto v.",
        "name": "projectOnVector",
        "title": "Vector3.projectOnVector( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.projectOnVector",
      },
      Object {
        "description": "normal - the normal to the reflecting plane
 Reflect this vector off of plane orthogonal to normal. Normal is assumed to have unit length.",
        "name": "reflect",
        "title": "Vector3.reflect( normal: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.reflect",
      },
      Object {
        "description": "The components of this vector are rounded to the nearest integer value.",
        "name": "round",
        "title": "Vector3.round(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.round",
      },
      Object {
        "description": "The components of this vector are rounded towards zero (up if negative, down if positive) to an integer value.",
        "name": "roundToZero",
        "title": "Vector3.roundToZero(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.roundToZero",
      },
      Object {
        "description": "Sets the x, y and z components of this vector.",
        "name": "set",
        "title": "Vector3.set( x: Float, y: Float, z: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.set",
      },
      Object {
        "description": "index - 0, 1 or 2.
 value - Float
 If index equals 0 set x to value.
 If index equals 1 set y to value.
 If index equals 2 set z to value",
        "name": "setComponent",
        "title": "Vector3.setComponent( index: Integer, value: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setComponent",
      },
      Object {
        "description": "Sets this vector from the cylindrical coordinates c.",
        "name": "setFromCylindrical",
        "title": "Vector3.setFromCylindrical( c: Cylindrical ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromCylindrical",
      },
      Object {
        "description": "Sets this vector from the cylindrical coordinates radius, theta and y.",
        "name": "setFromCylindricalCoords",
        "title": "Vector3.setFromCylindricalCoords( radius: Float, theta: Float, y: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromCylindricalCoords",
      },
      Object {
        "description": "Sets this vector's x, y and z components from index column of matrix.",
        "name": "setFromMatrixColumn",
        "title": "Vector3.setFromMatrixColumn( matrix: Matrix4, index: Integer ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromMatrixColumn",
      },
      Object {
        "description": "Sets this vector's x, y and z components from index column of matrix.",
        "name": "setFromMatrix3Column",
        "title": "Vector3.setFromMatrix3Column( matrix: Matrix3, index: Integer ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromMatrix3Column",
      },
      Object {
        "description": "Sets this vector to the position elements of the [transformation matrix](https://en.wikipedia.org/wiki/Transformation_matrix) m.",
        "name": "setFromMatrixPosition",
        "title": "Vector3.setFromMatrixPosition( m: Matrix4 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromMatrixPosition",
      },
      Object {
        "description": "Sets this vector to the scale elements of the [transformation matrix](https://en.wikipedia.org/wiki/Transformation_matrix) m.",
        "name": "setFromMatrixScale",
        "title": "Vector3.setFromMatrixScale( m: Matrix4 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromMatrixScale",
      },
      Object {
        "description": "Sets this vector from the spherical coordinates s.",
        "name": "setFromSpherical",
        "title": "Vector3.setFromSpherical( s: Spherical ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromSpherical",
      },
      Object {
        "description": "Sets this vector from the spherical coordinates radius, phi and theta.",
        "name": "setFromSphericalCoords",
        "title": "Vector3.setFromSphericalCoords( radius: Float, phi: Float, theta: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setFromSphericalCoords",
      },
      Object {
        "description": "Set this vector to a vector with the same direction as this one, but length l.",
        "name": "setLength",
        "title": "Vector3.setLength( l: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setLength",
      },
      Object {
        "description": "Set the x, y and z values of this vector both equal to scalar.",
        "name": "setScalar",
        "title": "Vector3.setScalar( scalar: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setScalar",
      },
      Object {
        "description": "Replace this vector's x value with x.",
        "name": "setX",
        "title": "Vector3.setX( x: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setX",
      },
      Object {
        "description": "Replace this vector's y value with y.",
        "name": "setY",
        "title": "Vector3.setY( y: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setY",
      },
      Object {
        "description": "Replace this vector's z value with z.",
        "name": "setZ",
        "title": "Vector3.setZ( z: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.setZ",
      },
      Object {
        "description": "Subtracts v from this vector.",
        "name": "sub",
        "title": "Vector3.sub( v: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.sub",
      },
      Object {
        "description": "Subtracts s from this vector's x, y and z compnents.",
        "name": "subScalar",
        "title": "Vector3.subScalar( s: Float ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.subScalar",
      },
      Object {
        "description": "Sets this vector to a - b.",
        "name": "subVectors",
        "title": "Vector3.subVectors( a: Vector3, b: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.subVectors",
      },
      Object {
        "description": "array - (optional) array to store this vector to. If this is not provided a new array will be created.
 offset - (optional) optional offset into the array.
 Returns an array array.",
        "name": "toArray",
        "title": "Vector3.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.toArray",
      },
      Object {
        "description": "Transforms the direction of this vector by a matrix (the upper left 3 x 3 subset of a m) and then normalizes the result.",
        "name": "transformDirection",
        "title": "Vector3.transformDirection( m: Matrix4 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.transformDirection",
      },
      Object {
        "description": "camera â€” camera to use in the projection.
 Projects this vector from the camera's normalized device coordinate (NDC) space into world space.",
        "name": "unproject",
        "title": "Vector3.unproject( camera: Camera ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.unproject",
      },
      Object {
        "description": "Sets each component of this vector to a pseudo-random value between 0 and 1, excluding 1.",
        "name": "random",
        "title": "Vector3.random(): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector3.random",
      },
    ],
    "title": "Vector3( x: Float, y: Float, z: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Vector3",
  },
  Object {
    "description": "Class representing a 4D [vector](https://en.wikipedia.org/wiki/Vector_space). A 4D vector is an ordered quadruplet of numbers (labeled x, y, z, and w), which can be used to represent a number of things, such as:",
    "name": "Vector4",
    "properties": Array [
      Object {
        "description": undefined,
        "name": "x",
        "title": "Vector4.x: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.x",
      },
      Object {
        "description": undefined,
        "name": "y",
        "title": "Vector4.y: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.y",
      },
      Object {
        "description": undefined,
        "name": "z",
        "title": "Vector4.z: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.z",
      },
      Object {
        "description": undefined,
        "name": "w",
        "title": "Vector4.w: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.w",
      },
      Object {
        "description": "Alias for z.",
        "name": "width",
        "title": "Vector4.width: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.width",
      },
      Object {
        "description": "Alias for w.",
        "name": "height",
        "title": "Vector4.height: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.height",
      },
      Object {
        "description": "Adds v to this vector.",
        "name": "add",
        "title": "Vector4.add( v: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.add",
      },
      Object {
        "description": "Adds the scalar value s to this vector's x, y, z and w values.",
        "name": "addScalar",
        "title": "Vector4.addScalar( s: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.addScalar",
      },
      Object {
        "description": "Adds the multiple of v and s to this vector.",
        "name": "addScaledVector",
        "title": "Vector4.addScaledVector( v: Vector4, s: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.addScaledVector",
      },
      Object {
        "description": "Sets this vector to a + b.",
        "name": "addVectors",
        "title": "Vector4.addVectors( a: Vector4, b: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.addVectors",
      },
      Object {
        "description": "Multiplies this vector by 4 x 4 m.",
        "name": "applyMatrix4",
        "title": "Vector4.applyMatrix4( m: Matrix4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.applyMatrix4",
      },
      Object {
        "description": "The x, y, z and w components of this vector are rounded up to the nearest integer value.",
        "name": "ceil",
        "title": "Vector4.ceil(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.ceil",
      },
      Object {
        "description": "min - the minimum x, y, z and w values.
 max - the maximum x, y, z and w values in the desired range
 If this vector's x, y, z or w value is greater than the max vector's x, y, z or w value, it is replaced by the corresponding value. 
 If this vector's x, y, z or w value is less than the min vector's x, y, z or w value, it is replaced by the corresponding value.",
        "name": "clamp",
        "title": "Vector4.clamp( min: Vector4, max: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.clamp",
      },
      Object {
        "description": "min - the minimum value the length will be clamped to 
 max - the maximum value the length will be clamped to
 If this vector's length is greater than the max value, it is replaced by the max value. 
 If this vector's length is less than the min value, it is replaced by the min value.",
        "name": "clampLength",
        "title": "Vector4.clampLength( min: Float, max: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.clampLength",
      },
      Object {
        "description": "min - the minimum value the components will be clamped to 
 max - the maximum value the components will be clamped to
 If this vector's x, y, z or w values are greater than the max value, they are replaced by the max value. 
 If this vector's x, y, z or w values are less than the min value, they are replaced by the min value.",
        "name": "clampScalar",
        "title": "Vector4.clampScalar( min: Float, max: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.clampScalar",
      },
      Object {
        "description": "Returns a new Vector4 with the same x, y, z and w values as this one.",
        "name": "clone",
        "title": "Vector4.clone(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.clone",
      },
      Object {
        "description": "Copies the values of the passed Vector4's x, y, z and w properties to this Vector4.",
        "name": "copy",
        "title": "Vector4.copy( v: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.copy",
      },
      Object {
        "description": "Divides this vector by scalar s.
 Sets vector to *( 0, 0, 0, 0 )* if *s = 0*.",
        "name": "divideScalar",
        "title": "Vector4.divideScalar( s: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.divideScalar",
      },
      Object {
        "description": "Calculates the [dot product](https://en.wikipedia.org/wiki/Dot_product) of this vector and v.",
        "name": "dot",
        "title": "Vector4.dot( v: Vector4 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.dot",
      },
      Object {
        "description": "Checks for strict equality of this vector and v.",
        "name": "equals",
        "title": "Vector4.equals( v: Vector4 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.equals",
      },
      Object {
        "description": "The components of this vector are rounded down to the nearest integer value.",
        "name": "floor",
        "title": "Vector4.floor(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.floor",
      },
      Object {
        "description": "array - the source array.
 offset - (optional) offset into the array. Default is 0.
 Sets this vector's x value to be arrayy value to be arrayz value to be arrayw value to be array[ offset + 3 ].",
        "name": "fromArray",
        "title": "Vector4.fromArray( array: Array, offset: Integer ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.fromArray",
      },
      Object {
        "description": "attribute - the source attribute.
 index - index in the attribute.
 Sets this vector's x, y, z and w values from the attribute.",
        "name": "fromBufferAttribute",
        "title": "Vector4.fromBufferAttribute( attribute: BufferAttribute, index: Integer ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.fromBufferAttribute",
      },
      Object {
        "description": "index - 0, 1, 2 or 3.
 If index equals 0 returns the x value. 
 If index equals 1 returns the y value. 
 If index equals 2 returns the z value.
 If index equals 3 returns the w value.",
        "name": "getComponent",
        "title": "Vector4.getComponent( index: Integer ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.getComponent",
      },
      Object {
        "description": "Computes the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).",
        "name": "length",
        "title": "Vector4.length(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.length",
      },
      Object {
        "description": "Computes the [Manhattan length](http://en.wikipedia.org/wiki/Taxicab_geometry) of this vector.",
        "name": "manhattanLength",
        "title": "Vector4.manhattanLength(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.manhattanLength",
      },
      Object {
        "description": "Computes the square of the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) from (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should compare the length squared instead as it is slightly more efficient to calculate.",
        "name": "lengthSq",
        "title": "Vector4.lengthSq(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.lengthSq",
      },
      Object {
        "description": "v - Vector4 to interpolate towards.
 alpha - interpolation factor, typically in the closed interval v, where alpha is the percent distance along the line - alpha = 0 will be this vector, and alpha = 1 will be v.",
        "name": "lerp",
        "title": "Vector4.lerp( v: Vector4, alpha: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.lerp",
      },
      Object {
        "description": "v1 - the starting Vector4.
 v2 - Vector4 to interpolate towards.
 alpha - interpolation factor, typically in the closed interval v1 and v2 where alpha is the percent distance along the line connecting the two vectors - alpha = 0 will be v1, and alpha = 1 will be v2.",
        "name": "lerpVectors",
        "title": "Vector4.lerpVectors( v1: Vector4, v2: Vector4, alpha: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.lerpVectors",
      },
      Object {
        "description": "Inverts this vector - i.e. sets x = -x, y = -y, z = -z and w = -w.",
        "name": "negate",
        "title": "Vector4.negate(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.negate",
      },
      Object {
        "description": "Converts this vector to a [unit vector](https://en.wikipedia.org/wiki/Unit_vector) - that is, sets it equal to a vector with the same direction as this one, but length 1.",
        "name": "normalize",
        "title": "Vector4.normalize(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.normalize",
      },
      Object {
        "description": "If this vector's x, y, z or w value is less than v's x, y, z or w value, replace that value with the corresponding max value.",
        "name": "max",
        "title": "Vector4.max( v: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.max",
      },
      Object {
        "description": "If this vector's x, y, z or w value is greater than v's x, y, z or w value, replace that value with the corresponding min value.",
        "name": "min",
        "title": "Vector4.min( v: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.min",
      },
      Object {
        "description": "Multiplies this vector by v.",
        "name": "multiply",
        "title": "Vector4.multiply( v: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.multiply",
      },
      Object {
        "description": "Multiplies this vector by scalar s.",
        "name": "multiplyScalar",
        "title": "Vector4.multiplyScalar( s: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.multiplyScalar",
      },
      Object {
        "description": "The components of this vector are rounded to the nearest integer value.",
        "name": "round",
        "title": "Vector4.round(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.round",
      },
      Object {
        "description": "The components of this vector are rounded towards zero (up if negative, down if positive) to an integer value.",
        "name": "roundToZero",
        "title": "Vector4.roundToZero(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.roundToZero",
      },
      Object {
        "description": "Sets the x, y, z and w components of this vector.",
        "name": "set",
        "title": "Vector4.set( x: Float, y: Float, z: Float, w: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.set",
      },
      Object {
        "description": "q - a normalized Quaterion
 Sets the x, y and z components of this vector to the quaternion's axis and w to the angle.",
        "name": "setAxisAngleFromQuaternion",
        "title": "Vector4.setAxisAngleFromQuaternion( q: Quaterion ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setAxisAngleFromQuaternion",
      },
      Object {
        "description": "m - a Matrix4 of which the upper left 3x3 matrix is a pure rotation matrix.
 Sets the x, y and z to the axis of rotation and w to the angle.",
        "name": "setAxisAngleFromRotationMatrix",
        "title": "Vector4.setAxisAngleFromRotationMatrix( m: Matrix4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setAxisAngleFromRotationMatrix",
      },
      Object {
        "description": "index - 0, 1 or 2.
 value - Float
 If index equals 0 set x to value.
 If index equals 1 set y to value.
 If index equals 2 set z to value.
 If index equals 3 set w to value.",
        "name": "setComponent",
        "title": "Vector4.setComponent( index: Integer, value: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setComponent",
      },
      Object {
        "description": "Sets this vector to a vector with the same direction as this one, but length l.",
        "name": "setLength",
        "title": "Vector4.setLength( l: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setLength",
      },
      Object {
        "description": "Sets the x, y, z and w values of this vector both equal to scalar.",
        "name": "setScalar",
        "title": "Vector4.setScalar( scalar: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setScalar",
      },
      Object {
        "description": "Replaces this vector's x value with x.",
        "name": "setX",
        "title": "Vector4.setX( x: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setX",
      },
      Object {
        "description": "Replaces this vector's y value with y.",
        "name": "setY",
        "title": "Vector4.setY( y: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setY",
      },
      Object {
        "description": "Replaces this vector's z value with z.",
        "name": "setZ",
        "title": "Vector4.setZ( z: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setZ",
      },
      Object {
        "description": "Replaces this vector's w value with w.",
        "name": "setW",
        "title": "Vector4.setW( w: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.setW",
      },
      Object {
        "description": "Subtracts v from this vector.",
        "name": "sub",
        "title": "Vector4.sub( v: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.sub",
      },
      Object {
        "description": "Subtracts s from this vector's x, y, z and w compnents.",
        "name": "subScalar",
        "title": "Vector4.subScalar( s: Float ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.subScalar",
      },
      Object {
        "description": "Sets this vector to a - b.",
        "name": "subVectors",
        "title": "Vector4.subVectors( a: Vector4, b: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.subVectors",
      },
      Object {
        "description": "array - (optional) array to store this vector to. If this is not provided, a new array will be created.
 offset - (optional) optional offset into the array.
 Returns an array array.",
        "name": "toArray",
        "title": "Vector4.toArray( array: Array, offset: Integer ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.toArray",
      },
      Object {
        "description": "Sets each component of this vector to a pseudo-random value between 0 and 1, excluding 1.",
        "name": "random",
        "title": "Vector4.random(): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/Vector4.random",
      },
    ],
    "title": "Vector4( x: Float, y: Float, z: Float, w: Float )",
    "url": "https://threejs.org/docs/#api/en/math/Vector4",
  },
  Object {
    "description": "",
    "name": "CubicInterpolant",
    "properties": Array [
      Object {
        "description": "",
        "name": "parameterPositions",
        "title": "CubicInterpolant.parameterPositions: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant.parameterPositions",
      },
      Object {
        "description": "",
        "name": "resultBuffer",
        "title": "CubicInterpolant.resultBuffer: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant.resultBuffer",
      },
      Object {
        "description": "",
        "name": "sampleValues",
        "title": "CubicInterpolant.sampleValues: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant.sampleValues",
      },
      Object {
        "description": "",
        "name": "settings",
        "title": "CubicInterpolant.settings: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant.settings",
      },
      Object {
        "description": "",
        "name": "valueSize",
        "title": "CubicInterpolant.valueSize: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant.valueSize",
      },
      Object {
        "description": "Evaluate the interpolant at position *t*.",
        "name": "evaluate",
        "title": "CubicInterpolant.evaluate( t: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant.evaluate",
      },
    ],
    "title": "CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer )",
    "url": "https://threejs.org/docs/#api/en/math/interpolants/CubicInterpolant",
  },
  Object {
    "description": "",
    "name": "DiscreteInterpolant",
    "properties": Array [
      Object {
        "description": "",
        "name": "parameterPositions",
        "title": "DiscreteInterpolant.parameterPositions: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant.parameterPositions",
      },
      Object {
        "description": "",
        "name": "resultBuffer",
        "title": "DiscreteInterpolant.resultBuffer: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant.resultBuffer",
      },
      Object {
        "description": "",
        "name": "sampleValues",
        "title": "DiscreteInterpolant.sampleValues: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant.sampleValues",
      },
      Object {
        "description": "",
        "name": "settings",
        "title": "DiscreteInterpolant.settings: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant.settings",
      },
      Object {
        "description": "",
        "name": "valueSize",
        "title": "DiscreteInterpolant.valueSize: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant.valueSize",
      },
      Object {
        "description": "Evaluate the interpolant at position *t*.",
        "name": "evaluate",
        "title": "DiscreteInterpolant.evaluate( t: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant.evaluate",
      },
    ],
    "title": "DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer )",
    "url": "https://threejs.org/docs/#api/en/math/interpolants/DiscreteInterpolant",
  },
  Object {
    "description": "",
    "name": "LinearInterpolant",
    "properties": Array [
      Object {
        "description": "",
        "name": "parameterPositions",
        "title": "LinearInterpolant.parameterPositions: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant.parameterPositions",
      },
      Object {
        "description": "",
        "name": "resultBuffer",
        "title": "LinearInterpolant.resultBuffer: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant.resultBuffer",
      },
      Object {
        "description": "",
        "name": "sampleValues",
        "title": "LinearInterpolant.sampleValues: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant.sampleValues",
      },
      Object {
        "description": "",
        "name": "settings",
        "title": "LinearInterpolant.settings: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant.settings",
      },
      Object {
        "description": "",
        "name": "valueSize",
        "title": "LinearInterpolant.valueSize: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant.valueSize",
      },
      Object {
        "description": "Evaluate the interpolant at position *t*.",
        "name": "evaluate",
        "title": "LinearInterpolant.evaluate( t: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant.evaluate",
      },
    ],
    "title": "LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer )",
    "url": "https://threejs.org/docs/#api/en/math/interpolants/LinearInterpolant",
  },
  Object {
    "description": "",
    "name": "QuaternionLinearInterpolant",
    "properties": Array [
      Object {
        "description": "",
        "name": "parameterPositions",
        "title": "QuaternionLinearInterpolant.parameterPositions: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant.parameterPositions",
      },
      Object {
        "description": "",
        "name": "resultBuffer",
        "title": "QuaternionLinearInterpolant.resultBuffer: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant.resultBuffer",
      },
      Object {
        "description": "",
        "name": "sampleValues",
        "title": "QuaternionLinearInterpolant.sampleValues: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant.sampleValues",
      },
      Object {
        "description": "",
        "name": "settings",
        "title": "QuaternionLinearInterpolant.settings: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant.settings",
      },
      Object {
        "description": "",
        "name": "valueSize",
        "title": "QuaternionLinearInterpolant.valueSize: null",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant.valueSize",
      },
      Object {
        "description": "Evaluate the interpolant at position *t*.",
        "name": "evaluate",
        "title": "QuaternionLinearInterpolant.evaluate( t: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant.evaluate",
      },
    ],
    "title": "QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer )",
    "url": "https://threejs.org/docs/#api/en/math/interpolants/QuaternionLinearInterpolant",
  },
  Object {
    "description": "A bone which is part of a Skeleton. The skeleton in turn is used by the SkinnedMesh. Bones are almost identical to a blank Object3D.",
    "name": "Bone",
    "properties": Array [
      Object {
        "description": "Set to 'Bone', this can be used to find all Bones in a scene.",
        "name": "type",
        "title": "Bone.type: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Bone.type",
      },
    ],
    "title": "Bone( )",
    "url": "https://threejs.org/docs/#api/en/objects/Bone",
  },
  Object {
    "description": "This is almost identical to an Object3D. Its purpose is to make working with groups of objects syntactically clearer.",
    "name": "Group",
    "properties": Array [
      Object {
        "description": "A string 'Group'. This should not be changed.",
        "name": "type",
        "title": "Group.type: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Group.type",
      },
    ],
    "title": "Group( )",
    "url": "https://threejs.org/docs/#api/en/objects/Group",
  },
  Object {
    "description": "A special version of Mesh with instanced rendering support. Use InstancedMesh if you have to render a large number of objects with the same geometry and material but with different world transformations. The usage of InstancedMesh will help you to reduce the number of draw calls and thus improve the overall rendering performance in your application.",
    "name": "InstancedMesh",
    "properties": Array [
      Object {
        "description": "The number of instances. The *count* value passed into the constructor represents the maximum number of instances of this mesh. You can change the number of instances at runtime to an integer value in the range [0, count].",
        "name": "count",
        "title": "InstancedMesh.count: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.count",
      },
      Object {
        "description": "Represents the colors of all instances. *null* by default. You have to set its needsUpdate flag to true if you modify instanced data via .setColorAt().",
        "name": "instanceColor",
        "title": "InstancedMesh.instanceColor: BufferAttribute",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.instanceColor",
      },
      Object {
        "description": "Represents the local transformation of all instances. You have to set its needsUpdate flag to true if you modify instanced data via .setMatrixAt().",
        "name": "instanceMatrix",
        "title": "InstancedMesh.instanceMatrix: BufferAttribute",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.instanceMatrix",
      },
      Object {
        "description": "Frees the internal resources of this instance.",
        "name": "dispose",
        "title": "InstancedMesh.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.dispose",
      },
      Object {
        "description": "index: The index of an instance. Values have to be in the range [0, count].",
        "name": "getColorAt",
        "title": "InstancedMesh.getColorAt( index: Integer, color: Color ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.getColorAt",
      },
      Object {
        "description": "index: The index of an instance. Values have to be in the range [0, count].",
        "name": "getMatrixAt",
        "title": "InstancedMesh.getMatrixAt( index: Integer, matrix: Matrix4 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.getMatrixAt",
      },
      Object {
        "description": "index: The index of an instance. Values have to be in the range [0, count].",
        "name": "setColorAt",
        "title": "InstancedMesh.setColorAt( index: Integer, color: Color ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.setColorAt",
      },
      Object {
        "description": "index: The index of an instance. Values have to be in the range [0, count].",
        "name": "setMatrixAt",
        "title": "InstancedMesh.setMatrixAt( index: Integer, matrix: Matrix4 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh.setMatrixAt",
      },
    ],
    "title": "InstancedMesh( geometry: BufferGeometry, material: Material, count: Integer )",
    "url": "https://threejs.org/docs/#api/en/objects/InstancedMesh",
  },
  Object {
    "description": "A continuous line.
 This is nearly the same as LineSegments; the only difference is that it is rendered using [gl.LINE_STRIP](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements) instead of [gl.LINES](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements)",
    "name": "Line",
    "properties": Array [
      Object {
        "description": "Vertices representing the line segment(s).",
        "name": "geometry",
        "title": "Line.geometry: BufferGeometry",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Line.geometry",
      },
      Object {
        "description": "Material for the line.",
        "name": "material",
        "title": "Line.material: Material",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Line.material",
      },
      Object {
        "description": "An array of weights typically from 0-1 that specify how much of the morph is applied. Undefined by default, but reset to a blank array by .updateMorphTargets().",
        "name": "morphTargetInfluences",
        "title": "Line.morphTargetInfluences: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Line.morphTargetInfluences",
      },
      Object {
        "description": "A dictionary of morphTargets based on the morphTarget.name property. Undefined by default, but rebuilt .updateMorphTargets().",
        "name": "morphTargetDictionary",
        "title": "Line.morphTargetDictionary: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Line.morphTargetDictionary",
      },
      Object {
        "description": "Computes an array of distance values which are necessary for LineDashedMaterial. For each vertex in the geometry, the method calculates the cumulative length from the current point to the very beginning of the line.",
        "name": "computeLineDistances",
        "title": "Line.computeLineDistances(): Line",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Line.computeLineDistances",
      },
      Object {
        "description": "Get intersections between a casted Ray and this Line. Raycaster.intersectObject will call this method.",
        "name": "raycast",
        "title": "Line.raycast( raycaster: Raycaster, intersects: Array ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Line.raycast",
      },
      Object {
        "description": "Returns a clone of this Line object and its descendants.",
        "name": "clone",
        "title": "Line.clone(): Line",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Line.clone",
      },
      Object {
        "description": "Updates the morphTargets to have no influence on the object. Resets the .morphTargetInfluences and .morphTargetDictionary properties.",
        "name": "updateMorphTargets",
        "title": "Line.updateMorphTargets(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Line.updateMorphTargets",
      },
    ],
    "title": "Line( geometry: BufferGeometry, material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/Line",
  },
  Object {
    "description": "A continuous line that connects back to the start.
 This is nearly the same as Line; the only difference is that it is rendered using [gl.LINE_LOOP](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements) instead of [gl.LINE_STRIP](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements), which draws a straight line to the next vertex, and connects the last vertex back to the first.",
    "name": "LineLoop",
    "properties": Array [],
    "title": "LineLoop( geometry: BufferGeometry, material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/LineLoop",
  },
  Object {
    "description": "A series of lines drawn between pairs of vertices.
 This is nearly the same as Line; the only difference is that it is rendered using [gl.LINES](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements) instead of [gl.LINE_STRIP](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements).",
    "name": "LineSegments",
    "properties": Array [],
    "title": "LineSegments( geometry: BufferGeometry, material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/LineSegments",
  },
  Object {
    "description": "Level of Detail - show meshes with more or less geometry based on distance from the camera.
 Every level is associated with an object, and rendering can be switched between them at the distances specified. Typically you would create, say, three meshes, one for far away (low detail), one for mid range (medium detail) and one for close up (high detail).",
    "name": "LOD",
    "properties": Array [
      Object {
        "description": "Whether the LOD object is updated automatically by the renderer per frame or not. If set to false, you have to call LOD.update() in the render loop by yourself. Default is true.",
        "name": "autoUpdate",
        "title": "LOD.autoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.autoUpdate",
      },
      Object {
        "description": "An array of level objects
 Each level is an object with two properties:
 object - The Object3D to display at this level.
 distance - The distance at which to display this level of detail.",
        "name": "levels",
        "title": "LOD.levels: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.levels",
      },
      Object {
        "description": "object - The Object3D to display at this level.
 distance - The distance at which to display this level of detail.
 Adds a mesh that will display at a certain distance and greater. Typically the further away the distance, the lower the detail on the mesh.",
        "name": "addLevel",
        "title": "LOD.addLevel( object: Object3D, distance: Float ): LOD",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.addLevel",
      },
      Object {
        "description": "Returns a clone of this LOD object and its associated distance specific objects.",
        "name": "clone",
        "title": "LOD.clone(): LOD",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.clone",
      },
      Object {
        "description": "Get the currently active LOD level. As index of the levels array.",
        "name": "getCurrentLevel",
        "title": "LOD.getCurrentLevel(): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.getCurrentLevel",
      },
      Object {
        "description": "Get a reference to the first Object3D (mesh) that is greater than distance.",
        "name": "getObjectForDistance",
        "title": "LOD.getObjectForDistance( distance: Float ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.getObjectForDistance",
      },
      Object {
        "description": "Get intersections between a casted Ray and this LOD. Raycaster.intersectObject will call this method.",
        "name": "raycast",
        "title": "LOD.raycast( raycaster: Raycaster, intersects: Array ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.raycast",
      },
      Object {
        "description": "Create a JSON structure with details of this LOD object.",
        "name": "toJSON",
        "title": "LOD.toJSON( meta ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.toJSON",
      },
      Object {
        "description": "Set the visibility of each level's object based on distance from the camera.",
        "name": "update",
        "title": "LOD.update( camera: Camera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/LOD.update",
      },
    ],
    "title": "LOD( )",
    "url": "https://threejs.org/docs/#api/en/objects/LOD",
  },
  Object {
    "description": "Class representing triangular [polygon mesh](https://en.wikipedia.org/wiki/Polygon_mesh) based objects. Also serves as a base for other classes such as SkinnedMesh.",
    "name": "Mesh",
    "properties": Array [
      Object {
        "description": "An instance of BufferGeometry (or derived classes), defining the object's structure.",
        "name": "geometry",
        "title": "Mesh.geometry: BufferGeometry",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.geometry",
      },
      Object {
        "description": "An instance of material derived from the Material base class or an array of materials, defining the object's appearance. Default is a MeshBasicMaterial.",
        "name": "material",
        "title": "Mesh.material: Material",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.material",
      },
      Object {
        "description": "An array of weights typically from 0-1 that specify how much of the morph is applied. Undefined by default, but reset to a blank array by updateMorphTargets.",
        "name": "morphTargetInfluences",
        "title": "Mesh.morphTargetInfluences: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.morphTargetInfluences",
      },
      Object {
        "description": "A dictionary of morphTargets based on the morphTarget.name property. Undefined by default, but rebuilt updateMorphTargets.",
        "name": "morphTargetDictionary",
        "title": "Mesh.morphTargetDictionary: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.morphTargetDictionary",
      },
      Object {
        "description": "Returns a clone of this Mesh object and its descendants.",
        "name": "clone",
        "title": "Mesh.clone(): Mesh",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.clone",
      },
      Object {
        "description": "Get intersections between a casted ray and this mesh. Raycaster.intersectObject will call this method, but the results are not ordered.",
        "name": "raycast",
        "title": "Mesh.raycast( raycaster: Raycaster, intersects: Array ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.raycast",
      },
      Object {
        "description": "Updates the morphTargets to have no influence on the object. Resets the morphTargetInfluences and morphTargetDictionary properties.",
        "name": "updateMorphTargets",
        "title": "Mesh.updateMorphTargets(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Mesh.updateMorphTargets",
      },
    ],
    "title": "Mesh( geometry: BufferGeometry, material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/Mesh",
  },
  Object {
    "description": "A class for displaying points. The points are rendered by the WebGLRenderer using [gl.POINTS](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements).",
    "name": "Points",
    "properties": Array [
      Object {
        "description": "An instance of BufferGeometry (or derived classes), defining the object's structure.",
        "name": "geometry",
        "title": "Points.geometry: BufferGeometry",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Points.geometry",
      },
      Object {
        "description": "An instance of Material, defining the object's appearance. Default is a PointsMaterial.",
        "name": "material",
        "title": "Points.material: Material",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Points.material",
      },
      Object {
        "description": "An array of weights typically from 0-1 that specify how much of the morph is applied. Undefined by default, but reset to a blank array by updateMorphTargets.",
        "name": "morphTargetInfluences",
        "title": "Points.morphTargetInfluences: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Points.morphTargetInfluences",
      },
      Object {
        "description": "A dictionary of morphTargets based on the morphTarget.name property. Undefined by default, but rebuilt updateMorphTargets.",
        "name": "morphTargetDictionary",
        "title": "Points.morphTargetDictionary: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Points.morphTargetDictionary",
      },
      Object {
        "description": "Get intersections between a casted ray and this Points. Raycaster.intersectObject will call this method.",
        "name": "raycast",
        "title": "Points.raycast( raycaster: Raycaster, intersects: Array ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Points.raycast",
      },
      Object {
        "description": "Returns a clone of this Points object and its descendants.",
        "name": "clone",
        "title": "Points.clone(): Points",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Points.clone",
      },
      Object {
        "description": "Updates the morphTargets to have no influence on the object. Resets the morphTargetInfluences and morphTargetDictionary properties.",
        "name": "updateMorphTargets",
        "title": "Points.updateMorphTargets(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Points.updateMorphTargets",
      },
    ],
    "title": "Points( geometry: BufferGeometry, material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/Points",
  },
  Object {
    "description": "Use an array of bones to create a skeleton that can be used by a SkinnedMesh.",
    "name": "Skeleton",
    "properties": Array [
      Object {
        "description": "The array of bones. Note this is a copy of the original array, not a reference, so you can modify the original array without effecting this one.",
        "name": "bones",
        "title": "Skeleton.bones: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.bones",
      },
      Object {
        "description": "An array of Matrix4s that represent the inverse of the matrixWorld of the individual bones.",
        "name": "boneInverses",
        "title": "Skeleton.boneInverses: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.boneInverses",
      },
      Object {
        "description": "The array buffer holding the bone data when using a vertex texture.",
        "name": "boneMatrices",
        "title": "Skeleton.boneMatrices: Float32Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.boneMatrices",
      },
      Object {
        "description": "The DataTexture holding the bone data when using a vertex texture.",
        "name": "boneTexture",
        "title": "Skeleton.boneTexture: DataTexture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.boneTexture",
      },
      Object {
        "description": "The size of the .boneTexture.",
        "name": "boneTextureSize",
        "title": "Skeleton.boneTextureSize: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.boneTextureSize",
      },
      Object {
        "description": "Returns a clone of this Skeleton object.",
        "name": "clone",
        "title": "Skeleton.clone(): Skeleton",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.clone",
      },
      Object {
        "description": "Generates the boneInverses array if not provided in the constructor.",
        "name": "calculateInverses",
        "title": "Skeleton.calculateInverses(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.calculateInverses",
      },
      Object {
        "description": "Returns the skeleton to the base pose.",
        "name": "pose",
        "title": "Skeleton.pose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.pose",
      },
      Object {
        "description": "Updates the boneMatrices and boneTexture after changing the bones. This is called automatically by the WebGLRenderer if the skeleton is used with a SkinnedMesh.",
        "name": "update",
        "title": "Skeleton.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.update",
      },
      Object {
        "description": "name â€” String to match to the Bone's .name property. 
 Searches through the skeleton's bone array and returns the first with a matching name.",
        "name": "getBoneByName",
        "title": "Skeleton.getBoneByName( name: String ): Bone",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.getBoneByName",
      },
      Object {
        "description": "Can be used if an instance of Skeleton becomes obsolete in an application. The method will free internal resources.",
        "name": "dispose",
        "title": "Skeleton.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Skeleton.dispose",
      },
    ],
    "title": "Skeleton( bones: Array, boneInverses: Array )",
    "url": "https://threejs.org/docs/#api/en/objects/Skeleton",
  },
  Object {
    "description": "A mesh that has a Skeleton with bones that can then be used to animate the vertices of the geometry. The material must support skinning and have skinning enabled - see MeshStandardMaterial.skinning.",
    "name": "SkinnedMesh",
    "properties": Array [
      Object {
        "description": "Either \\"attached\\" or \\"detached\\". \\"attached\\" uses the SkinnedMesh.matrixWorld property for the base transform matrix of the bones. \\"detached\\" uses the SkinnedMesh.bindMatrix. Default is \\"attached\\".",
        "name": "bindMode",
        "title": "SkinnedMesh.bindMode: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.bindMode",
      },
      Object {
        "description": "The base matrix that is used for the bound bone transforms.",
        "name": "bindMatrix",
        "title": "SkinnedMesh.bindMatrix: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.bindMatrix",
      },
      Object {
        "description": "The base matrix that is used for resetting the bound bone transforms.",
        "name": "bindMatrixInverse",
        "title": "SkinnedMesh.bindMatrixInverse: Matrix4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.bindMatrixInverse",
      },
      Object {
        "description": "Skeleton representing the bone hierarchy of the skinned mesh.",
        "name": "skeleton",
        "title": "SkinnedMesh.skeleton: Skeleton",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.skeleton",
      },
      Object {
        "description": "skeleton - Skeleton created from a Bones tree.
 bindMatrix - Matrix4 that represents the base transform of the skeleton.
 Bind a skeleton to the skinned mesh. The bindMatrix gets saved to .bindMatrix property and the .bindMatrixInverse gets calculated.",
        "name": "bind",
        "title": "SkinnedMesh.bind( skeleton: Skeleton, bindMatrix: Matrix4 ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.bind",
      },
      Object {
        "description": "Returns a clone of this SkinnedMesh object and any descendants.",
        "name": "clone",
        "title": "SkinnedMesh.clone(): SkinnedMesh",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.clone",
      },
      Object {
        "description": "Normalizes the skin weights.",
        "name": "normalizeSkinWeights",
        "title": "SkinnedMesh.normalizeSkinWeights(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.normalizeSkinWeights",
      },
      Object {
        "description": "This method sets the skinned mesh in the rest pose (resets the pose).",
        "name": "pose",
        "title": "SkinnedMesh.pose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.pose",
      },
      Object {
        "description": "Updates the MatrixWorld.",
        "name": "updateMatrixWorld",
        "title": "SkinnedMesh.updateMatrixWorld( force: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.updateMatrixWorld",
      },
      Object {
        "description": "Calculates the position of the vertex at the given index relative to the current bone transformations.",
        "name": "boneTransform",
        "title": "SkinnedMesh.boneTransform( [target:Vector3: Integer], ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh.boneTransform",
      },
    ],
    "title": "SkinnedMesh( geometry: BufferGeometry, material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/SkinnedMesh",
  },
  Object {
    "description": "A sprite is a plane that always faces towards the camera, generally with a partially transparent texture applied.
 Sprites do not cast shadows, setting \`\`\`castShadow = true\`\`\` will have no effect.",
    "name": "Sprite",
    "properties": Array [
      Object {
        "description": "An instance of SpriteMaterial, defining the object's appearance. Default is a white SpriteMaterial.",
        "name": "material",
        "title": "Sprite.material: SpriteMaterial",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Sprite.material",
      },
      Object {
        "description": "The sprite's anchor point, and the point around which the sprite rotates. A value of (0.5, 0.5) corresponds to the midpoint of the sprite. A value of (0, 0) corresponds to the lower left corner of the sprite. The default is (0.5, 0.5).",
        "name": "center",
        "title": "Sprite.center: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/objects/Sprite.center",
      },
      Object {
        "description": "Returns a clone of this Sprite object and any descendants.",
        "name": "clone",
        "title": "Sprite.clone(): Sprite",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Sprite.clone",
      },
      Object {
        "description": "Copies the properties of the passed sprite to this one.",
        "name": "copy",
        "title": "Sprite.copy( sprite: Sprite ): Sprite",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Sprite.copy",
      },
      Object {
        "description": "Get intersections between a casted ray and this sprite. Raycaster.intersectObject() will call this method. The raycaster must be initialized by calling Raycaster.setFromCamera() before raycasting against sprites.",
        "name": "raycast",
        "title": "Sprite.raycast( raycaster: Raycaster, intersects: Array ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/objects/Sprite.raycast",
      },
    ],
    "title": "Sprite( material: Material )",
    "url": "https://threejs.org/docs/#api/en/objects/Sprite",
  },
  Object {
    "description": "A special render target that can be used to utilize multi-sampled renderbuffers. Heads up: WebGLMultisampleRenderTarget can only be used with a WebGL 2 rendering context.",
    "name": "WebGLMultisampleRenderTarget",
    "properties": Array [
      Object {
        "description": "Specifies the number of samples to be used for the renderbuffer storage. However, the maximum supported size for multisampling is platform dependent and defined via *gl.MAX_SAMPLES*.",
        "name": "samples",
        "title": "WebGLMultisampleRenderTarget.samples: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLMultisampleRenderTarget.samples",
      },
    ],
    "title": "WebGLMultisampleRenderTarget(width: Number, height: Number, options: Object)",
    "url": "https://threejs.org/docs/#api/en/renderers/WebGLMultisampleRenderTarget",
  },
  Object {
    "description": "The WebGL renderer displays your beautifully crafted scenes using [WebGL](https://en.wikipedia.org/wiki/WebGL).",
    "name": "WebGLRenderer",
    "properties": Array [
      Object {
        "description": "Defines whether the renderer should automatically clear its output before rendering a frame.",
        "name": "autoClear",
        "title": "WebGLRenderer.autoClear: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.autoClear",
      },
      Object {
        "description": "If autoClear is true, defines whether the renderer should clear the color buffer. Default is *true*.",
        "name": "autoClearColor",
        "title": "WebGLRenderer.autoClearColor: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.autoClearColor",
      },
      Object {
        "description": "If autoClear is true, defines whether the renderer should clear the depth buffer. Default is *true*.",
        "name": "autoClearDepth",
        "title": "WebGLRenderer.autoClearDepth: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.autoClearDepth",
      },
      Object {
        "description": "If autoClear is true, defines whether the renderer should clear the stencil buffer. Default is *true*.",
        "name": "autoClearStencil",
        "title": "WebGLRenderer.autoClearStencil: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.autoClearStencil",
      },
      Object {
        "description": "If checkShaderErrors is true, defines whether material shader programs are checked for errors during compilation and linkage process. It may be useful to disable this check in production for performance gain. It is strongly recommended to keep these checks enabled during development. If the shader does not compile and link - it will not work and associated material will not render. Default is *true*.",
        "name": "debug.checkShaderErrors",
        "title": "WebGLRenderer.debug.checkShaderErrors: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.debug.checkShaderErrors",
      },
      Object {
        "description": "An object containing details about the capabilities of the current [RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext).
 - floatFragmentTextures: whether the context supports the [OES_texture_float](https://developer.mozilla.org/en-US/docs/Web/API/OES_texture_float) extension. According to [WebGLStats](https://webglstats.com/), as of February 2016 over 95% of WebGL enabled devices support this.
 - floatVertexTextures: *true* if floatFragmentTextures and vertexTextures are both true.
 - getMaxAnisotropy(): Returns the maximum available anisotropy.
 - getMaxPrecision(): Returns the maximum available precision for vertex and fragment shaders. 
 - isWebGL2: *true* if the context in use is a WebGL2RenderingContext object.
 - logarithmicDepthBuffer: *true* if the logarithmicDepthBuffer was set to true in the constructor and the context supports the [EXT_frag_depth](https://developer.mozilla.org/en-US/docs/Web/API/EXT_frag_depth) extension. According to [WebGLStats](https://webglstats.com/), as of February 2016 around 66% of WebGL enabled devices support this.
 - maxAttributes: The value of *gl.MAX_VERTEX_ATTRIBS*.
 - maxCubemapSize: The value of *gl.MAX_CUBE_MAP_TEXTURE_SIZE*. Maximum height * width of cube map textures that a shader can use.
 - maxFragmentUniforms: The value of *gl.MAX_FRAGMENT_UNIFORM_VECTORS*. The number of uniforms that can be used by a fragment shader.
 - maxTextureSize: The value of *gl.MAX_TEXTURE_SIZE*. Maximum height * width of a texture that a shader use.
 - maxTextures: The value of *gl.MAX_TEXTURE_IMAGE_UNITS*. The maximum number of textures that can be used by a shader.
 - maxVaryings: The value of *gl.MAX_VARYING_VECTORS*. The number of varying vectors that can used by shaders.
 - maxVertexTextures: The value of *gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS*. The number of textures that can be used in a vertex shader.
 - maxVertexUniforms: The value of *gl.MAX_VERTEX_UNIFORM_VECTORS*. The maximum number of uniforms that can be used in a vertex shader.
 - precision: The shader precision currently being used by the renderer.
 - vertexTextures: *true* if maxVertexTextures is greater than 0 (i.e. vertext textures can be used).",
        "name": "capabilities",
        "title": "WebGLRenderer.capabilities: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.capabilities",
      },
      Object {
        "description": "User-defined clipping planes specified as THREE.Plane objects in world space. These planes apply globally. Points in space whose dot product with the plane is negative are cut away. Default is [].",
        "name": "clippingPlanes",
        "title": "WebGLRenderer.clippingPlanes: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.clippingPlanes",
      },
      Object {
        "description": "A [canvas](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) where the renderer draws its output.
 This is automatically created by the renderer in the constructor (if not provided already); you just need to add it to your page like so:
 \`\`\` document.body.appendChild( renderer.domElement ); \`\`\`",
        "name": "domElement",
        "title": "WebGLRenderer.domElement: DOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.domElement",
      },
      Object {
        "description": "A wrapper for the .extensions.get method, used to check whether various WebGL extensions are supported.",
        "name": "extensions",
        "title": "WebGLRenderer.extensions: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.extensions",
      },
      Object {
        "description": "Default is *2*.",
        "name": "gammaFactor",
        "title": "WebGLRenderer.gammaFactor: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.gammaFactor",
      },
      Object {
        "description": "Defines the output encoding of the renderer. Default is THREE.LinearEncoding.",
        "name": "outputEncoding",
        "title": "WebGLRenderer.outputEncoding: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.outputEncoding",
      },
      Object {
        "description": "An object with a series of statistical information about the graphics board memory and the rendering process. Useful for debugging or just for the sake of curiosity. The object contains the following fields:",
        "name": "info",
        "title": "WebGLRenderer.info: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.info",
      },
      Object {
        "description": "Defines whether the renderer respects object-level clipping planes. Default is *false*.",
        "name": "localClippingEnabled",
        "title": "WebGLRenderer.localClippingEnabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.localClippingEnabled",
      },
      Object {
        "description": "Whether to use physically correct lighting mode. Default is *false*. See the lights / physical example.",
        "name": "physicallyCorrectLights",
        "title": "WebGLRenderer.physicallyCorrectLights: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.physicallyCorrectLights",
      },
      Object {
        "description": "Used internally by the renderer to keep track of various sub object properties.",
        "name": "properties",
        "title": "WebGLRenderer.properties: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.properties",
      },
      Object {
        "description": "Used internally to handle ordering of scene object rendering.",
        "name": "renderLists",
        "title": "WebGLRenderer.renderLists: WebGLRenderLists",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.renderLists",
      },
      Object {
        "description": "This contains the reference to the shadow map, if used.",
        "name": "shadowMap",
        "title": "WebGLRenderer.shadowMap: WebGLShadowMap",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.shadowMap",
      },
      Object {
        "description": "If set, use shadow maps in the scene. Default is *false*.",
        "name": "shadowMap.enabled",
        "title": "WebGLRenderer.shadowMap.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.shadowMap.enabled",
      },
      Object {
        "description": "Enables automatic updates to the shadows in the scene. Default is *true*.",
        "name": "shadowMap.autoUpdate",
        "title": "WebGLRenderer.shadowMap.autoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.shadowMap.autoUpdate",
      },
      Object {
        "description": "When set to *true*, shadow maps in the scene will be updated in the next *render* call. Default is *false*.",
        "name": "shadowMap.needsUpdate",
        "title": "WebGLRenderer.shadowMap.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.shadowMap.needsUpdate",
      },
      Object {
        "description": "Defines shadow map type (unfiltered, percentage close filtering, percentage close filtering with bilinear filtering in shader)",
        "name": "shadowMap.type",
        "title": "WebGLRenderer.shadowMap.type: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.shadowMap.type",
      },
      Object {
        "description": "Defines whether the renderer should sort objects. Default is *true*.
 Note: Sorting is used to attempt to properly render objects that have some degree of transparency. By definition, sorting objects may not work in all cases. Depending on the needs of application, it may be necessary to turn off sorting and use other methods to deal with transparency rendering e.g. manually determining each object's rendering order.",
        "name": "sortObjects",
        "title": "WebGLRenderer.sortObjects: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.sortObjects",
      },
      Object {
        "description": "Contains functions for setting various properties of the WebGLRenderer.context state.",
        "name": "state",
        "title": "WebGLRenderer.state: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.state",
      },
      Object {
        "description": "Default is NoToneMapping. See the Renderer constants for other choices.",
        "name": "toneMapping",
        "title": "WebGLRenderer.toneMapping: Constant",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.toneMapping",
      },
      Object {
        "description": "Exposure level of tone mapping. Default is *1*.",
        "name": "toneMappingExposure",
        "title": "WebGLRenderer.toneMappingExposure: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.toneMappingExposure",
      },
      Object {
        "description": "Provides access to the WebXR related interface of the renderer.",
        "name": "xr",
        "title": "WebGLRenderer.xr: WebXRManager",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.xr",
      },
      Object {
        "description": "Tells the renderer to clear its color, depth or stencil drawing buffer(s). This method initializes the color buffer to the current clear color value.
 Arguments default to *true*.",
        "name": "clear",
        "title": "WebGLRenderer.clear( color: Boolean, depth: Boolean, stencil: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.clear",
      },
      Object {
        "description": "Clear the color buffer. Equivalent to calling .clear( true, false, false ).",
        "name": "clearColor",
        "title": "WebGLRenderer.clearColor( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.clearColor",
      },
      Object {
        "description": "Clear the depth buffer. Equivalent to calling .clear( false, true, false ).",
        "name": "clearDepth",
        "title": "WebGLRenderer.clearDepth( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.clearDepth",
      },
      Object {
        "description": "Clear the stencil buffers. Equivalent to calling .clear( false, false, true ).",
        "name": "clearStencil",
        "title": "WebGLRenderer.clearStencil( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.clearStencil",
      },
      Object {
        "description": "Compiles all materials in the scene with the camera. This is useful to precompile shaders before the first rendering.",
        "name": "compile",
        "title": "WebGLRenderer.compile( scene: Object3D, camera: Camera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.compile",
      },
      Object {
        "description": "Copies pixels from the current WebGLFramebuffer into a 2D texture. Enables access to [WebGLRenderingContext.copyTexImage2D](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D).",
        "name": "copyFramebufferToTexture",
        "title": "WebGLRenderer.copyFramebufferToTexture( position: Vector2, texture: Texture, level: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.copyFramebufferToTexture",
      },
      Object {
        "description": "Copies all pixels of a texture to an existing texture starting from the given position. Enables access to [WebGLRenderingContext.texSubImage2D](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D).",
        "name": "copyTextureToTexture",
        "title": "WebGLRenderer.copyTextureToTexture( position: Vector2, srcTexture: Texture, dstTexture: Texture, level: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.copyTextureToTexture",
      },
      Object {
        "description": "Copies the pixels of a texture in the bounds 'sourceBox' in the destination texture starting from the given position. Enables access to [WebGL2RenderingContext.texSubImage3D](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage3D).",
        "name": "copyTextureToTexture3D",
        "title": "WebGLRenderer.copyTextureToTexture3D( sourceBox: Box3, position: Vector3, srcTexture: Texture, dstTexture: Texture, level: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.copyTextureToTexture3D",
      },
      Object {
        "description": "Dispose of the current rendering context.",
        "name": "dispose",
        "title": "WebGLRenderer.dispose( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.dispose",
      },
      Object {
        "description": "Used to check whether various extensions are supported and returns an object with details of the extension if available. This method can check for the following extensions:
 - *WEBGL_depth_texture*
 - *EXT_texture_filter_anisotropic*
 - *WEBGL_compressed_texture_s3tc*
 - *WEBGL_compressed_texture_pvrtc*
 - *WEBGL_compressed_texture_etc1*",
        "name": "extensions.get",
        "title": "WebGLRenderer.extensions.get: Object( extensionName: String )",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.extensions.get",
      },
      Object {
        "description": "Simulate loss of the WebGL context. This requires support for the [WEBGL_lose_context](https://developer.mozilla.org/en-US/docs/Web/API/WEBGL_lose_context) extensions. According to [WebGLStats](https://webglstats.com/), as of February 2016 90% of WebGL enabled devices support this.",
        "name": "forceContextLoss",
        "title": "WebGLRenderer.forceContextLoss( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.forceContextLoss",
      },
      Object {
        "description": "Returns a float with the current clear alpha. Ranges from 0 to 1.",
        "name": "getClearAlpha",
        "title": "WebGLRenderer.getClearAlpha(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getClearAlpha",
      },
      Object {
        "description": "Returns a THREE.Color instance with the current clear color.",
        "name": "getClearColor",
        "title": "WebGLRenderer.getClearColor( target: Color ): Color",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getClearColor",
      },
      Object {
        "description": "Return the current WebGL context.",
        "name": "getContext",
        "title": "WebGLRenderer.getContext(): WebGLRenderingContext",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getContext",
      },
      Object {
        "description": "Returns an object that describes the attributes set on the WebGL context when it was created.",
        "name": "getContextAttributes",
        "title": "WebGLRenderer.getContextAttributes(): WebGLContextAttributes",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getContextAttributes",
      },
      Object {
        "description": "Returns the current active cube face.",
        "name": "getActiveCubeFace",
        "title": "WebGLRenderer.getActiveCubeFace(): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getActiveCubeFace",
      },
      Object {
        "description": "Returns the current active mipmap level.",
        "name": "getActiveMipmapLevel",
        "title": "WebGLRenderer.getActiveMipmapLevel(): Integer",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getActiveMipmapLevel",
      },
      Object {
        "description": "Returns the current RenderTarget if there are; returns *null* otherwise.",
        "name": "getRenderTarget",
        "title": "WebGLRenderer.getRenderTarget(): RenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getRenderTarget",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector4.
 Returns the current viewport.",
        "name": "getCurrentViewport",
        "title": "WebGLRenderer.getCurrentViewport( target: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getCurrentViewport",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector2.
 Returns the width and height of the renderer's drawing buffer, in pixels.",
        "name": "getDrawingBufferSize",
        "title": "WebGLRenderer.getDrawingBufferSize( target: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getDrawingBufferSize",
      },
      Object {
        "description": "Returns current device pixel ratio used.",
        "name": "getPixelRatio",
        "title": "WebGLRenderer.getPixelRatio(): number",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getPixelRatio",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector4.
 Returns the scissor region.",
        "name": "getScissor",
        "title": "WebGLRenderer.getScissor( target: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getScissor",
      },
      Object {
        "description": "Returns *true* if scissor test is enabled; returns *false* otherwise.",
        "name": "getScissorTest",
        "title": "WebGLRenderer.getScissorTest(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getScissorTest",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector2.
 Returns the width and height of the renderer's output canvas, in pixels.",
        "name": "getSize",
        "title": "WebGLRenderer.getSize( target: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getSize",
      },
      Object {
        "description": "target â€” the result will be copied into this Vector4.
 Returns the viewport.",
        "name": "getViewport",
        "title": "WebGLRenderer.getViewport( target: Vector4 ): Vector4",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.getViewport",
      },
      Object {
        "description": "Initializes the given texture. Useful for preloading a texture rather than waiting until first render (which can cause noticeable lags due to decode and GPU upload overhead).",
        "name": "initTexture",
        "title": "WebGLRenderer.initTexture( texture: Texture ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.initTexture",
      },
      Object {
        "description": "Reset the GL state to default. Called internally if the WebGL context is lost.",
        "name": "resetGLState",
        "title": "WebGLRenderer.resetGLState( ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.resetGLState",
      },
      Object {
        "description": "buffer - Uint8Array is the only destination type supported in all cases, other types are renderTarget and platform dependent. See [WebGL spec](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12) for details.",
        "name": "readRenderTargetPixels",
        "title": "WebGLRenderer.readRenderTargetPixels( renderTarget: WebGLRenderTarget, x: Float, y: Float, width: Float, height: Float, buffer: TypedArray, activeCubeFaceIndex: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.readRenderTargetPixels",
      },
      Object {
        "description": "Render a scene or another type of object using a camera.
 The render is done to a previously specified renderTarget set by calling .setRenderTarget or to the canvas as usual.
 By default render buffers are cleared before rendering but you can prevent this by setting the property autoClear to false. If you want to prevent only certain buffers being cleared you can set either the autoClearColor, autoClearStencil or autoClearDepth properties to false. To forcibly clear one ore more buffers call .clear.",
        "name": "render",
        "title": "WebGLRenderer.render( scene: Object3D, camera: Camera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.render",
      },
      Object {
        "description": "Render a buffer geometry group using the camera and with the specified material.",
        "name": "renderBufferDirect",
        "title": "WebGLRenderer.renderBufferDirect( camera: Camera, fog: Fog, geometry: BufferGeometry, material: Material, object: Object3D, group: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.renderBufferDirect",
      },
      Object {
        "description": "object - an instance of Object3D
 program - an instance of WebGLProgram
 Renders an instance of ImmediateRenderObject. Gets called by renderObjectImmediate().",
        "name": "renderBufferImmediate",
        "title": "WebGLRenderer.renderBufferImmediate( object: Object3D, program: WebGLProgram ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.renderBufferImmediate",
      },
      Object {
        "description": "Can be used to reset the internal WebGL state. This method is mostly relevant for applications which share a single WebGL context across multiple WebGL libraries.",
        "name": "resetState",
        "title": "WebGLRenderer.resetState(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.resetState",
      },
      Object {
        "description": "callback â€” The function will be called every available frame. If \`null\` is passed it will stop any already ongoing animation.",
        "name": "setAnimationLoop",
        "title": "WebGLRenderer.setAnimationLoop( callback: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setAnimationLoop",
      },
      Object {
        "description": "Sets the clear alpha. Valid input is a float between *0.0* and *1.0*.",
        "name": "setClearAlpha",
        "title": "WebGLRenderer.setClearAlpha( alpha: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setClearAlpha",
      },
      Object {
        "description": "Sets the clear color and opacity.",
        "name": "setClearColor",
        "title": "WebGLRenderer.setClearColor( color: Color, alpha: Float ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setClearColor",
      },
      Object {
        "description": "Sets device pixel ratio. This is usually used for HiDPI device to prevent bluring output canvas.",
        "name": "setPixelRatio",
        "title": "WebGLRenderer.setPixelRatio( value: number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setPixelRatio",
      },
      Object {
        "description": "renderTarget â€” The renderTarget that needs to be activated. When *null* is given, the canvas is set as the active render target instead.
 activeCubeFace â€” Specifies the active cube side (PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5) of WebGLCubeRenderTarget (optional).
 activeMipmapLevel â€” Specifies the active mipmap level (optional).
 This method sets the active rendertarget.",
        "name": "setRenderTarget",
        "title": "WebGLRenderer.setRenderTarget( renderTarget: WebGLRenderTarget, activeCubeFace: Integer, activeMipmapLevel: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setRenderTarget",
      },
      Object {
        "description": "The x, y, width, and height parameters of the scissor region.
 Optionally, a 4-component vector specifying the parameters of the region.
 Sets the scissor region from (x, y) to (x + width, y + height).
 (x, y) is the lower-left corner of the scissor region.",
        "name": "setScissor",
        "title": "WebGLRenderer.setScissor( x: Integer, y: Integer, width: Integer, height: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setScissor",
      },
      Object {
        "description": "Enable or disable the scissor test. When this is enabled, only the pixels within the defined scissor area will be affected by further renderer actions.",
        "name": "setScissorTest",
        "title": "WebGLRenderer.setScissorTest( boolean: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setScissorTest",
      },
      Object {
        "description": "Sets the custom opaque sort function for the WebGLRenderLists. Pass null to use the default painterSortStable function.",
        "name": "setOpaqueSort",
        "title": "WebGLRenderer.setOpaqueSort( method: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setOpaqueSort",
      },
      Object {
        "description": "Sets the custom transparent sort function for the WebGLRenderLists. Pass null to use the default reversePainterSortStable function.",
        "name": "setTransparentSort",
        "title": "WebGLRenderer.setTransparentSort( method: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setTransparentSort",
      },
      Object {
        "description": "Resizes the output canvas to (width, height) with device pixel ratio taken into account, and also sets the viewport to fit that size, starting in (0, 0). Setting updateStyle to false prevents any style changes to the output canvas.",
        "name": "setSize",
        "title": "WebGLRenderer.setSize( width: Integer, height: Integer, updateStyle: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setSize",
      },
      Object {
        "description": "The x, y, width, and height parameters of the viewport.
 Optionally, a 4-component vector specifying the parameters of a viewport.
 Sets the viewport to render from (x, y) to (x + width, y + height).
 (x, y) is the lower-left corner of the region.",
        "name": "setViewport",
        "title": "WebGLRenderer.setViewport( x: Integer, y: Integer, width: Integer, height: Integer ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setViewport",
      },
    ],
    "title": "WebGLRenderer( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderer",
  },
  Object {
    "description": "Since r118 WebGLRenderer automatically uses a WebGL 2 rendering context. When upgrading an existing project to =&gt; r118, applications might break because of two reasons:",
    "name": "WebGL1Renderer",
    "properties": Array [],
    "title": "WebGL1Renderer( parameters: Object )",
    "url": "https://threejs.org/docs/#api/en/renderers/WebGL1Renderer",
  },
  Object {
    "description": "A [render target](https://webglfundamentals.org/webgl/lessons/webgl-render-to-texture.html) is a buffer where the video card draws pixels for a scene that is being rendered in the background. It is used in different effects, such as applying postprocessing to a rendered image before displaying it on the screen.",
    "name": "WebGLRenderTarget",
    "properties": Array [
      Object {
        "description": "The width of the render target.",
        "name": "width",
        "title": "WebGLRenderTarget.width: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.width",
      },
      Object {
        "description": "The height of the render target.",
        "name": "height",
        "title": "WebGLRenderTarget.height: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.height",
      },
      Object {
        "description": "A rectangular area inside the render target's viewport. Fragments that are outside the area will be discarded.",
        "name": "scissor",
        "title": "WebGLRenderTarget.scissor: Vector4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.scissor",
      },
      Object {
        "description": "Indicates whether the scissor test is active or not.",
        "name": "scissorTest",
        "title": "WebGLRenderTarget.scissorTest: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.scissorTest",
      },
      Object {
        "description": "The viewport of this render target.",
        "name": "viewport",
        "title": "WebGLRenderTarget.viewport: Vector4",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.viewport",
      },
      Object {
        "description": "This texture instance holds the rendered pixels. Use it as input for further processing.",
        "name": "texture",
        "title": "WebGLRenderTarget.texture: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.texture",
      },
      Object {
        "description": "Renders to the depth buffer. Default is true.",
        "name": "depthBuffer",
        "title": "WebGLRenderTarget.depthBuffer: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.depthBuffer",
      },
      Object {
        "description": "Renders to the stencil buffer. Default is false.",
        "name": "stencilBuffer",
        "title": "WebGLRenderTarget.stencilBuffer: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.stencilBuffer",
      },
      Object {
        "description": "If set, the scene depth will be rendered to this texture. Default is null.",
        "name": "depthTexture",
        "title": "WebGLRenderTarget.depthTexture: DepthTexture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.depthTexture",
      },
      Object {
        "description": "Sets the size of the render target.",
        "name": "setSize",
        "title": "WebGLRenderTarget.setSize( width: Number, height: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.setSize",
      },
      Object {
        "description": "Creates a copy of this render target.",
        "name": "clone",
        "title": "WebGLRenderTarget.clone(): WebGLRenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.clone",
      },
      Object {
        "description": "Adopts the settings of the given render target.",
        "name": "copy",
        "title": "WebGLRenderTarget.copy( source: WebGLRenderTarget ): WebGLRenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.copy",
      },
      Object {
        "description": "Dispatches a dispose event.",
        "name": "dispose",
        "title": "WebGLRenderTarget.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget.dispose",
      },
    ],
    "title": "WebGLRenderTarget(width: Number, height: Number, options: Object)",
    "url": "https://threejs.org/docs/#api/en/renderers/WebGLRenderTarget",
  },
  Object {
    "description": "Used by the CubeCamera as its WebGLRenderTarget.",
    "name": "WebGLCubeRenderTarget",
    "properties": Array [
      Object {
        "description": "renderer â€” the renderer.
 texture â€” the equirectangular texture.",
        "name": "fromEquirectangularTexture",
        "title": "WebGLCubeRenderTarget.fromEquirectangularTexture( renderer: WebGLRenderer, texture: Texture ): WebGLCubeRenderTarget",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLCubeRenderTarget.fromEquirectangularTexture",
      },
      Object {
        "description": "Call this to clear the renderTarget's color, depth, and/or stencil buffers. The color buffer is set to the renderer's current clear color. Arguments default to *true*.",
        "name": "clear",
        "title": "WebGLCubeRenderTarget.clear( renderer: WebGLRenderer, color: Boolean, depth: Boolean, stencil: Boolean ): undefined",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/WebGLCubeRenderTarget.clear",
      },
    ],
    "title": "WebGLCubeRenderTarget(size: Number, options: Object)",
    "url": "https://threejs.org/docs/#api/en/renderers/WebGLCubeRenderTarget",
  },
  Object {
    "description": "Shader chunks for WebGL Shader library",
    "name": "ShaderChunk",
    "properties": Array [],
    "title": "ShaderChunk",
    "url": "https://threejs.org/docs/#api/en/renderers/shaders/ShaderChunk",
  },
  Object {
    "description": "Webgl Shader Library for three.js",
    "name": "ShaderLib",
    "properties": Array [],
    "title": "ShaderLib",
    "url": "https://threejs.org/docs/#api/en/renderers/shaders/ShaderLib",
  },
  Object {
    "description": "Uniforms library for shared webgl shaders",
    "name": "UniformsLib",
    "properties": Array [],
    "title": "UniformsLib",
    "url": "https://threejs.org/docs/#api/en/renderers/shaders/UniformsLib",
  },
  Object {
    "description": "Provides utility functions for managing uniforms.",
    "name": "UniformsUtils",
    "properties": Array [
      Object {
        "description": "src â€” An object representing uniform definitions.
 Clones the given uniform definitions by performing a deep-copy. That means if the value of a uniform refers to an object like a Vector3 or Texture, the cloned uniform will refer to a new object reference.",
        "name": "clone",
        "title": "UniformsUtils.clone( src: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/shaders/UniformsUtils.clone",
      },
      Object {
        "description": "uniforms â€” An array of objects containing uniform definitions.
 Merges the given uniform definitions into a single object. Since the method internally uses .clone(), it performs a deep-copy when producing the merged uniform definitions.",
        "name": "merge",
        "title": "UniformsUtils.merge( uniforms: Array ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/shaders/UniformsUtils.merge",
      },
    ],
    "title": "UniformsUtils",
    "url": "https://threejs.org/docs/#api/en/renderers/shaders/UniformsUtils",
  },
  Object {
    "description": "This class represents an abstraction of the WebXR Device API and is internally used by WebGLRenderer. WebXRManager also provides a public interface that allows users to enable/disable XR and perform XR related tasks like for instance retrieving controllers.",
    "name": "WebXRManager",
    "properties": Array [
      Object {
        "description": "This flag notifies the renderer to be ready for XR rendering. Default is *false*. Set it to *true* if you are going to use XR in your app.",
        "name": "enabled",
        "title": "WebXRManager.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager.enabled",
      },
      Object {
        "description": "Whether XR presentation is active or not. Default is *false*. This flag is read-only and automatically set by WebXRManager.",
        "name": "isPresenting",
        "title": "WebXRManager.isPresenting: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager.isPresenting",
      },
      Object {
        "description": "index â€” The index of the controller. 
 Returns a Group representing the so called *target ray* space of the controller. Use this space for visualizing 3D objects that support the user in pointing tasks like UI interaction.",
        "name": "getController",
        "title": "WebXRManager.getController( index: Integer ): Group",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager.getController",
      },
      Object {
        "description": "index â€” The index of the controller. 
 Returns a Group representing the so called *grip* space of the controller. Use this space if the user is going to hold other 3D objects like a lightsaber.",
        "name": "getControllerGrip",
        "title": "WebXRManager.getControllerGrip( index: Integer ): Group",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager.getControllerGrip",
      },
      Object {
        "description": "framebufferScaleFactor â€” The framebuffer scale factor to set.
 Specifies the scaling factor to use when determining the size of the framebuffer when rendering to a XR device. The value is relative to the default XR device display resolution. Default is *1*. A value of *0.5* would specify a framebuffer with 50% of the display's native resolution.",
        "name": "setFramebufferScaleFactor",
        "title": "WebXRManager.setFramebufferScaleFactor( framebufferScaleFactor: Float ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager.setFramebufferScaleFactor",
      },
      Object {
        "description": "referenceSpaceType â€” The reference space type to set.
 Can be used to configure a spatial relationship with the user's physical environment. Depending on how the user moves in 3D space, setting an appropriate reference space can improve tracking. Default is *local-floor*. Please check out the [MDN](https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpaceType) for possible values and their use cases.",
        "name": "setReferenceSpaceType",
        "title": "WebXRManager.setReferenceSpaceType( referenceSpaceType: String ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager.setReferenceSpaceType",
      },
    ],
    "title": "WebXRManager",
    "url": "https://threejs.org/docs/#api/en/renderers/webxr/WebXRManager",
  },
  Object {
    "description": "This class contains the parameters that define linear fog, i.e., that grows linearly denser with the distance.",
    "name": "Fog",
    "properties": Array [
      Object {
        "description": "Optional name of the object (doesn't need to be unique). Default is an empty string.",
        "name": "name",
        "title": "Fog.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Fog.name",
      },
      Object {
        "description": "Fog color. Example: If set to black, far away objects will be rendered black.",
        "name": "color",
        "title": "Fog.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Fog.color",
      },
      Object {
        "description": "The minimum distance to start applying fog. Objects that are less than 'near' units from the active camera won't be affected by fog.",
        "name": "near",
        "title": "Fog.near: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Fog.near",
      },
      Object {
        "description": "The maximum distance at which fog stops being calculated and applied. Objects that are more than 'far' units away from the active camera won't be affected by fog.",
        "name": "far",
        "title": "Fog.far: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Fog.far",
      },
      Object {
        "description": "Returns a new fog instance with the same parameters as this one.",
        "name": "clone",
        "title": "Fog.clone(): Fog",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/scenes/Fog.clone",
      },
      Object {
        "description": "Return fog data in JSON format.",
        "name": "toJSON",
        "title": "Fog.toJSON(): Fog",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/scenes/Fog.toJSON",
      },
    ],
    "title": "Fog( color: Integer, near: Float, far: Float )",
    "url": "https://threejs.org/docs/#api/en/scenes/Fog",
  },
  Object {
    "description": "This class contains the parameters that define exponential squared fog, which gives a clear view near the camera and a faster than exponentially densening fog farther from the camera.",
    "name": "FogExp2",
    "properties": Array [
      Object {
        "description": "Optional name of the object (doesn't need to be unique). Default is an empty string.",
        "name": "name",
        "title": "FogExp2.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/FogExp2.name",
      },
      Object {
        "description": "Fog color. Example: If set to black, far away objects will be rendered black.",
        "name": "color",
        "title": "FogExp2.color: Color",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/FogExp2.color",
      },
      Object {
        "description": "Defines how fast the fog will grow dense.",
        "name": "density",
        "title": "FogExp2.density: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/FogExp2.density",
      },
      Object {
        "description": "Returns a new FogExp2 instance with the same parameters as this one.",
        "name": "clone",
        "title": "FogExp2.clone(): FogExp2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/scenes/FogExp2.clone",
      },
      Object {
        "description": "Return FogExp2 data in JSON format.",
        "name": "toJSON",
        "title": "FogExp2.toJSON(): FogExp2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/scenes/FogExp2.toJSON",
      },
    ],
    "title": "FogExp2( color: Integer, density: Float )",
    "url": "https://threejs.org/docs/#api/en/scenes/FogExp2",
  },
  Object {
    "description": "Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras.",
    "name": "Scene",
    "properties": Array [
      Object {
        "description": "Default is true. If set, then the renderer checks every frame if the scene and its objects needs matrix updates. When it isn't, then you have to maintain all matrices in the scene yourself.",
        "name": "autoUpdate",
        "title": "Scene.autoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Scene.autoUpdate",
      },
      Object {
        "description": "If not null, sets the background used when rendering the scene, and is always rendered first. Can be set to a Color which sets the clear color, a Texture covering the canvas, a cubemap as a CubeTexture or an equirectangular as a Texture . Default is null.",
        "name": "background",
        "title": "Scene.background: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Scene.background",
      },
      Object {
        "description": "If not null, this texture is set as the environment map for all physical materials in the scene. However, it's not possible to overwrite an existing texture assigned to MeshStandardMaterial.envMap. Default is null.",
        "name": "environment",
        "title": "Scene.environment: Texture",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Scene.environment",
      },
      Object {
        "description": "A fog instance defining the type of fog that affects everything rendered in the scene. Default is null.",
        "name": "fog",
        "title": "Scene.fog: Fog",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Scene.fog",
      },
      Object {
        "description": "If not null, it will force everything in the scene to be rendered with that material. Default is null.",
        "name": "overrideMaterial",
        "title": "Scene.overrideMaterial: Material",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/scenes/Scene.overrideMaterial",
      },
      Object {
        "description": "meta â€” object containing metadata such as textures or images for the scene.
 Convert the scene to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "Scene.toJSON( meta: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/scenes/Scene.toJSON",
      },
    ],
    "title": "Scene()",
    "url": "https://threejs.org/docs/#api/en/scenes/Scene",
  },
  Object {
    "description": "Creates a texture from a canvas element.
 This is almost the same as the base Texture class, except that it sets needsUpdate to *true* immediately.",
    "name": "CanvasTexture",
    "properties": Array [
      Object {
        "description": "True by default. This is required so that the canvas data is loaded.",
        "name": "needsUpdate",
        "title": "CanvasTexture.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/CanvasTexture.needsUpdate",
      },
    ],
    "title": "CanvasTexture( canvas: HTMLElement, mapping: Constant, wrapS: Constant, wrapT: Constant, magFilter: Constant, minFilter: Constant, format: Constant, type: Constant, anisotropy: Number )",
    "url": "https://threejs.org/docs/#api/en/textures/CanvasTexture",
  },
  Object {
    "description": "Creates a texture based on data in compressed form, for example from a [DDS](https://en.wikipedia.org/wiki/DirectDraw_Surface) file.
 For use with the CompressedTextureLoader.",
    "name": "CompressedTexture",
    "properties": Array [
      Object {
        "description": "False by default. Flipping textures does not work for compressed textures.",
        "name": "flipY",
        "title": "CompressedTexture.flipY: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/CompressedTexture.flipY",
      },
      Object {
        "description": "False by default. Mipmaps can't be generated for compressed textures",
        "name": "generateMipmaps",
        "title": "CompressedTexture.generateMipmaps: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/CompressedTexture.generateMipmaps",
      },
    ],
    "title": "CompressedTexture( mipmaps: Array, width: Number, height: Number, format: Constant, type: Constant, mapping: Constant, wrapS: Constant, wrapT: Constant, magFilter: Constant, minFilter: Constant, anisotropy: Number )",
    "url": "https://threejs.org/docs/#api/en/textures/CompressedTexture",
  },
  Object {
    "description": "Creates a cube texture made up of six images.",
    "name": "CubeTexture",
    "properties": Array [],
    "title": "CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy )",
    "url": "https://threejs.org/docs/#api/en/textures/CubeTexture",
  },
  Object {
    "description": "Creates a texture directly from raw data, width and height.",
    "name": "DataTexture",
    "properties": Array [
      Object {
        "description": "Overridden with a record type holding data, width and height.",
        "name": "image",
        "title": "DataTexture.image: Image",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/DataTexture.image",
      },
    ],
    "title": "DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding )",
    "url": "https://threejs.org/docs/#api/en/textures/DataTexture",
  },
  Object {
    "description": "Creates an array of textures directly from raw data, width and height and depth. This type of texture can only be used with a WebGL 2 rendering context.",
    "name": "DataTexture2DArray",
    "properties": Array [
      Object {
        "description": "Overridden with a record type holding data, width and height and depth.",
        "name": "image",
        "title": "DataTexture2DArray.image: Image",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/DataTexture2DArray.image",
      },
    ],
    "title": "DataTexture2DArray( data, width, height, depth )",
    "url": "https://threejs.org/docs/#api/en/textures/DataTexture2DArray",
  },
  Object {
    "description": "Creates a three-dimensional texture. This type of texture can only be used with a WebGL 2 rendering context.",
    "name": "DataTexture3D",
    "properties": Array [
      Object {
        "description": "This defines how the texture is wrapped in the depth direction.
 The default is THREE.ClampToEdgeWrapping, where the edge is clamped to the outer edge texels. The other two choices are THREE.RepeatWrapping and THREE.MirroredRepeatWrapping. See the texture constants page for details.",
        "name": "wrapR",
        "title": "DataTexture3D.wrapR: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/DataTexture3D.wrapR",
      },
    ],
    "title": "DataTexture3D( data: TypedArray, width: Number, height: Number, depth: Number )",
    "url": "https://threejs.org/docs/#api/en/textures/DataTexture3D",
  },
  Object {
    "description": "This class can be used to automatically save the depth information of a rendering into a texture. When using a WebGL 1 rendering context, DepthTexture requires support for the [WEBGL_depth_texture](https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/) extension.",
    "name": "DepthTexture",
    "properties": Array [],
    "title": "DepthTexture( width: Number, height: Number, type: Constant, wrapS: Constant, wrapT: Constant, magFilter: Constant, minFilter: Constant, anisotropy: Number, format: Constant )",
    "url": "https://threejs.org/docs/#api/en/textures/DepthTexture",
  },
  Object {
    "description": "Create a texture to apply to a surface or as a reflection or refraction map.",
    "name": "Texture",
    "properties": Array [
      Object {
        "description": "Readonly - unique number for this texture instance.",
        "name": "id",
        "title": "Texture.id: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.id",
      },
      Object {
        "description": "[UUID](http://en.wikipedia.org/wiki/Universally_unique_identifier) of this object instance. This gets automatically assigned, so this shouldn't be edited.",
        "name": "uuid",
        "title": "Texture.uuid: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.uuid",
      },
      Object {
        "description": "Optional name of the object (doesn't need to be unique). Default is an empty string.",
        "name": "name",
        "title": "Texture.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.name",
      },
      Object {
        "description": "An image object, typically created using the TextureLoader.load method. This can be any image (e.g., PNG, JPG, GIF, DDS) or video (e.g., MP4, OGG/OGV) type supported by three.js.
 To use video as a texture you need to have a playing HTML5 video element as a source for your texture image and continuously update this texture as long as video is playing - the VideoTexture class handles this automatically.",
        "name": "image",
        "title": "Texture.image: Image",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.image",
      },
      Object {
        "description": "Array of user-specified mipmaps (optional).",
        "name": "mipmaps",
        "title": "Texture.mipmaps: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.mipmaps",
      },
      Object {
        "description": "How the image is applied to the object. An object type of THREE.UVMapping is the default, where the U,V coordinates are used to apply the map.
 See the texture constants page for other mapping types.",
        "name": "mapping",
        "title": "Texture.mapping: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.mapping",
      },
      Object {
        "description": "This defines how the texture is wrapped horizontally and corresponds to *U* in UV mapping.
 The default is THREE.ClampToEdgeWrapping, where the edge is clamped to the outer edge texels. The other two choices are THREE.RepeatWrapping and THREE.MirroredRepeatWrapping. See the texture constants page for details.",
        "name": "wrapS",
        "title": "Texture.wrapS: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.wrapS",
      },
      Object {
        "description": "This defines how the texture is wrapped vertically and corresponds to *V* in UV mapping.
 The same choices are available as for wrapS.
 NOTE: tiling of images in textures only functions if image dimensions are powers of two (2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, ...) in terms of pixels. Individual dimensions need not be equal, but each must be a power of two. This is a limitation of WebGL, not three.js.",
        "name": "wrapT",
        "title": "Texture.wrapT: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.wrapT",
      },
      Object {
        "description": "How the texture is sampled when a texel covers more than one pixel. The default is THREE.LinearFilter, which takes the four closest texels and bilinearly interpolates among them. The other option is THREE.NearestFilter, which uses the value of the closest texel.
 See the texture constants page for details.",
        "name": "magFilter",
        "title": "Texture.magFilter: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.magFilter",
      },
      Object {
        "description": "How the texture is sampled when a texel covers less than one pixel. The default is THREE.LinearMipmapLinearFilter, which uses mipmapping and a trilinear filter. 
 See the texture constants page for all possible choices.",
        "name": "minFilter",
        "title": "Texture.minFilter: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.minFilter",
      },
      Object {
        "description": "The number of samples taken along the axis through the pixel that has the highest density of texels. By default, this value is 1. A higher value gives a less blurry result than a basic mipmap, at the cost of more texture samples being used. Use renderer.getMaxAnisotropy() to find the maximum valid anisotropy value for the GPU; this value is usually a power of 2.",
        "name": "anisotropy",
        "title": "Texture.anisotropy: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.anisotropy",
      },
      Object {
        "description": "The default is THREE.RGBAFormat, although the TextureLoader will automatically set this to THREE.RGBFormat for JPG images. 
 See the texture constants page for details of other formats.",
        "name": "format",
        "title": "Texture.format: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.format",
      },
      Object {
        "description": "The default value is obtained using a combination of .format and .type.
 The GPU format allows the developer to specify how the data is going to be stored on the GPU.
 See the texture constants page for details regarding all supported internal formats.",
        "name": "internalFormat",
        "title": "Texture.internalFormat: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.internalFormat",
      },
      Object {
        "description": "This must correspond to the .format. The default is THREE.UnsignedByteType, which will be used for most texture formats.
 See the texture constants page for details of other formats.",
        "name": "type",
        "title": "Texture.type: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.type",
      },
      Object {
        "description": "How much a single repetition of the texture is offset from the beginning, in each direction U and V. Typical range is *0.0* to *1.0*.",
        "name": "offset",
        "title": "Texture.offset: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.offset",
      },
      Object {
        "description": "How many times the texture is repeated across the surface, in each direction U and V. If repeat is set greater than 1 in either direction, the corresponding Wrap parameter should also be set to THREE.RepeatWrapping or THREE.MirroredRepeatWrapping to achieve the desired tiling effect. Setting different repeat values for textures is restricted in the same way like .offset.",
        "name": "repeat",
        "title": "Texture.repeat: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.repeat",
      },
      Object {
        "description": "How much the texture is rotated around the center point, in radians. Positive values are counter-clockwise. Default is *0*.",
        "name": "rotation",
        "title": "Texture.rotation: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.rotation",
      },
      Object {
        "description": "The point around which rotation occurs. A value of (0.5, 0.5) corresponds to the center of the texture. Default is (0, 0), the lower left.",
        "name": "center",
        "title": "Texture.center: Vector2",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.center",
      },
      Object {
        "description": "Whether to update the texture's uv-transform .matrix from the texture properties .offset, .repeat, .rotation, and .center. True by default. Set this to false if you are specifying the uv-transform matrix directly.",
        "name": "matrixAutoUpdate",
        "title": "Texture.matrixAutoUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.matrixAutoUpdate",
      },
      Object {
        "description": "The uv-transform matrix for the texture. Updated by the renderer from the texture properties .offset, .repeat, .rotation, and .center when the texture's .matrixAutoUpdate property is true. When .matrixAutoUpdate property is false, this matrix may be set manually. Default is the identity matrix.",
        "name": "matrix",
        "title": "Texture.matrix: Matrix3",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.matrix",
      },
      Object {
        "description": "Whether to generate mipmaps (if possible) for a texture. True by default. Set this to false if you are creating mipmaps manually.",
        "name": "generateMipmaps",
        "title": "Texture.generateMipmaps: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.generateMipmaps",
      },
      Object {
        "description": "If set to *true*, the alpha channel, if present, is multiplied into the color channels when the texture is uploaded to the GPU. Default is *false*.
 Note that this property has no effect for [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap). You need to configure on bitmap creation instead. See ImageBitmapLoader.",
        "name": "premultiplyAlpha",
        "title": "Texture.premultiplyAlpha: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.premultiplyAlpha",
      },
      Object {
        "description": "If set to *true*, the texture is flipped along the vertical axis when uploaded to the GPU. Default is *true*.
 Note that this property has no effect for [ImageBitmap](https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap). You need to configure on bitmap creation instead. See ImageBitmapLoader.",
        "name": "flipY",
        "title": "Texture.flipY: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.flipY",
      },
      Object {
        "description": "4 by default. Specifies the alignment requirements for the start of each pixel row in memory. The allowable values are 1 (byte-alignment), 2 (rows aligned to even-numbered bytes), 4 (word-alignment), and 8 (rows start on double-word boundaries). See [glPixelStorei](http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml) for more information.",
        "name": "unpackAlignment",
        "title": "Texture.unpackAlignment: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.unpackAlignment",
      },
      Object {
        "description": "THREE.LinearEncoding is the default. See the texture constants page for details of other formats.
 Note that if this value is changed on a texture after the material has been used, it is necessary to trigger a Material.needsUpdate for this value to be realized in the shader.",
        "name": "encoding",
        "title": "Texture.encoding: number",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.encoding",
      },
      Object {
        "description": "This starts at *0* and counts how many times needsUpdate is set to *true*.",
        "name": "version",
        "title": "Texture.version: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.version",
      },
      Object {
        "description": "A callback function, called when the texture is updated (e.g., when needsUpdate has been set to true and then the texture is used).",
        "name": "onUpdate",
        "title": "Texture.onUpdate: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.onUpdate",
      },
      Object {
        "description": "Set this to *true* to trigger an update next time the texture is used. Particularly important for setting the wrap mode.",
        "name": "needsUpdate",
        "title": "Texture.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.needsUpdate",
      },
      Object {
        "description": "Update the texture's uv-transform .matrix from the texture properties .offset, .repeat, .rotation, and .center.",
        "name": "updateMatrix",
        "title": "Texture.updateMatrix(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.updateMatrix",
      },
      Object {
        "description": "Make copy of the texture. Note this is not a \\"deep copy\\", the image is shared.",
        "name": "clone",
        "title": "Texture.clone(): Texture",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.clone",
      },
      Object {
        "description": "meta â€” optional object containing metadata.
 Convert the texture to three.js [JSON Object/Scene format](https://github.com/mrdoob/three.js/wiki/JSON-Object-Scene-format-4).",
        "name": "toJSON",
        "title": "Texture.toJSON( meta: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.toJSON",
      },
      Object {
        "description": "Call EventDispatcher.dispatchEvent with a 'dispose' event type.",
        "name": "dispose",
        "title": "Texture.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.dispose",
      },
      Object {
        "description": "Transform the uv based on the value of this texture's .offset, .repeat, .wrapS, .wrapT and .flipY properties.",
        "name": "transformUv",
        "title": "Texture.transformUv( uv: Vector2 ): Vector2",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/textures/Texture.transformUv",
      },
    ],
    "title": "Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding )",
    "url": "https://threejs.org/docs/#api/en/textures/Texture",
  },
  Object {
    "description": "Creates a texture for use with a video texture.
 This is almost the same as the base Texture class, except that it continuosly sets needsUpdate to *true* so that the texture is updated as the video plays. Automatic creation of mipmaps is also disabled.",
    "name": "VideoTexture",
    "properties": Array [
      Object {
        "description": "You will not need to set this manually here as it is handled by the update method.",
        "name": "needsUpdate",
        "title": "VideoTexture.needsUpdate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/textures/VideoTexture.needsUpdate",
      },
      Object {
        "description": "This is called automatically and sets needsUpdate to *true* every time a new frame is available.",
        "name": "update",
        "title": "VideoTexture.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/textures/VideoTexture.update",
      },
    ],
    "title": "VideoTexture( video: Video, mapping: Constant, wrapS: Constant, wrapT: Constant, magFilter: Constant, minFilter: Constant, format: Constant, type: Constant, anisotropy: Number )",
    "url": "https://threejs.org/docs/#api/en/textures/VideoTexture",
  },
  Object {
    "description": "A solver for IK with [*CCD Algorithm*](https://sites.google.com/site/auraliusproject/ccd-algorithm). 
 CCDIKSolver solves Inverse Kinematics Problem with CCD Algorithm. CCDIKSolver is designed to work with SkinnedMesh loaded by MMDLoader but also can be used for generic SkinnedMesh.",
    "name": "CCDIKSolver",
    "properties": Array [
      Object {
        "description": "An array of IK parameter passed to the constructor.",
        "name": "iks",
        "title": "CCDIKSolver.iks: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/CCDIKSolver.iks",
      },
      Object {
        "description": "SkinnedMesh passed to the constructor.",
        "name": "mesh",
        "title": "CCDIKSolver.mesh: SkinnedMesh",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/CCDIKSolver.mesh",
      },
      Object {
        "description": "Return CCDIKHelper. You can visualize IK bones by adding the helper to scene.",
        "name": "createHelper",
        "title": "CCDIKSolver.createHelper(): CCDIKHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/CCDIKSolver.createHelper",
      },
      Object {
        "description": "Update IK bones quaternion by solving CCD algorithm.",
        "name": "update",
        "title": "CCDIKSolver.update(): CCDIKSolver",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/CCDIKSolver.update",
      },
      Object {
        "description": "Update an IK bone quaternion by solving CCD algorithm.",
        "name": "updateOne",
        "title": "CCDIKSolver.updateOne( ikParam: Object ): CCDIKSolver",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/CCDIKSolver.updateOne",
      },
    ],
    "title": "CCDIKSolver( mesh: SkinnedMesh, iks: Array )",
    "url": "https://threejs.org/docs/#examples/en/animations/CCDIKSolver",
  },
  Object {
    "description": "A animation helper for [*MMD*](https://sites.google.com/view/evpvp/) resources. 
 MMDAnimationHelper handles animation of MMD assets loaded by MMDLoader with MMD special features as IK, Grant, and Physics. It uses CCDIKSolver and MMDPhysics inside.",
    "name": "MMDAnimationHelper",
    "properties": Array [
      Object {
        "description": "An Audio added to helper.",
        "name": "audio",
        "title": "MMDAnimationHelper.audio: Audio",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.audio",
      },
      Object {
        "description": "An Camera added to helper.",
        "name": "camera",
        "title": "MMDAnimationHelper.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.camera",
      },
      Object {
        "description": "An array of SkinnedMesh added to helper.",
        "name": "meshes",
        "title": "MMDAnimationHelper.meshes: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.meshes",
      },
      Object {
        "description": "A WeakMap which holds animation stuffs used in helper for objects added to helper. For example, you can access AnimationMixer for an added SkinnedMesh with \\"helper.objects.get( mesh ).mixer\\"",
        "name": "objects",
        "title": "MMDAnimationHelper.objects: WeakMap",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.objects",
      },
      Object {
        "description": "An optional callback that is executed immediately before the physicis calculation for an SkinnedMesh. This function is called with the SkinnedMesh.",
        "name": "onBeforePhysics",
        "title": "MMDAnimationHelper.onBeforePhysics: Function",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.onBeforePhysics",
      },
      Object {
        "description": "object â€” SkinnedMesh, Camera, or Audio
 params â€” (optional)",
        "name": "add",
        "title": "MMDAnimationHelper.add( object: Object3D, params: Object ): MMDAnimationHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.add",
      },
      Object {
        "description": "key â€” Allowed strings are 'animation', 'ik', 'grant', 'physics', and 'cameraAnimation'.
 enabled â€” true is enable, false is disable",
        "name": "enable",
        "title": "MMDAnimationHelper.enable( key: String, enabled: Boolean ): MMDAnimationHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.enable",
      },
      Object {
        "description": "mesh â€” SkinnedMesh which changes the posing. It doesn't need to be added to helper.
 vpd â€” VPD content obtained by MMDLoader.loadVPD
 params â€” (optional)",
        "name": "pose",
        "title": "MMDAnimationHelper.pose( mesh: SkinnedMesh, vpd: Object, params: Object ): MMDAnimationHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.pose",
      },
      Object {
        "description": "object â€” SkinnedMesh, Camera, or Audio",
        "name": "remove",
        "title": "MMDAnimationHelper.remove( object: Object3D ): MMDAnimationHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.remove",
      },
      Object {
        "description": "delta â€” number in second",
        "name": "update",
        "title": "MMDAnimationHelper.update( delta: Number ): MMDAnimationHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper.update",
      },
    ],
    "title": "MMDAnimationHelper( params: Object )",
    "url": "https://threejs.org/docs/#examples/en/animations/MMDAnimationHelper",
  },
  Object {
    "description": "A Physics handler for [*MMD*](https://sites.google.com/view/evpvp/) resources. 
 MMDPhysics calculates Physics for model loaded by MMDLoader with [ammo.js](https://github.com/kripken/ammo.js/) (Bullet-based JavaScript Physics engine).",
    "name": "MMDPhysics",
    "properties": Array [
      Object {
        "description": "SkinnedMesh passed to the constructor.",
        "name": "mesh",
        "title": "MMDPhysics.mesh: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics.mesh",
      },
      Object {
        "description": "Return MMDPhysicsHelper. You can visualize Rigid bodies by adding the helper to scene.",
        "name": "createHelper",
        "title": "MMDPhysics.createHelper(): MMDPhysicsHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics.createHelper",
      },
      Object {
        "description": "Resets Rigid bodies transform to current bone's.",
        "name": "reset",
        "title": "MMDPhysics.reset(): CCDIKSolver",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics.reset",
      },
      Object {
        "description": "gravity â€” Direction and volume of gravity.",
        "name": "setGravity",
        "title": "MMDPhysics.setGravity( gravity: Vector3 ): CCDIKSolver",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics.setGravity",
      },
      Object {
        "description": "delta â€” Time in second.",
        "name": "update",
        "title": "MMDPhysics.update( delta: Number ): CCDIKSolver",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics.update",
      },
      Object {
        "description": "delta â€” Time in second.",
        "name": "warmup",
        "title": "MMDPhysics.warmup( cycles: Integer ): CCDIKSolver",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics.warmup",
      },
    ],
    "title": "MMDPhysics( mesh: SkinnedMesh, rigidBodyParams: Array, constraintParams: Array, params: Object )",
    "url": "https://threejs.org/docs/#examples/en/animations/MMDPhysics",
  },
  Object {
    "description": "Can be used to orient the camera based on the mobile device's orientation.",
    "name": "DeviceOrientationControls",
    "properties": Array [
      Object {
        "description": "The alpha offset in radians. Default is *0*.",
        "name": "alphaOffset",
        "title": "DeviceOrientationControls.alphaOffset: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.alphaOffset",
      },
      Object {
        "description": "The current *deviceorientation* event object.",
        "name": "deviceOrientation",
        "title": "DeviceOrientationControls.deviceOrientation: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.deviceOrientation",
      },
      Object {
        "description": "Whether or not the controls are enabled.",
        "name": "enabled",
        "title": "DeviceOrientationControls.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.enabled",
      },
      Object {
        "description": "The camera to be controlled.",
        "name": "object",
        "title": "DeviceOrientationControls.object: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.object",
      },
      Object {
        "description": "The orientation in degrees (in 90-degree increments) of the viewport relative to the device's natural orientation. Default is *0*.",
        "name": "screenOrientation",
        "title": "DeviceOrientationControls.screenOrientation: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.screenOrientation",
      },
      Object {
        "description": "Adds the event listeners of the controls and enables it.",
        "name": "connect",
        "title": "DeviceOrientationControls.connect (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.connect",
      },
      Object {
        "description": "Removes the event listeners of the controls and disables it.",
        "name": "disconnect",
        "title": "DeviceOrientationControls.disconnect (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.disconnect",
      },
      Object {
        "description": "Should be called if the controls is no longer required.",
        "name": "dispose",
        "title": "DeviceOrientationControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.dispose",
      },
      Object {
        "description": "Updates the controls. Usually called in the animation loop.",
        "name": "update",
        "title": "DeviceOrientationControls.update (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls.update",
      },
    ],
    "title": "DeviceOrientationControls( object: Camera )",
    "url": "https://threejs.org/docs/#examples/en/controls/DeviceOrientationControls",
  },
  Object {
    "description": "This class can be used to provide a drag'n'drop interaction.",
    "name": "DragControls",
    "properties": Array [
      Object {
        "description": "Whether or not the controls are enabled.",
        "name": "enabled",
        "title": "DragControls.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DragControls.enabled",
      },
      Object {
        "description": "This option only works if the DragControls.objects array contains a single draggable group object. If set to *true*, DragControls does not transform individual objects but the entire group. Default is *false*.",
        "name": "transformGroup",
        "title": "DragControls.transformGroup: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/DragControls.transformGroup",
      },
      Object {
        "description": "Adds the event listeners of the controls.",
        "name": "activate",
        "title": "DragControls.activate (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DragControls.activate",
      },
      Object {
        "description": "Removes the event listeners of the controls.",
        "name": "deactivate",
        "title": "DragControls.deactivate (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DragControls.deactivate",
      },
      Object {
        "description": "Should be called if the controls is no longer required.",
        "name": "dispose",
        "title": "DragControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DragControls.dispose",
      },
      Object {
        "description": "Returns the array of draggable objects.",
        "name": "getObjects",
        "title": "DragControls.getObjects (): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/DragControls.getObjects",
      },
    ],
    "title": "DragControls( objects: Array, camera: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/DragControls",
  },
  Object {
    "description": "This class is an alternative implementation of FlyControls.",
    "name": "FirstPersonControls",
    "properties": Array [
      Object {
        "description": "Whether or not it's possible to look around. Default is *true*.",
        "name": "activeLook",
        "title": "FirstPersonControls.activeLook: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.activeLook",
      },
      Object {
        "description": "Whether or not the camera is automatically moved forward. Default is *false*.",
        "name": "autoForward",
        "title": "FirstPersonControls.autoForward: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.autoForward",
      },
      Object {
        "description": "Whether or not looking around is vertically constrained by .verticalMin, .verticalMax]. Default is *false*.",
        "name": "constrainVertical",
        "title": "FirstPersonControls.constrainVertical: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.constrainVertical",
      },
      Object {
        "description": "The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.",
        "name": "domElement",
        "title": "FirstPersonControls.domElement: HTMLDOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.domElement",
      },
      Object {
        "description": "Whether or not the controls are enabled. Default is *true*.",
        "name": "enabled",
        "title": "FirstPersonControls.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.enabled",
      },
      Object {
        "description": "Determines how much faster the camera moves when it's y-component is near .heightMax. Default is *1*.",
        "name": "heightCoef",
        "title": "FirstPersonControls.heightCoef: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.heightCoef",
      },
      Object {
        "description": "Upper camera height limit used for movement speed adjustment. Default is *1*.",
        "name": "heightMax",
        "title": "FirstPersonControls.heightMax: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.heightMax",
      },
      Object {
        "description": "Lower camera height limit used for movement speed adjustment. Default is *0*.",
        "name": "heightMin",
        "title": "FirstPersonControls.heightMin: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.heightMin",
      },
      Object {
        "description": "Whether or not the camera's height influences the forward movement speed. Default is *false*. Use the properties .heightCoef, .heightMin and .heightMax for configuration.",
        "name": "heightSpeed",
        "title": "FirstPersonControls.heightSpeed: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.heightSpeed",
      },
      Object {
        "description": "Whether or not it's possible to vertically look around. Default is *true*.",
        "name": "lookVertical",
        "title": "FirstPersonControls.lookVertical: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.lookVertical",
      },
      Object {
        "description": "The look around speed. Default is *0.005*.",
        "name": "lookSpeed",
        "title": "FirstPersonControls.lookSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.lookSpeed",
      },
      Object {
        "description": "Whether or not the mouse is pressed down. Read-only property.",
        "name": "mouseDragOn",
        "title": "FirstPersonControls.mouseDragOn: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.mouseDragOn",
      },
      Object {
        "description": "The movement speed. Default is *1*.",
        "name": "movementSpeed",
        "title": "FirstPersonControls.movementSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.movementSpeed",
      },
      Object {
        "description": "The camera to be controlled.",
        "name": "object",
        "title": "FirstPersonControls.object: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.object",
      },
      Object {
        "description": "How far you can vertically look around, upper limit. Range is 0 to Math.PI radians. Default is *Math.PI*.",
        "name": "verticalMax",
        "title": "FirstPersonControls.verticalMax: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.verticalMax",
      },
      Object {
        "description": "How far you can vertically look around, lower limit. Range is 0 to Math.PI radians. Default is *0*.",
        "name": "verticalMin",
        "title": "FirstPersonControls.verticalMin: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.verticalMin",
      },
      Object {
        "description": "Should be called if the controls is no longer required.",
        "name": "dispose",
        "title": "FirstPersonControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.dispose",
      },
      Object {
        "description": "Should be called if the application window is resized.",
        "name": "handleResize",
        "title": "FirstPersonControls.handleResize (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.handleResize",
      },
      Object {
        "description": "",
        "name": "lookAt",
        "title": "FirstPersonControls.lookAt( vector: Vector3 ): FirstPersonControls",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.lookAt",
      },
      Object {
        "description": "",
        "name": "update",
        "title": "FirstPersonControls.update ( delta: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls.update",
      },
    ],
    "title": "FirstPersonControls( object: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/FirstPersonControls",
  },
  Object {
    "description": "FlyControls enables a navigation similar to fly modes in DCC tools like Blender. You can arbitrarily transform the camera in 3D space without any limitations (e.g. focus on a specific target).",
    "name": "FlyControls",
    "properties": Array [
      Object {
        "description": "If set to *true*, the camera automatically moves forward (and does not stop) when initially translated. Default is *false*.",
        "name": "autoForward",
        "title": "FlyControls.autoForward: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.autoForward",
      },
      Object {
        "description": "The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.",
        "name": "domElement",
        "title": "FlyControls.domElement: HTMLDOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.domElement",
      },
      Object {
        "description": "If set to *true*, you can only look around by performing a drag interaction. Default is *false*.",
        "name": "dragToLook",
        "title": "FlyControls.dragToLook: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.dragToLook",
      },
      Object {
        "description": "The movement speed. Default is *1*.",
        "name": "movementSpeed",
        "title": "FlyControls.movementSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.movementSpeed",
      },
      Object {
        "description": "The camera to be controlled.",
        "name": "object",
        "title": "FlyControls.object: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.object",
      },
      Object {
        "description": "The rotation speed. Default is *0.005*.",
        "name": "rollSpeed",
        "title": "FlyControls.rollSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.rollSpeed",
      },
      Object {
        "description": "Should be called if the controls is no longer required.",
        "name": "dispose",
        "title": "FlyControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.dispose",
      },
      Object {
        "description": "",
        "name": "update",
        "title": "FlyControls.update ( delta: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/FlyControls.update",
      },
    ],
    "title": "FlyControls( object: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/FlyControls",
  },
  Object {
    "description": "Orbit controls allow the camera to orbit around a target.
 To use this, as with all files in the /examples directory, you will have to include the file separately in your HTML.",
    "name": "OrbitControls",
    "properties": Array [
      Object {
        "description": "Set to true to automatically rotate around the target.
 Note that if this is enabled, you must call .update () in your animation loop.",
        "name": "autoRotate",
        "title": "OrbitControls.autoRotate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.autoRotate",
      },
      Object {
        "description": "How fast to rotate around the target if .autoRotate is true. Default is 2.0, which equates to 30 seconds per orbit at 60fps.
 Note that if .autoRotate is enabled, you must call .update () in your animation loop.",
        "name": "autoRotateSpeed",
        "title": "OrbitControls.autoRotateSpeed: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.autoRotateSpeed",
      },
      Object {
        "description": "The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.",
        "name": "domElement",
        "title": "OrbitControls.domElement: HTMLDOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.domElement",
      },
      Object {
        "description": "When set to *false*, the controls will not respond to user input. Default is *true*.",
        "name": "enabled",
        "title": "OrbitControls.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.enabled",
      },
      Object {
        "description": "Set to true to enable damping (inertia), which can be used to give a sense of weight to the controls. Default is false.
 Note that if this is enabled, you must call .update () in your animation loop.",
        "name": "enableDamping",
        "title": "OrbitControls.enableDamping: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.enableDamping",
      },
      Object {
        "description": "Enable or disable camera panning. Default is true.",
        "name": "enablePan",
        "title": "OrbitControls.enablePan: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.enablePan",
      },
      Object {
        "description": "Enable or disable horizontal and vertical rotation of the camera. Default is true.
 Note that it is possible to disable a single axis by setting the min and max of the polar angle or azimuth angle to the same value, which will cause the vertical or horizontal rotation to be fixed at that value.",
        "name": "enableRotate",
        "title": "OrbitControls.enableRotate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.enableRotate",
      },
      Object {
        "description": "Enable or disable zooming (dollying) of the camera.",
        "name": "enableZoom",
        "title": "OrbitControls.enableZoom: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.enableZoom",
      },
      Object {
        "description": "How fast to pan the camera when the keyboard is used. Default is 7.0 pixels per keypress.",
        "name": "keyPanSpeed",
        "title": "OrbitControls.keyPanSpeed: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.keyPanSpeed",
      },
      Object {
        "description": "This object contains references to the keycodes for controlling camera panning. Default is the 4 arrow keys. \`\`\` controls.keys = { LEFT: 'ArrowLeft', //left arrow UP: 'ArrowUp', // up arrow RIGHT: 'ArrowRight', // right arrow BOTTOM: 'ArrowDown' // down arrow } \`\`\` See [KeyboardEvent.code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code) for a full list of keycodes.",
        "name": "keys",
        "title": "OrbitControls.keys: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.keys",
      },
      Object {
        "description": "How far you can orbit horizontally, upper limit. If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min &lt; 2 PI ). Default is Infinity.",
        "name": "maxAzimuthAngle",
        "title": "OrbitControls.maxAzimuthAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.maxAzimuthAngle",
      },
      Object {
        "description": "How far you can dolly out ( PerspectiveCamera only ). Default is Infinity.",
        "name": "maxDistance",
        "title": "OrbitControls.maxDistance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.maxDistance",
      },
      Object {
        "description": "How far you can orbit vertically, upper limit. Range is 0 to Math.PI radians, and default is Math.PI.",
        "name": "maxPolarAngle",
        "title": "OrbitControls.maxPolarAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.maxPolarAngle",
      },
      Object {
        "description": "How far you can zoom out ( OrthographicCamera only ). Default is Infinity.",
        "name": "maxZoom",
        "title": "OrbitControls.maxZoom: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.maxZoom",
      },
      Object {
        "description": "How far you can orbit horizontally, lower limit. If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min &lt; 2 PI ). Default is Infinity.",
        "name": "minAzimuthAngle",
        "title": "OrbitControls.minAzimuthAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.minAzimuthAngle",
      },
      Object {
        "description": "How far you can dolly in ( PerspectiveCamera only ). Default is 0.",
        "name": "minDistance",
        "title": "OrbitControls.minDistance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.minDistance",
      },
      Object {
        "description": "How far you can orbit vertically, lower limit. Range is 0 to Math.PI radians, and default is 0.",
        "name": "minPolarAngle",
        "title": "OrbitControls.minPolarAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.minPolarAngle",
      },
      Object {
        "description": "How far you can zoom in ( OrthographicCamera only ). Default is 0.",
        "name": "minZoom",
        "title": "OrbitControls.minZoom: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.minZoom",
      },
      Object {
        "description": "The camera being controlled.",
        "name": "object",
        "title": "OrbitControls.object: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.object",
      },
      Object {
        "description": "Speed of panning. Default is 1.",
        "name": "panSpeed",
        "title": "OrbitControls.panSpeed: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.panSpeed",
      },
      Object {
        "description": "Used internally by the saveState and reset methods.",
        "name": "position0",
        "title": "OrbitControls.position0: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.position0",
      },
      Object {
        "description": "Speed of rotation. Default is 1.",
        "name": "rotateSpeed",
        "title": "OrbitControls.rotateSpeed: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.rotateSpeed",
      },
      Object {
        "description": "Defines how the camera's position is translated when panning. If true, the camera pans in screen space. Otherwise, the camera pans in the plane orthogonal to the camera's up direction. Default is true for OrbitControls; false for MapControls.",
        "name": "screenSpacePanning",
        "title": "OrbitControls.screenSpacePanning: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.screenSpacePanning",
      },
      Object {
        "description": "Used internally by the saveState and reset methods.",
        "name": "target0",
        "title": "OrbitControls.target0: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.target0",
      },
      Object {
        "description": "The focus point of the controls, the .object orbits around this. It can be updated manually at any point to change the focus of the controls.",
        "name": "target",
        "title": "OrbitControls.target: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.target",
      },
      Object {
        "description": "This object contains references to the touch actions used by the controls. \`\`\` controls.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN } \`\`\`",
        "name": "touches",
        "title": "OrbitControls.touches: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.touches",
      },
      Object {
        "description": "Used internally by the saveState and reset methods.",
        "name": "zoom0",
        "title": "OrbitControls.zoom0: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.zoom0",
      },
      Object {
        "description": "Speed of zooming / dollying. Default is 1.",
        "name": "zoomSpeed",
        "title": "OrbitControls.zoomSpeed: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.zoomSpeed",
      },
      Object {
        "description": "Remove all the event listeners.",
        "name": "dispose",
        "title": "OrbitControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.dispose",
      },
      Object {
        "description": "Get the current horizontal rotation, in radians.",
        "name": "getAzimuthalAngle",
        "title": "OrbitControls.getAzimuthalAngle (): radians",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.getAzimuthalAngle",
      },
      Object {
        "description": "Get the current vertical rotation, in radians.",
        "name": "getPolarAngle",
        "title": "OrbitControls.getPolarAngle (): radians",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.getPolarAngle",
      },
      Object {
        "description": "Adds key event listeners to the given DOM element. *window* is a recommended argument for using this method.",
        "name": "listenToKeyEvents",
        "title": "OrbitControls.listenToKeyEvents ( domElement: HTMLDOMElement ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.listenToKeyEvents",
      },
      Object {
        "description": "Reset the controls to their state from either the last time the .saveState was called, or the initial state.",
        "name": "reset",
        "title": "OrbitControls.reset (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.reset",
      },
      Object {
        "description": "Save the current state of the controls. This can later be recovered with .reset.",
        "name": "saveState",
        "title": "OrbitControls.saveState (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.saveState",
      },
      Object {
        "description": "Update the controls. Must be called after any manual changes to the camera's transform, or in the update loop if .autoRotate or .enableDamping are set.",
        "name": "update",
        "title": "OrbitControls.update (): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls.update",
      },
    ],
    "title": "OrbitControls( object: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/OrbitControls",
  },
  Object {
    "description": "The implementation of this class is based on the [Pointer Lock API](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API). PointerLockControls is a perfect choice for first person 3D games.",
    "name": "PointerLockControls",
    "properties": Array [
      Object {
        "description": "The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.",
        "name": "domElement",
        "title": "PointerLockControls.domElement: HTMLDOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.domElement",
      },
      Object {
        "description": "Whether or not the controls are locked.",
        "name": "isLocked",
        "title": "PointerLockControls.isLocked: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.isLocked",
      },
      Object {
        "description": "Camera pitch, upper limit. Range is 0 to Math.PI radians. Default is Math.PI.",
        "name": "maxPolarAngle",
        "title": "PointerLockControls.maxPolarAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.maxPolarAngle",
      },
      Object {
        "description": "Camera pitch, lower limit. Range is 0 to Math.PI radians. Default is 0.",
        "name": "minPolarAngle",
        "title": "PointerLockControls.minPolarAngle: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.minPolarAngle",
      },
      Object {
        "description": "Adds the event listeners of the controls.",
        "name": "connect",
        "title": "PointerLockControls.connect (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.connect",
      },
      Object {
        "description": "Removes the event listeners of the controls.",
        "name": "disconnect",
        "title": "PointerLockControls.disconnect (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.disconnect",
      },
      Object {
        "description": "",
        "name": "getDirection",
        "title": "PointerLockControls.getDirection ( target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.getDirection",
      },
      Object {
        "description": "Activates the pointer lock.",
        "name": "lock",
        "title": "PointerLockControls.lock (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.lock",
      },
      Object {
        "description": "",
        "name": "moveForward",
        "title": "PointerLockControls.moveForward ( distance: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.moveForward",
      },
      Object {
        "description": "",
        "name": "moveRight",
        "title": "PointerLockControls.moveRight ( distance: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.moveRight",
      },
      Object {
        "description": "Exits the pointer lock.",
        "name": "unlock",
        "title": "PointerLockControls.unlock (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls.unlock",
      },
    ],
    "title": "PointerLockControls( camera: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/PointerLockControls",
  },
  Object {
    "description": "",
    "name": "TrackballControls",
    "properties": Array [
      Object {
        "description": "The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.",
        "name": "domElement",
        "title": "TrackballControls.domElement: HTMLDOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.domElement",
      },
      Object {
        "description": "Defines the intensity of damping. Only considered if staticMoving is set to *false*. Default is *0.2*.",
        "name": "dynamicDampingFactor",
        "title": "TrackballControls.dynamicDampingFactor: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.dynamicDampingFactor",
      },
      Object {
        "description": "Whether or not the controls are enabled.",
        "name": "enabled",
        "title": "TrackballControls.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.enabled",
      },
      Object {
        "description": "This array holds keycodes for controlling interactions.",
        "name": "keys",
        "title": "TrackballControls.keys: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.keys",
      },
      Object {
        "description": "How far you can zoom out. Default is *Infinity*.",
        "name": "maxDistance",
        "title": "TrackballControls.maxDistance: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.maxDistance",
      },
      Object {
        "description": "How far you can zoom in. Default is *0*.",
        "name": "minDistance",
        "title": "TrackballControls.minDistance: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.minDistance",
      },
      Object {
        "description": "Whether or not panning is disabled. Default is *false*.",
        "name": "noPan",
        "title": "TrackballControls.noPan: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.noPan",
      },
      Object {
        "description": "Whether or not rotation is disabled. Default is *false*.",
        "name": "noRotate",
        "title": "TrackballControls.noRotate: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.noRotate",
      },
      Object {
        "description": "Whether or not zooming is disabled. Default is *false*.",
        "name": "noZoom",
        "title": "TrackballControls.noZoom: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.noZoom",
      },
      Object {
        "description": "The camera being controlled.",
        "name": "object",
        "title": "TrackballControls.object: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.object",
      },
      Object {
        "description": "The pan speed. Default is *0.3*.",
        "name": "panSpeed",
        "title": "TrackballControls.panSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.panSpeed",
      },
      Object {
        "description": "The rotation speed. Default is *1.0*.",
        "name": "rotateSpeed",
        "title": "TrackballControls.rotateSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.rotateSpeed",
      },
      Object {
        "description": "Represents the properties of the screen. Automatically set when handleResize() is called.",
        "name": "screen",
        "title": "TrackballControls.screen: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.screen",
      },
      Object {
        "description": "Whether or not damping is disabled. Default is *false*.",
        "name": "staticMoving",
        "title": "TrackballControls.staticMoving: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.staticMoving",
      },
      Object {
        "description": "The zoom speed. Default is *1.2*.",
        "name": "zoomSpeed",
        "title": "TrackballControls.zoomSpeed: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.zoomSpeed",
      },
      Object {
        "description": "Ensures the controls stay in the range update().",
        "name": "checkDistances",
        "title": "TrackballControls.checkDistances (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.checkDistances",
      },
      Object {
        "description": "Should be called if the controls is no longer required.",
        "name": "dispose",
        "title": "TrackballControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.dispose",
      },
      Object {
        "description": "Should be called if the application window is resized.",
        "name": "handleResize",
        "title": "TrackballControls.handleResize (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.handleResize",
      },
      Object {
        "description": "Performs panning if necessary. Called by update().",
        "name": "panCamera",
        "title": "TrackballControls.panCamera (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.panCamera",
      },
      Object {
        "description": "Resets the controls to its initial state.",
        "name": "reset",
        "title": "TrackballControls.reset (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.reset",
      },
      Object {
        "description": "Rotates the camera if necessary. Called by update().",
        "name": "rotateCamera",
        "title": "TrackballControls.rotateCamera (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.rotateCamera",
      },
      Object {
        "description": "Updates the controls. Usually called in the animation loop.",
        "name": "update",
        "title": "TrackballControls.update (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.update",
      },
      Object {
        "description": "Performs zooming if necessary. Called by update().",
        "name": "zoomCamera",
        "title": "TrackballControls.zoomCamera (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls.zoomCamera",
      },
    ],
    "title": "TrackballControls( camera: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/TrackballControls",
  },
  Object {
    "description": "This class can be used to transform objects in 3D space by adapting a similar interaction model of DCC tools like Blender. Unlike other controls, it is not intended to transform the scene's camera.
 TransformControls expects that its attached 3D object is part of the scene graph.",
    "name": "TransformControls",
    "properties": Array [
      Object {
        "description": "The current transformation axis.",
        "name": "axis",
        "title": "TransformControls.axis: String",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.axis",
      },
      Object {
        "description": "The camera of the rendered scene.",
        "name": "camera",
        "title": "TransformControls.camera: Camera",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.camera",
      },
      Object {
        "description": "The HTMLDOMElement used to listen for mouse / touch events. This must be passed in the constructor; changing it here will not set up new event listeners.",
        "name": "domElement",
        "title": "TransformControls.domElement: HTMLDOMElement",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.domElement",
      },
      Object {
        "description": "Whether or not dragging is currently performed. Read-only property.",
        "name": "dragging",
        "title": "TransformControls.dragging: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.dragging",
      },
      Object {
        "description": "Whether or not the controls are enabled.",
        "name": "enabled",
        "title": "TransformControls.enabled: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.enabled",
      },
      Object {
        "description": "The current transformation mode. Possible values are \\"translate\\", \\"rotate\\" and \\"scale\\". Default is *translate*.",
        "name": "mode",
        "title": "TransformControls.mode: String",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.mode",
      },
      Object {
        "description": "The 3D object being controlled.",
        "name": "object",
        "title": "TransformControls.object: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.object",
      },
      Object {
        "description": "By default, 3D objects are continuously rotated. If you set this property to a numeric value (radians), you can define in which steps the 3D object should be rotated. Deault is *null*.",
        "name": "rotationSnap",
        "title": "TransformControls.rotationSnap: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.rotationSnap",
      },
      Object {
        "description": "Whether or not the x-axis helper should be visible. Default is *true*.",
        "name": "showX",
        "title": "TransformControls.showX: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.showX",
      },
      Object {
        "description": "Whether or not the y-axis helper should be visible. Default is *true*.",
        "name": "showY",
        "title": "TransformControls.showY: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.showY",
      },
      Object {
        "description": "Whether or not the z-axis helper should be visible. Default is *true*.",
        "name": "showZ",
        "title": "TransformControls.showZ: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.showZ",
      },
      Object {
        "description": "The size of the helper UI (axes/planes). Default is *1*.",
        "name": "size",
        "title": "TransformControls.size: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.size",
      },
      Object {
        "description": "Defines in which coordinate space transformations should be performed. Possible values are \\"world\\" and \\"local\\". Default is *world*.",
        "name": "space",
        "title": "TransformControls.space: String",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.space",
      },
      Object {
        "description": "By default, 3D objects are continuously translated. If you set this property to a numeric value (world units), you can define in which steps the 3D object should be translated. Deault is *null*.",
        "name": "translationSnap",
        "title": "TransformControls.translationSnap: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.translationSnap",
      },
      Object {
        "description": "",
        "name": "attach",
        "title": "TransformControls.attach ( object: Object3D ): TransformControls",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.attach",
      },
      Object {
        "description": "Removes the current 3D object from the controls and makes the helper UI is invisible.",
        "name": "detach",
        "title": "TransformControls.detach (): TransformControls",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.detach",
      },
      Object {
        "description": "Should be called if the controls is no longer required.",
        "name": "dispose",
        "title": "TransformControls.dispose (): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.dispose",
      },
      Object {
        "description": "Returns the transformation mode.",
        "name": "getMode",
        "title": "TransformControls.getMode (): String",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.getMode",
      },
      Object {
        "description": "",
        "name": "setMode",
        "title": "TransformControls.setMode ( mode: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.setMode",
      },
      Object {
        "description": "",
        "name": "setRotationSnap",
        "title": "TransformControls.setRotationSnap ( rotationSnap: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.setRotationSnap",
      },
      Object {
        "description": "",
        "name": "setSize",
        "title": "TransformControls.setSize ( size: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.setSize",
      },
      Object {
        "description": "",
        "name": "setSpace",
        "title": "TransformControls.setSpace ( space: String ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.setSpace",
      },
      Object {
        "description": "",
        "name": "setTranslationSnap",
        "title": "TransformControls.setTranslationSnap ( translationSnap: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/controls/TransformControls.setTranslationSnap",
      },
    ],
    "title": "TransformControls( camera: Camera, domElement: HTMLDOMElement )",
    "url": "https://threejs.org/docs/#examples/en/controls/TransformControls",
  },
  Object {
    "description": "ConvexGeometry can be used to generate a convex hull for a given array of 3D points. The average time complexity for this task is considered to be O(nlog(n)).",
    "name": "ConvexGeometry",
    "properties": Array [],
    "title": "ConvexGeometry( points: Array )",
    "url": "https://threejs.org/docs/#examples/en/geometries/ConvexGeometry",
  },
  Object {
    "description": "DecalGeometry can be used to create a decal mesh that serves different kinds of purposes e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.",
    "name": "DecalGeometry",
    "properties": Array [],
    "title": "DecalGeometry( mesh: Mesh, position: Vector3, orientation: Euler, size: Vector3 )",
    "url": "https://threejs.org/docs/#examples/en/geometries/DecalGeometry",
  },
  Object {
    "description": "Renders a sphere to visualize a light probe in the scene.",
    "name": "LightProbeHelper",
    "properties": Array [
      Object {
        "description": "The light probe.",
        "name": "lightProbe",
        "title": "LightProbeHelper.lightProbe: LightProbe",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/LightProbeHelper.lightProbe",
      },
      Object {
        "description": "The size of the helper sphere.",
        "name": "size",
        "title": "LightProbeHelper.size: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/LightProbeHelper.size",
      },
      Object {
        "description": "Frees internal resources.",
        "name": "dispose",
        "title": "LightProbeHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/helpers/LightProbeHelper.dispose",
      },
    ],
    "title": "LightProbeHelper( lightProbe: LightProbe, size: Number )",
    "url": "https://threejs.org/docs/#examples/en/helpers/LightProbeHelper",
  },
  Object {
    "description": "This helper displays the directional cone of a PositionalAudio.",
    "name": "PositionalAudioHelper",
    "properties": Array [
      Object {
        "description": "PositionalAudio to be visualized.",
        "name": "audio",
        "title": "PositionalAudioHelper.audio: PositionalAudio",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper.audio",
      },
      Object {
        "description": "The range of the directional cone.",
        "name": "range",
        "title": "PositionalAudioHelper.range: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper.range",
      },
      Object {
        "description": "The amount of divisions of the inner part of the directional cone.",
        "name": "divisionsInnerAngle",
        "title": "PositionalAudioHelper.divisionsInnerAngle: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper.divisionsInnerAngle",
      },
      Object {
        "description": "The amount of divisions of the outer part of the directional cone.",
        "name": "divisionsOuterAngle",
        "title": "PositionalAudioHelper.divisionsOuterAngle: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper.divisionsOuterAngle",
      },
      Object {
        "description": "Disposes of the helper.",
        "name": "dispose",
        "title": "PositionalAudioHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper.dispose",
      },
      Object {
        "description": "Updates the helper.",
        "name": "update",
        "title": "PositionalAudioHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper.update",
      },
    ],
    "title": "PositionalAudioHelper( audio: PositionalAudio, range: Number )",
    "url": "https://threejs.org/docs/#examples/en/helpers/PositionalAudioHelper",
  },
  Object {
    "description": "Creates a visual aid for a RectAreaLight.",
    "name": "RectAreaLightHelper",
    "properties": Array [
      Object {
        "description": "Reference to the RectAreaLight being visualized.",
        "name": "light",
        "title": "RectAreaLightHelper.light: RectAreaLight",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/RectAreaLightHelper.light",
      },
      Object {
        "description": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time update is called.",
        "name": "color",
        "title": "RectAreaLightHelper.color: hex",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/RectAreaLightHelper.color",
      },
      Object {
        "description": "Dispose of the rectAreaLightHelper.",
        "name": "dispose",
        "title": "RectAreaLightHelper.dispose(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/helpers/RectAreaLightHelper.dispose",
      },
    ],
    "title": "RectAreaLightHelper( light: RectAreaLight, color: Hex )",
    "url": "https://threejs.org/docs/#examples/en/helpers/RectAreaLightHelper",
  },
  Object {
    "description": "Renders arrows to visualize an object's vertex normal vectors. Requires that normals have been specified in a custom attribute or have been calculated using computeVertexNormals.",
    "name": "VertexNormalsHelper",
    "properties": Array [
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the object's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "VertexNormalsHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexNormalsHelper.matrixAutoUpdate",
      },
      Object {
        "description": "The object for which the vertex normals are being visualized.",
        "name": "object",
        "title": "VertexNormalsHelper.object: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexNormalsHelper.object",
      },
      Object {
        "description": "Length of the arrows. Default is *1*.",
        "name": "size",
        "title": "VertexNormalsHelper.size: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexNormalsHelper.size",
      },
      Object {
        "description": "Updates the vertex normal preview based on movement of the object.",
        "name": "update",
        "title": "VertexNormalsHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexNormalsHelper.update",
      },
    ],
    "title": "VertexNormalsHelper( object: Object3D, size: Number, color: Hex, linewidth: Number )",
    "url": "https://threejs.org/docs/#examples/en/helpers/VertexNormalsHelper",
  },
  Object {
    "description": "Renders arrows to visualize an object's vertex tangent vectors. Requires that tangents have been specified in a custom attribute or have been calculated using computeTangents.
 This helper supports BufferGeometry only.",
    "name": "VertexTangentsHelper",
    "properties": Array [
      Object {
        "description": "See Object3D.matrixAutoUpdate. Set to *false* here as the helper is using the object's matrixWorld.",
        "name": "matrixAutoUpdate",
        "title": "VertexTangentsHelper.matrixAutoUpdate: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexTangentsHelper.matrixAutoUpdate",
      },
      Object {
        "description": "The object for which the vertex tangents are being visualized.",
        "name": "object",
        "title": "VertexTangentsHelper.object: Object3D",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexTangentsHelper.object",
      },
      Object {
        "description": "Length of the arrows. Default is *1*.",
        "name": "size",
        "title": "VertexTangentsHelper.size: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexTangentsHelper.size",
      },
      Object {
        "description": "Updates the vertex tangents preview based on the object's world transform.",
        "name": "update",
        "title": "VertexTangentsHelper.update(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/helpers/VertexTangentsHelper.update",
      },
    ],
    "title": "VertexTangentsHelper( object: Object3D, size: Number, color: Hex, linewidth: Number )",
    "url": "https://threejs.org/docs/#examples/en/helpers/VertexTangentsHelper",
  },
  Object {
    "description": "Utility class for creating instances of LightProbe.",
    "name": "LightProbeGenerator",
    "properties": Array [
      Object {
        "description": "Creates a light probe from the given (radiance) environment map. The method expects that the environment map is represented as a cube texture.",
        "name": "fromCubeTexture",
        "title": "LightProbeGenerator.fromCubeTexture ( cubeTexture: CubeTexture ): LightProbe",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/lights/LightProbeGenerator.fromCubeTexture",
      },
      Object {
        "description": "Creates a light probe from the given (radiance) environment map. The method expects that the environment map is represented as a cube render target.",
        "name": "fromCubeRenderTarget",
        "title": "LightProbeGenerator.fromCubeRenderTarget ( renderer: WebGLRenderer, cubeRenderTarget: WebGLCubeRenderTarget ): LightProbe",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/lights/LightProbeGenerator.fromCubeRenderTarget",
      },
    ],
    "title": "LightProbeGenerator",
    "url": "https://threejs.org/docs/#examples/en/lights/LightProbeGenerator",
  },
  Object {
    "description": "A loader for Rhinoceros 3d files and objects. 
 Rhinoceros is a 3D modeler used to create, edit, analyze, document, render, animate, and translate NURBS curves, surfaces, breps, extrusions, point clouds, as well as polygon meshes and SubD objects. [rhino3dm.js](https://github.com/mcneel/rhino3dm) is compiled to WebAssembly from the open source geometry library [openNURBS](https://github.com/mcneel/opennurbs). The loader currently uses [rhino3dm.js 0.15.0-beta.](https://www.npmjs.com/package/rhino3dm/v/0.15.0-beta)",
    "name": "3DMLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.3dm* file.
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "3DMLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/3DMLoader.load",
      },
      Object {
        "description": "buffer â€” An ArrayBuffer representing the Rhino *File3dm* document.
 onLoad â€” A function to be called after the loading is successfully completed.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "parse",
        "title": "3DMLoader.parse( buffer: ArrayBuffer, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/3DMLoader.parse",
      },
      Object {
        "description": "value â€” Path to folder containing the JS and WASM libraries.",
        "name": "setLibraryPath",
        "title": "3DMLoader.setLibraryPath( value: String ): 3DMLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/3DMLoader.setLibraryPath",
      },
      Object {
        "description": "workerLimit - Maximum number of workers to be allocated. Default is 4.",
        "name": "setWorkerLimit",
        "title": "3DMLoader.setWorkerLimit( workerLimit: Number ): 3DMLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/3DMLoader.setWorkerLimit",
      },
      Object {
        "description": "Disposes of the loader resources and deallocates memory.",
        "name": "dispose",
        "title": "3DMLoader.dispose(): 3DMLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/3DMLoader.dispose",
      },
    ],
    "title": "Rhino3dmLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/3DMLoader",
  },
  Object {
    "description": "Loader for Basis Universal GPU Texture Codec.
 [Basis Universal](https://github.com/BinomialLLC/basis_universal/) is a \\"supercompressed\\" GPU texture and texture video compression system that outputs a highly compressed intermediate file format (.basis) that can be quickly transcoded to a wide variety of GPU texture compression formats.",
    "name": "BasisTextureLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.basis* file.
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "BasisTextureLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/BasisTextureLoader.load",
      },
      Object {
        "description": "renderer â€” A renderer instance.",
        "name": "detectSupport",
        "title": "BasisTextureLoader.detectSupport( renderer: WebGLRenderer ): BasisTextureLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/BasisTextureLoader.detectSupport",
      },
      Object {
        "description": "path â€” Path to folder containing the WASM transcoder and JS wrapper.",
        "name": "setTranscoderPath",
        "title": "BasisTextureLoader.setTranscoderPath( path: String ): BasisTextureLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/BasisTextureLoader.setTranscoderPath",
      },
      Object {
        "description": "limit â€” Maximum number of workers. Default is '4'.",
        "name": "setWorkerLimit",
        "title": "BasisTextureLoader.setWorkerLimit( limit: Number ): BasisTextureLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/BasisTextureLoader.setWorkerLimit",
      },
      Object {
        "description": "Disposes the loader object, de-allocating any Web Workers created.",
        "name": "dispose",
        "title": "BasisTextureLoader.dispose(): BasisTextureLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/BasisTextureLoader.dispose",
      },
    ],
    "title": "BasisTextureLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/BasisTextureLoader",
  },
  Object {
    "description": "A loader for geometry compressed with the Draco library. 
 [Draco](https://google.github.io/draco/) is an open source library for compressing and decompressing 3D meshes and point clouds. Compressed geometry can be significantly smaller, at the cost of additional decoding time on the client device.",
    "name": "DRACOLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.drc* file.
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "DRACOLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader.load",
      },
      Object {
        "description": "value â€” Path to folder containing the JS and WASM decoder libraries.",
        "name": "setDecoderPath",
        "title": "DRACOLoader.setDecoderPath( value: String ): DRACOLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader.setDecoderPath",
      },
      Object {
        "description": "config.type - (Optional) *\\"js\\"* or *\\"wasm\\"*.",
        "name": "setDecoderConfig",
        "title": "DRACOLoader.setDecoderConfig( config: Object ): DRACOLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader.setDecoderConfig",
      },
      Object {
        "description": "workerLimit - Maximum number of workers to be allocated. Default is 4.",
        "name": "setWorkerLimit",
        "title": "DRACOLoader.setWorkerLimit( workerLimit: Number ): DRACOLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader.setWorkerLimit",
      },
      Object {
        "description": "Requests the decoder libraries, if not already loaded.",
        "name": "preload",
        "title": "DRACOLoader.preload(): DRACOLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader.preload",
      },
      Object {
        "description": "Disposes of the decoder resources and deallocates memory. The decoder [cannot be reloaded afterward](https://github.com/google/draco/issues/349).",
        "name": "dispose",
        "title": "DRACOLoader.dispose(): DRACOLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader.dispose",
      },
    ],
    "title": "DRACOLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/DRACOLoader",
  },
  Object {
    "description": "A loader for *glTF 2.0* resources. 
 [glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an [open format specification](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0) for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.",
    "name": "GLTFLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.gltf* or *.glb* file.
 onLoad â€” A function to be called after the loading is successfully completed. The function receives the loaded JSON response returned from parse.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "GLTFLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/GLTFLoader.load",
      },
      Object {
        "description": "dracoLoader â€” Instance of THREE.DRACOLoader, to be used for decoding assets compressed with the KHR_draco_mesh_compression extension.",
        "name": "setDRACOLoader",
        "title": "GLTFLoader.setDRACOLoader( dracoLoader: DRACOLoader ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/GLTFLoader.setDRACOLoader",
      },
      Object {
        "description": "ktx2Loader â€” Instance of THREE.KTX2Loader, to be used for loading KTX2 compressed textures.",
        "name": "setKTX2Loader",
        "title": "GLTFLoader.setKTX2Loader( ktx2Loader: KTX2Loader ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/GLTFLoader.setKTX2Loader",
      },
      Object {
        "description": "data â€” glTF asset to parse, as an ArrayBuffer or *JSON* string.
 path â€” The base path from which to find subsequent glTF resources such as textures and .bin data files.
 onLoad â€” A function to be called when parse completes.
 onError â€” (optional) A function to be called if an error occurs during parsing. The function receives error as an argument.",
        "name": "parse",
        "title": "GLTFLoader.parse( data: ArrayBuffer, path: String, onLoad: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/GLTFLoader.parse",
      },
    ],
    "title": "GLTFLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/GLTFLoader",
  },
  Object {
    "description": "Loader for KTX 2.0 GPU Texture containers.
 [KTX 2.0](http://github.khronos.org/KTX-Specification/) is a container format for various GPU texture formats. The loader supports Basis Universal GPU textures, which can be quickly transcoded to a wide variety of GPU texture compression formats. While KTX 2.0 also allows other hardware-specific formats, this loader does not yet parse them.",
    "name": "KTX2Loader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.basis* file.
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "KTX2Loader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/KTX2Loader.load",
      },
      Object {
        "description": "renderer â€” A renderer instance.",
        "name": "detectSupport",
        "title": "KTX2Loader.detectSupport( renderer: WebGLRenderer ): KTX2Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/KTX2Loader.detectSupport",
      },
      Object {
        "description": "path â€” Path to folder containing the WASM transcoder and JS wrapper.",
        "name": "setTranscoderPath",
        "title": "KTX2Loader.setTranscoderPath( path: String ): KTX2Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/KTX2Loader.setTranscoderPath",
      },
      Object {
        "description": "limit â€” Maximum number of workers. Default is '4'.",
        "name": "setWorkerLimit",
        "title": "KTX2Loader.setWorkerLimit( limit: Number ): KTX2Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/KTX2Loader.setWorkerLimit",
      },
      Object {
        "description": "Disposes the loader object, de-allocating any Web Workers created.",
        "name": "dispose",
        "title": "KTX2Loader.dispose(): KTX2Loader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/KTX2Loader.dispose",
      },
    ],
    "title": "KTX2Loader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/KTX2Loader",
  },
  Object {
    "description": "A loader for [*MMD*](https://sites.google.com/view/evpvp/) resources. 
 MMDLoader creates Three.js Objects from MMD resources as PMD, PMX, VMD, and VPD files. See MMDAnimationHelper for MMD animation handling as IK, Grant, and Physics.
 If you want raw content of MMD resources, use .loadPMD/PMX/VMD/VPD methods.",
    "name": "MMDLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.pmd* or *.pmx* file.
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "MMDLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MMDLoader.load",
      },
      Object {
        "description": "url â€” A string or an array of string containing the path/URL of the *.vmd* file(s).If two or more files are specified, they'll be merged.
 object â€” SkinnedMesh or Camera. Clip and its tracks will be fitting to this object.
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "loadAnimation",
        "title": "MMDLoader.loadAnimation( url: String, object: Object3D, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MMDLoader.loadAnimation",
      },
      Object {
        "description": "modelUrl â€” A string containing the path/URL of the *.pmd* or *.pmx* file.
 vmdUrl â€” A string or an array of string containing the path/URL of the *.vmd* file(s).
 onLoad â€” A function to be called after the loading is successfully completed.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "loadWithAnimation",
        "title": "MMDLoader.loadWithAnimation( modelUrl: String, vmdUrl: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MMDLoader.loadWithAnimation",
      },
      Object {
        "description": "animationPath â€” Base path for loading animation data (VMD/VPD files).",
        "name": "setAnimationPath",
        "title": "MMDLoader.setAnimationPath( animationPath: String ): MMDLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MMDLoader.setAnimationPath",
      },
    ],
    "title": "MMDLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/MMDLoader",
  },
  Object {
    "description": "A loader for loading an *.mtl* resource, used internally by OBJLoader.
 The Material Template Library format (MTL) or .MTL File Format is a companion file format to .OBJ that describes surface shading (material) properties of objects within one or more .OBJ files.",
    "name": "MTLLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.mtl* file.
 onLoad â€” (optional) A function to be called after the loading is successfully completed. The function receives the loaded MTLLoader.MaterialCreator instance.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.",
        "name": "load",
        "title": "MTLLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MTLLoader.load",
      },
      Object {
        "description": "options â€” required",
        "name": "setMaterialOptions",
        "title": "MTLLoader.setMaterialOptions( options: Object ): MTLLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MTLLoader.setMaterialOptions",
      },
      Object {
        "description": "text â€” The textual *mtl* structure to parse. path â€” The path to the MTL file.",
        "name": "parse",
        "title": "MTLLoader.parse( text, param:String path: String ): MTLLoaderMaterialCreator",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/MTLLoader.parse",
      },
    ],
    "title": "MTLLoader( loadingManager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/MTLLoader",
  },
  Object {
    "description": "A loader for loading a *.obj* resource.
 The [OBJ file format](https://en.wikipedia.org/wiki/Wavefront_.obj_file) is a simple data-format that represents 3D geometry in a human readable format as the position of each vertex, the UV position of each texture coordinate vertex, vertex normals, and the faces that make each polygon defined as a list of vertices, and texture vertices.",
    "name": "OBJLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.obj* file.
 onLoad â€” (optional) A function to be called after the loading is successfully completed. The function receives the loaded Object3D as an argument.
 onProgress â€” (optional) A function to be called while the loading is in progress. The function receives a XMLHttpRequest instance, which contains total and loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "OBJLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/OBJLoader.load",
      },
      Object {
        "description": "text â€” The textual *obj* structure to parse.",
        "name": "parse",
        "title": "OBJLoader.parse( text: String ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/OBJLoader.parse",
      },
      Object {
        "description": "MTLLoader.MaterialCreator materials - A MaterialCreator instance.",
        "name": "setMaterials",
        "title": "OBJLoader.setMaterials( materials: MTLLoader.MaterialCreator ): OBJLoader",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/OBJLoader.setMaterials",
      },
    ],
    "title": "OBJLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/OBJLoader",
  },
  Object {
    "description": "A loader for loading a *.pcd* resource. 
 Point Cloud Data is a file format for [Point Cloud Library](https://en.wikipedia.org/wiki/Point_Cloud_Library). 
 Loader support ascii and (compressed) binary.",
    "name": "PCDLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.pcd* file.
 onLoad â€” (optional) A function to be called after loading is successfully completed. The function receives loaded Object3D as an argument.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.",
        "name": "load",
        "title": "PCDLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/PCDLoader.load",
      },
      Object {
        "description": "data â€” The binary structure to parse.",
        "name": "parse",
        "title": "PCDLoader.parse( data: Arraybuffer,url: String ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/PCDLoader.parse",
      },
    ],
    "title": "PCDLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/PCDLoader",
  },
  Object {
    "description": "A loader for loading a *.pdb* resource.
 The [Protein Data Bank](http://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)) file format is a textual file describing the three-dimensional structures of molecules.",
    "name": "PDBLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.pdb* file.
 onLoad â€” (optional) A function to be called after loading is successfully completed. The function receives the object having the following properties. geometryAtoms, geometryBonds and the JSON structure.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.",
        "name": "load",
        "title": "PDBLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/PDBLoader.load",
      },
      Object {
        "description": "text â€” The textual *pdb* structure to parse.",
        "name": "parse",
        "title": "PDBLoader.parse( text: String ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/PDBLoader.parse",
      },
    ],
    "title": "PDBLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/PDBLoader",
  },
  Object {
    "description": "A loader for loading a *.prwm* resource.
 Packed Raw WebGL Model is an open-source binary file format for nD geometries specifically designed for JavaScript and WebGL with a strong focus on fast parsing (from 1ms to 0.1ms in Chrome 59 on a MBP Late 2013). The parsing of PRWM file is especially fast when the endianness of the file is the same as the endianness of the client platform. More information on this [here](https://github.com/kchapelier/PRWM).",
    "name": "PRWMLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.prwm* file. Any *** character in the URL will be automatically replaced by *le* or *be* depending on the platform endianness.
 onLoad â€” (optional) A function to be called after the loading is successfully completed. The function receives the loaded BufferGeometry as an argument.
 onProgress â€” (optional) A function to be called while the loading is in progress. The function receives a XMLHttpRequest instance, which contains total and loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives error as an argument.",
        "name": "load",
        "title": "PRWMLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/PRWMLoader.load",
      },
      Object {
        "description": "arrayBuffer â€” ArrayBuffer containing the *prwm* data.",
        "name": "parse",
        "title": "PRWMLoader.parse( arrayBuffer: ArrayBuffer ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/PRWMLoader.parse",
      },
    ],
    "title": "PRWMLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/PRWMLoader",
  },
  Object {
    "description": "A loader for loading a *.svg* resource.
 [Scalable Vector Graphics](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) is an XML-based vector image format for two-dimensional graphics with support for interactivity and animation.",
    "name": "SVGLoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.svg* file.
 onLoad â€” (optional) A function to be called after loading is successfully completed. The function receives an array of ShapePath as an argument.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains total and loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.",
        "name": "load",
        "title": "SVGLoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/SVGLoader.load",
      },
      Object {
        "description": "shape â€” A ShapePath from the array of ShapePath, given as argument in the onLoad function for the load function of SVGLoader.",
        "name": "createShapes",
        "title": "SVGLoader.createShapes( shape: ShapePath ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/SVGLoader.createShapes",
      },
    ],
    "title": "SVGLoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/SVGLoader",
  },
  Object {
    "description": "A loader for loading a *.tga* resource. 
 [TGA](https://en.wikipedia.org/wiki/Truevision_TGA) is a raster graphics, image file format.",
    "name": "TGALoader",
    "properties": Array [
      Object {
        "description": "url â€” A string containing the path/URL of the *.tga* file. 
 onLoad â€” (optional) A function to be called after loading is successfully completed. The function receives loaded DataTexture as an argument.
 onProgress â€” (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, which contains .total and .loaded bytes.
 onError â€” (optional) A function to be called if an error occurs during loading. The function receives the error as an argument.",
        "name": "load",
        "title": "TGALoader.load( url: String, onLoad: Function, onProgress: Function, onError: Function ): DataTexture",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/loaders/TGALoader.load",
      },
    ],
    "title": "TGALoader( manager: LoadingManager )",
    "url": "https://threejs.org/docs/#examples/en/loaders/TGALoader",
  },
  Object {
    "description": "Creates a simulated lens flare that tracks a light.",
    "name": "Lensflare",
    "properties": Array [],
    "title": "LensflareElement( texture: Texture, size: Float, distance: Float, color: Color )",
    "url": "https://threejs.org/docs/#examples/en/objects/Lensflare",
  },
  Object {
    "description": "Used to implement post-processing effects in three.js. The class manages a chain of post-processing passes to produce the final visual result. Post-processing passes are executed in order of their addition/insertion. The last pass is automatically rendered to screen.",
    "name": "EffectComposer",
    "properties": Array [
      Object {
        "description": "An array representing the (ordered) chain of post-processing passes.",
        "name": "passes",
        "title": "EffectComposer.passes: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.passes",
      },
      Object {
        "description": "A reference to the internal read buffer. Passes usually read the previous render result from this buffer.",
        "name": "readBuffer",
        "title": "EffectComposer.readBuffer: WebGLRendererTarget",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.readBuffer",
      },
      Object {
        "description": "A reference to the internal renderer.",
        "name": "renderer",
        "title": "EffectComposer.renderer: WebGLRenderer",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.renderer",
      },
      Object {
        "description": "Whether the final pass is rendered to the screen (default framebuffer) or not.",
        "name": "renderToScreen",
        "title": "EffectComposer.renderToScreen: Boolean",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.renderToScreen",
      },
      Object {
        "description": "A reference to the internal write buffer. Passes usually write their result into this buffer.",
        "name": "writeBuffer",
        "title": "EffectComposer.writeBuffer: WebGLRendererTarget",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.writeBuffer",
      },
      Object {
        "description": "pass â€” The pass to add to the pass chain.
 Adds the given pass to the pass chain.",
        "name": "addPass",
        "title": "EffectComposer.addPass( pass: Pass ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.addPass",
      },
      Object {
        "description": "pass â€” The pass to insert into the pass chain.
 index â€” Defines the position in the pass chain where the pass should be inserted.
 Inserts the given pass into the pass chain at the given index.",
        "name": "insertPass",
        "title": "EffectComposer.insertPass( pass: Pass, index: Integer ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.insertPass",
      },
      Object {
        "description": "passIndex â€” The pass to check.
 Returns true if the pass for the given index is the last enabled pass in the pass chain. Used by EffectComposer to determine when a pass should be rendered to screen.",
        "name": "isLastEnabledPass",
        "title": "EffectComposer.isLastEnabledPass( passIndex: Integer ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.isLastEnabledPass",
      },
      Object {
        "description": "pass â€” The pass to remove from the pass chain.
 Removes the given pass from the pass chain.",
        "name": "removePass",
        "title": "EffectComposer.removePass( pass: Pass ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.removePass",
      },
      Object {
        "description": "deltaTime â€” The delta time value.
 Executes all enabled post-processing passes in order to produce the final frame.",
        "name": "render",
        "title": "EffectComposer.render( deltaTime: Float ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.render",
      },
      Object {
        "description": "renderTarget â€” (optional) A preconfigured render target internally used by EffectComposer..
 Resets the internal state of the EffectComposer.",
        "name": "reset",
        "title": "EffectComposer.reset( renderTarget: WebGLRenderTarget ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.reset",
      },
      Object {
        "description": "pixelRatio â€” The device pixel ratio.
 Sets device pixel ratio. This is usually used for HiDPI device to prevent blurring output. Thus, the semantic of the method is similar to WebGLRenderer.setPixelRatio().",
        "name": "setPixelRatio",
        "title": "EffectComposer.setPixelRatio( pixelRatio: Float ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.setPixelRatio",
      },
      Object {
        "description": "width â€” The width of the EffectComposer.
 height â€” The height of the EffectComposer.
 Resizes the internal render buffers and passes to (width, height) with device pixel ratio taken into account. Thus, the semantic of the method is similar to WebGLRenderer.setSize().",
        "name": "setSize",
        "title": "EffectComposer.setSize( width: Integer, height: Integer ): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.setSize",
      },
      Object {
        "description": "Swaps the internal read/write buffers.",
        "name": "swapBuffers",
        "title": "EffectComposer.swapBuffers(): void",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer.swapBuffers",
      },
    ],
    "title": "EffectComposer( renderer: WebGLRenderer, renderTarget: WebGLRenderTarget )",
    "url": "https://threejs.org/docs/#examples/en/postprocessing/EffectComposer",
  },
  Object {
    "description": "An exporter for *glTF* 2.0. 
 [glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an [open format specification](https://github.com/KhronosGroup/glTF/tree/master/specification/2.0) for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.",
    "name": "GLTFExporter",
    "properties": Array [
      Object {
        "description": "input â€” Scenes or objects to export. Valid options:",
        "name": "parse",
        "title": "GLTFExporter.parse( input: Object3D, onCompleted: Function, options: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/exporters/GLTFExporter.parse",
      },
    ],
    "title": "GLTFExporter()",
    "url": "https://threejs.org/docs/#examples/en/exporters/GLTFExporter",
  },
  Object {
    "description": "An exporter for *PLY*. 
 [PLY](https://en.wikipedia.org/wiki/PLY_(file_format)) (Polygon or Stanford Triangle Format) is a file format for efficient delivery and loading of simple, static 3D content in a dense format. Both binary and ascii formats are supported. PLY can store vertex positions, colors, normals and uv coordinates. No textures or texture references are saved.",
    "name": "PLYExporter",
    "properties": Array [
      Object {
        "description": "input â€” Object3D
 onCompleted â€” Will be called when the export completes. The argument will be the generated ply ascii or binary ArrayBuffer.
 options â€” Export options",
        "name": "parse",
        "title": "PLYExporter.parse( input: Object3D, onDone: Function, options: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/exporters/PLYExporter.parse",
      },
    ],
    "title": "PLYExporter()",
    "url": "https://threejs.org/docs/#examples/en/exporters/PLYExporter",
  },
  Object {
    "description": "An exporter for *Collada*. 
 [Collada](https://www.khronos.org/collada/) is a file format for robust representation of scenes, materials, animations, and other 3D content in an xml format. This exporter only supports exporting geometry, materials, textures, and scene hierarchy.",
    "name": "ColladaExporter",
    "properties": Array [
      Object {
        "description": "input â€” Object3D to be exported
 onCompleted â€” Will be called when the export completes. Optional. The same data is immediately returned from the function.
 options â€” Export options",
        "name": "parse",
        "title": "ColladaExporter.parse( input: Object3D, onCompleted: Function, options: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/exporters/ColladaExporter.parse",
      },
    ],
    "title": "ColladaExporter()",
    "url": "https://threejs.org/docs/#examples/en/exporters/ColladaExporter",
  },
  Object {
    "description": "Represents a lookup table for colormaps. It is used to determine the color values from a range of data values.",
    "name": "LookupTable",
    "properties": Array [
      Object {
        "description": "The minimum value to be represented with the lookup table. Default is 0.",
        "name": "minV",
        "title": "LookupTable.minV: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.minV",
      },
      Object {
        "description": "The maximum value to be represented with the lookup table. Default is 1.",
        "name": "maxV",
        "title": "LookupTable.maxV: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.maxV",
      },
      Object {
        "description": "color â€” Lut to copy.",
        "name": "copy",
        "title": "LookupTable.copy( lut: Lut ) this: Lut: null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.copy",
      },
      Object {
        "description": "minV â€” The minimum value to be represented with the lookup table.",
        "name": "setMin",
        "title": "LookupTable.setMin( minV: Float ): Lut",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.setMin",
      },
      Object {
        "description": "maxV â€” The maximum value to be represented with the lookup table.",
        "name": "setMax",
        "title": "LookupTable.setMax( maxV: Float ): Lut",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.setMax",
      },
      Object {
        "description": "numberOfColors â€” The number of colors to be used to represent the data array.",
        "name": "changeNumberOfColors",
        "title": "LookupTable.changeNumberOfColors( numberOfColors: Float ): Lut",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.changeNumberOfColors",
      },
      Object {
        "description": "colorMap â€” The name of the color map to be used to represent the data array.",
        "name": "changeColorMap",
        "title": "LookupTable.changeColorMap( colorMap: Float ): Lut",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.changeColorMap",
      },
      Object {
        "description": "Insert a new color map into the set of available color maps.",
        "name": "addColorMap",
        "title": "LookupTable.addColorMap( colorMapName, arrayOfColors ): Lut",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.addColorMap",
      },
      Object {
        "description": "value â€” the data value to be displayed as a color.",
        "name": "getColor",
        "title": "LookupTable.getColor( value ) this: Lut: Lut",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/Lut.getColor",
      },
    ],
    "title": "LookupTable( colormap, numberOfColors )",
    "url": "https://threejs.org/docs/#examples/en/math/Lut",
  },
  Object {
    "description": "Utility class for sampling weighted random points on the surface of a mesh.",
    "name": "MeshSurfaceSampler",
    "properties": Array [
      Object {
        "description": "Specifies a vertex attribute to be used as a weight when sampling from the surface. Faces with higher weights are more likely to be sampled, and those with weights of zero will not be sampled at all. For vector attributes, only *.x* is used in sampling.",
        "name": "setWeightAttribute",
        "title": "MeshSurfaceSampler.setWeightAttribute( name: String ): MeshSurfaceSampler",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/MeshSurfaceSampler.setWeightAttribute",
      },
      Object {
        "description": "Processes the input geometry and prepares to return samples. Any configuration of the geometry or sampler must occur before this method is called. Time complexity is *O(n)* for a surface with *n* faces.",
        "name": "build",
        "title": "MeshSurfaceSampler.build(): MeshSurfaceSampler",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/MeshSurfaceSampler.build",
      },
      Object {
        "description": "Selects a random point on the surface of the input geometry, returning the position and optionally the normal vector and color at that point. Time complexity is *O(log n)* for a surface with *n* faces.",
        "name": "sample",
        "title": "MeshSurfaceSampler.sample( targetPosition: Vector3, targetNormal: Vector3, targetColor: Color ): MeshSurfaceSampler",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/MeshSurfaceSampler.sample",
      },
    ],
    "title": "MeshSurfaceSampler( mesh: Mesh )",
    "url": "https://threejs.org/docs/#examples/en/math/MeshSurfaceSampler",
  },
  Object {
    "description": "Represents an oriented bounding box (OBB) in 3D space.",
    "name": "OBB",
    "properties": Array [
      Object {
        "description": "The center of the OBB. Default is *( 0, 0, 0 )*.",
        "name": "center",
        "title": "OBB.center: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.center",
      },
      Object {
        "description": "Positive halfwidth extents of the OBB along each axis. Default is *( 0, 0, 0 )*.",
        "name": "halfSize",
        "title": "OBB.halfSize: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.halfSize",
      },
      Object {
        "description": "The rotation of the OBB. Default is the identity matrix.",
        "name": "rotation",
        "title": "OBB.rotation: Matrix3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.rotation",
      },
      Object {
        "description": "matrix â€” A 4x4 transformation matrix.",
        "name": "applyMatrix4",
        "title": "OBB.applyMatrix4( matrix: Matrix4 ): OBB",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.applyMatrix4",
      },
      Object {
        "description": "point â€” The point that should be clamped within the bounds of this OBB.
 clampedPoint â€” The result will be copied into this vector.",
        "name": "clampPoint",
        "title": "OBB.clampPoint( point: Vector3, clampedPoint: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.clampPoint",
      },
      Object {
        "description": "Creates a cloned OBB for this instance.",
        "name": "clone",
        "title": "OBB.clone(): OBB",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.clone",
      },
      Object {
        "description": "point â€” The point to test.",
        "name": "containsPoint",
        "title": "OBB.containsPoint( point: Vector3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.containsPoint",
      },
      Object {
        "description": "obb â€” The OBB to copy.",
        "name": "copy",
        "title": "OBB.copy( obb: OBB ): OBB",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.copy",
      },
      Object {
        "description": "obb â€” The OBB to test.",
        "name": "equals",
        "title": "OBB.equals( obb: OBB ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.equals",
      },
      Object {
        "description": "box3 â€” An AABB.",
        "name": "fromBox3",
        "title": "OBB.fromBox3( box3: Box3 ): OBB",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.fromBox3",
      },
      Object {
        "description": "size â€” The result will be copied into this vector.",
        "name": "getSize",
        "title": "OBB.getSize( size: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.getSize",
      },
      Object {
        "description": "box3 â€” The AABB to test.",
        "name": "intersectsBox3",
        "title": "OBB.intersectsBox3( box3: Box3 ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.intersectsBox3",
      },
      Object {
        "description": "sphere â€” The bounding sphere to test.",
        "name": "intersectsSphere",
        "title": "OBB.intersectsSphere( sphere: Sphere ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.intersectsSphere",
      },
      Object {
        "description": "obb â€” The OBB to test.
 epsilon â€” An optional numeric value to counteract arithmetic errors. Default is *Number.EPSILON*.",
        "name": "intersectsOBB",
        "title": "OBB.intersectsOBB( obb: OBB, epsilon: Number ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.intersectsOBB",
      },
      Object {
        "description": "ray â€” The ray to test.",
        "name": "intersectsRay",
        "title": "OBB.intersectsRay( ray: Ray ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.intersectsRay",
      },
      Object {
        "description": "ray â€” The ray to test.
 intersectionPoint â€” The result will be copied into this vector.",
        "name": "intersectRay",
        "title": "OBB.intersectRay( ray: Ray, intersectionPoint: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.intersectRay",
      },
      Object {
        "description": "center â€” The center of the OBB.
 halfSize â€” Positive halfwidth extents of the OBB along each axis.
 rotation â€” The rotation of the OBB.",
        "name": "set",
        "title": "OBB.set( center: Vector3, halfSize: Vector3, rotation: Matrix3 ): OBB",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/OBB.set",
      },
    ],
    "title": "OBB( center: Vector3, halfSize: Vector3, rotation: Matrix3 )",
    "url": "https://threejs.org/docs/#examples/en/math/OBB",
  },
  Object {
    "description": "Represents a section bounded by a specific amount of half-edges. The current implementation assumes that a face always consist of three edges.",
    "name": "Face",
    "properties": Array [
      Object {
        "description": "The normal vector of the face. Default is a Vector3 at (0, 0, 0).",
        "name": "normal",
        "title": "Face.normal: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.normal",
      },
      Object {
        "description": "The midpoint or centroid of the face. Default is a Vector3 at (0, 0, 0).",
        "name": "midpoint",
        "title": "Face.midpoint: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.midpoint",
      },
      Object {
        "description": "The area of the face. Default is 0.",
        "name": "area",
        "title": "Face.area: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.area",
      },
      Object {
        "description": "Signed distance from face to the origin. Default is 0.",
        "name": "constant",
        "title": "Face.constant: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.constant",
      },
      Object {
        "description": "Reference to a vertex in a vertex list this face can see. Default is null.",
        "name": "outside",
        "title": "Face.outside: VertexNode",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.outside",
      },
      Object {
        "description": "Marks if a face is visible or deleted. Default is 'Visible'.",
        "name": "mark",
        "title": "Face.mark: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.mark",
      },
      Object {
        "description": "Reference to the base edge of a face. To retrieve all edges, you can use the 'next' reference of the current edge. Default is null.",
        "name": "edge",
        "title": "Face.edge: HalfEdge",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.edge",
      },
      Object {
        "description": "a - First vertex of the face.
 b - Second vertex of the face.
 c - Third vertex of the face.
 Creates a face.",
        "name": "create",
        "title": "Face.create( a: VertexNode, b: VertexNode, c: VertexNode ): Face",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.create",
      },
      Object {
        "description": "i - The index of the edge.
 Returns an edge by the given index.",
        "name": "getEdge",
        "title": "Face.getEdge( i: Integer ): HalfEdge",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.getEdge",
      },
      Object {
        "description": "Computes all properties of the face.",
        "name": "compute",
        "title": "Face.compute (): Face",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.compute",
      },
      Object {
        "description": "point - Any point in 3D space.
 Returns the signed distance from a given point to the plane representation of this face.",
        "name": "distanceToPoint",
        "title": "Face.distanceToPoint( point: Vector3 ): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face.distanceToPoint",
      },
    ],
    "title": "Face()",
    "url": "https://threejs.org/docs/#examples/en/math/convexhull/Face",
  },
  Object {
    "description": "The basis for a half-edge data structure, also known as doubly connected edge list (DCEL).",
    "name": "HalfEdge",
    "properties": Array [
      Object {
        "description": "Reference to the destination vertex. The origin vertex can be obtained by querying the destination of its twin, or of the previous half-edge. Default is undefined.",
        "name": "vertex",
        "title": "HalfEdge.vertex: VertexNode",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.vertex",
      },
      Object {
        "description": "Reference to the previous half-edge of the same face. Default is null.",
        "name": "prev",
        "title": "HalfEdge.prev: HalfEdge",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.prev",
      },
      Object {
        "description": "Reference to the next half-edge of the same face. Default is null.",
        "name": "next",
        "title": "HalfEdge.next: HalfEdge",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.next",
      },
      Object {
        "description": "Reference to the twin half-edge to reach the opposite face. Default is null.",
        "name": "twin",
        "title": "HalfEdge.twin: HalfEdge",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.twin",
      },
      Object {
        "description": "Each half-edge bounds a single face and thus has a reference to that face. Default is undefined.",
        "name": "face",
        "title": "HalfEdge.face: Face",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.face",
      },
      Object {
        "description": "Returns the destination vertex.",
        "name": "head",
        "title": "HalfEdge.head(): VertexNode",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.head",
      },
      Object {
        "description": "Returns the origin vertex.",
        "name": "tail",
        "title": "HalfEdge.tail(): VertexNode",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.tail",
      },
      Object {
        "description": "Returns the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) of the edge.",
        "name": "length",
        "title": "HalfEdge.length(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.length",
      },
      Object {
        "description": "Returns the square of the [Euclidean length](https://en.wikipedia.org/wiki/Euclidean_distance) (straight-line length) of the edge.",
        "name": "lengthSquared",
        "title": "HalfEdge.lengthSquared(): Float",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.lengthSquared",
      },
      Object {
        "description": "edge - Any half-edge.
 Sets the twin edge of this half-edge. It also ensures that the twin reference of the given half-edge is correctly set.",
        "name": "setTwin",
        "title": "HalfEdge.setTwin( edge: HalfEdge ): HalfEdge",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge.setTwin",
      },
    ],
    "title": "HalfEdge( vertex: VertexNode, face: Face )",
    "url": "https://threejs.org/docs/#examples/en/math/convexhull/HalfEdge",
  },
  Object {
    "description": "A convex hull class. Implements the Quickhull algorithm by: Dirk Gregorius. March 2014, Game Developers Conference: [Implementing QuickHull](http://media.steampowered.com/apps/valve/2014/DirkGregorius_ImplementingQuickHull.pdf).",
    "name": "ConvexHull",
    "properties": Array [
      Object {
        "description": "This vertex list holds all vertices that are assigned to a face. Default is an empty vertex list.",
        "name": "assigned",
        "title": "ConvexHull.assigned: VertexList",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.assigned",
      },
      Object {
        "description": "The generated faces of the convex hull. Default is an empty array.",
        "name": "faces",
        "title": "ConvexHull.faces: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.faces",
      },
      Object {
        "description": "This array holds the faces that are generated within a single iteration. Default is an empty array.",
        "name": "newFaces",
        "title": "ConvexHull.newFaces: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.newFaces",
      },
      Object {
        "description": "The epsilon value that is used for internal comparative operations. The calculation of this value depends on the size of the geometry. Default is -1.",
        "name": "tolerance",
        "title": "ConvexHull.tolerance: Float",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.tolerance",
      },
      Object {
        "description": "This vertex list holds all vertices that are not assigned to a face. Default is an empty vertex list.",
        "name": "unassigned",
        "title": "ConvexHull.unassigned: VertexList",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.unassigned",
      },
      Object {
        "description": "The internal representation of the given geometry data (an array of vertices).",
        "name": "vertices",
        "title": "ConvexHull.vertices: Array",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.vertices",
      },
      Object {
        "description": "eyeVertex - The vertex that is added to the hull.
 horizonEdge - A single edge of the horizon.
 Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order. All the half edges are created in CCW order thus the face is always pointing outside the hull",
        "name": "addAdjoiningFace",
        "title": "ConvexHull.addAdjoiningFace( eyeVertex: VertexNode, horizonEdge: HalfEdge ): HalfEdge",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.addAdjoiningFace",
      },
      Object {
        "description": "eyeVertex - The vertex that is added to the hull.
 horizon - An array of half-edges that form the horizon.
 Adds 'horizon.length' faces to the hull, each face will be linked with the horizon opposite face and the face on the left/right.",
        "name": "addNewFaces",
        "title": "ConvexHull.addNewFaces( eyeVertex: VertexNode, horizonEdge: HalfEdge ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.addNewFaces",
      },
      Object {
        "description": "vertex - The vertex to add.
 face - The target face.
 Adds a vertex to the 'assigned' list of vertices and assigns it to the given face.",
        "name": "addVertexToFace",
        "title": "ConvexHull.addVertexToFace( vertex: VertexNode, face: Face ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.addVertexToFace",
      },
      Object {
        "description": "eyeVertex - The vertex that is added to the hull.
 Adds a vertex to the hull with the following algorithm",
        "name": "addVertexToHull",
        "title": "ConvexHull.addVertexToHull( eyeVertex: VertexNode ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.addVertexToHull",
      },
      Object {
        "description": "Cleans up internal properties after computing the convex hull.",
        "name": "cleanup",
        "title": "ConvexHull.cleanup(): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.cleanup",
      },
      Object {
        "description": "Starts the execution of the quick hull algorithm.",
        "name": "compute",
        "title": "ConvexHull.compute(): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.compute",
      },
      Object {
        "description": "Computes the extremes values (min/max vectors) which will be used to compute the initial hull.",
        "name": "computeExtremes",
        "title": "ConvexHull.computeExtremes(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.computeExtremes",
      },
      Object {
        "description": "eyePoint - The 3D-coordinates of a point.
 crossEdge - The edge used to jump to the current face.
 face - The current face being tested.
 horizon - The edges that form part of the horizon in CCW order.
 Computes a chain of half edges in CCW order called the 'horizon'. For an edge to be part of the horizon it must join a face that can see 'eyePoint' and a face that cannot see 'eyePoint'.",
        "name": "computeHorizon",
        "title": "ConvexHull.computeHorizon( eyePoint: Vector3, crossEdge: HalfEdge, face: Face, horizon: Array ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.computeHorizon",
      },
      Object {
        "description": "Computes the initial simplex assigning to its faces all the points that are candidates to form part of the hull.",
        "name": "computeInitialHull",
        "title": "ConvexHull.computeInitialHull(): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.computeInitialHull",
      },
      Object {
        "description": "point - A point in 3D space.
 Returns *true* if the given point is inside this convex hull.",
        "name": "containsPoint",
        "title": "ConvexHull.containsPoint( point: Vector3 ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.containsPoint",
      },
      Object {
        "description": "face - The given face.
 absorbingFace - An optional face that tries to absorb the vertices of the first face.
 Removes all the visible vertices that 'face' is able to see.",
        "name": "deleteFaceVertices",
        "title": "ConvexHull.deleteFaceVertices( face: Face, absorbingFace: Face ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.deleteFaceVertices",
      },
      Object {
        "description": "ray - The given ray.
 target - The target vector representing the intersection point.
 Performs a ray intersection test with this convext hull. If no intersection is found, *null* is returned.",
        "name": "intersectRay",
        "title": "ConvexHull.intersectRay( ray: Ray, target: Vector3 ): Vector3",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.intersectRay",
      },
      Object {
        "description": "ray - The given ray.
 Returns *true* if the given ray intersects with this convex hull.",
        "name": "intersectsRay",
        "title": "ConvexHull.intersectsRay( ray: Ray ): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.intersectsRay",
      },
      Object {
        "description": "Makes this convex hull empty.",
        "name": "makeEmpty",
        "title": "ConvexHull.makeEmpty(): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.makeEmpty",
      },
      Object {
        "description": "Finds the next vertex to create faces with the current hull.",
        "name": "nextVertexToAdd",
        "title": "ConvexHull.nextVertexToAdd(): VertexNode",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.nextVertexToAdd",
      },
      Object {
        "description": "Removes inactive (e.g. deleted) faces from the internal face list.",
        "name": "reindexFaces",
        "title": "ConvexHull.reindexFaces(): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.reindexFaces",
      },
      Object {
        "description": "face - The given face.
 Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list.",
        "name": "removeAllVerticesFromFace",
        "title": "ConvexHull.removeAllVerticesFromFace( face: Face ): VertexNode",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.removeAllVerticesFromFace",
      },
      Object {
        "description": "vertex - The vertex to remove.
 face - The target face.
 Removes a vertex from the 'assigned' list of vertices and from the given face. It also makes sure that the link from 'face' to the first vertex it sees in 'assigned' is linked correctly after the removal.",
        "name": "removeVertexFromFace",
        "title": "ConvexHull.removeVertexFromFace( vertex: VertexNode, face: Face ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.removeVertexFromFace",
      },
      Object {
        "description": "newFaces - An array of new faces.
 Reassigns as many vertices as possible from the unassigned list to the new faces.",
        "name": "resolveUnassignedPoints",
        "title": "ConvexHull.resolveUnassignedPoints( newFaces: Array ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.resolveUnassignedPoints",
      },
      Object {
        "description": "object - Object3D to compute the convex hull of.
 Computes the convex hull of an Object3D (including its children),accounting for the world transforms of both the object and its childrens.",
        "name": "setFromObject",
        "title": "ConvexHull.setFromObject( object: Object3D ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.setFromObject",
      },
      Object {
        "description": "points - Array of Vector3s that the resulting convex hull will contain.
 Computes to convex hull for the given array of points.",
        "name": "setFromPoints",
        "title": "ConvexHull.setFromPoints( points: Array ): ConvexHull",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull.setFromPoints",
      },
    ],
    "title": "ConvexHull()",
    "url": "https://threejs.org/docs/#examples/en/math/convexhull/ConvexHull",
  },
  Object {
    "description": "A vertex as a double linked list node.",
    "name": "VertexNode",
    "properties": Array [
      Object {
        "description": "A point (x, y, z) in 3D space. Default is undefined.",
        "name": "point",
        "title": "VertexNode.point: Vector3",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexNode.point",
      },
      Object {
        "description": "Reference to the previous vertex in the double linked list. Default is null.",
        "name": "prev",
        "title": "VertexNode.prev: VertexNode",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexNode.prev",
      },
      Object {
        "description": "Reference to the next vertex in the double linked list. Default is null.",
        "name": "next",
        "title": "VertexNode.next: VertexNode",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexNode.next",
      },
      Object {
        "description": "Reference to the face that is able to see this vertex. Default is undefined.",
        "name": "face",
        "title": "VertexNode.face: Face",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexNode.face",
      },
    ],
    "title": "VertexNode( point: Vector3 )",
    "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexNode",
  },
  Object {
    "description": "A doubly linked list of vertices.",
    "name": "VertexList",
    "properties": Array [
      Object {
        "description": "Reference to the first vertex of the linked list. Default is null.",
        "name": "head",
        "title": "VertexList.head: VertexNode",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.head",
      },
      Object {
        "description": "Reference to the last vertex of the linked list. Default is null.",
        "name": "tail",
        "title": "VertexList.tail: VertexNode",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.tail",
      },
      Object {
        "description": "Returns the head reference.",
        "name": "first",
        "title": "VertexList.first(): VertexNode",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.first",
      },
      Object {
        "description": "Returns the tail reference.",
        "name": "last",
        "title": "VertexList.last(): VertexNode",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.last",
      },
      Object {
        "description": "Clears the linked list.",
        "name": "clear",
        "title": "VertexList.clear(): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.clear",
      },
      Object {
        "description": "target - The target vertex. It's assumed that this vertex belongs to the linked list.
 vertex - The vertex to insert.
 Inserts a vertex **before** a target vertex.",
        "name": "insertBefore",
        "title": "VertexList.insertBefore( target: Vertex, vertex: Vertex ): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.insertBefore",
      },
      Object {
        "description": "target - The target vertex. It's assumed that this vertex belongs to the linked list.
 vertex - The vertex to insert.
 Inserts a vertex **after** a target vertex.",
        "name": "insertAfter",
        "title": "VertexList.insertAfter( target: Vertex, vertex: Vertex ): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.insertAfter",
      },
      Object {
        "description": "vertex - The vertex to append.
 Appends a vertex to the end of the linked list.",
        "name": "append",
        "title": "VertexList.append( vertex: Vertex ): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.append",
      },
      Object {
        "description": "vertex - The head vertex of a chain of vertices.
 Appends a chain of vertices where the given vertex is the head.",
        "name": "appendChain",
        "title": "VertexList.appendChain( vertex: Vertex ): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.appendChain",
      },
      Object {
        "description": "vertex - The vertex to remove.
 Removes a vertex from the linked list.",
        "name": "remove",
        "title": "VertexList.remove( vertex: Vertex ): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.remove",
      },
      Object {
        "description": "a - The head of the sublist.
 b - The tail of the sublist.
 Removes a sublist of vertices from the linked list.",
        "name": "removeSubList",
        "title": "VertexList.removeSubList( a: Vertex, b: Vertex ): VertexList",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.removeSubList",
      },
      Object {
        "description": "Returns true if the linked list is empty.",
        "name": "isEmpty",
        "title": "VertexList.isEmpty(): Boolean",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList.isEmpty",
      },
    ],
    "title": "VertexList()",
    "url": "https://threejs.org/docs/#examples/en/math/convexhull/VertexList",
  },
  Object {
    "description": "CSS2DRenderer is a simplified version of CSS3DRenderer. The only transformation that is supported is translation.
 The renderer is very useful if you want to combine HTML based labels with 3D objects. Here too, the respective DOM elements are wrapped into an instance of *CSS2DObject* and added to the scene graph.",
    "name": "CSS2DRenderer",
    "properties": Array [
      Object {
        "description": "Returns an object containing the width and height of the renderer.",
        "name": "getSize",
        "title": "CSS2DRenderer.getSize(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/CSS2DRenderer.getSize",
      },
      Object {
        "description": "Renders a scene using a camera.",
        "name": "render",
        "title": "CSS2DRenderer.render( scene: Scene, camera: Camera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/CSS2DRenderer.render",
      },
      Object {
        "description": "Resizes the renderer to (width, height).",
        "name": "setSize",
        "title": "CSS2DRenderer.setSize(width: Number, height: Number): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/CSS2DRenderer.setSize",
      },
    ],
    "title": "CSS2DRenderer()",
    "url": "https://threejs.org/docs/#examples/en/renderers/CSS2DRenderer",
  },
  Object {
    "description": "CSS3DRenderer can be used to apply hierarchical 3D transformations to DOM elements via the CSS3 [transform](https://www.w3schools.com/cssref/css3_pr_transform.asp) property. This renderer is particular interesting if you want to apply 3D effects to a website without canvas based rendering. It can also be used in order to combine DOM elements with WebGL content.
 There are, however, some important limitations:",
    "name": "CSS3DRenderer",
    "properties": Array [
      Object {
        "description": "Returns an object containing the width and height of the renderer.",
        "name": "getSize",
        "title": "CSS3DRenderer.getSize(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/CSS3DRenderer.getSize",
      },
      Object {
        "description": "Renders a scene using a perspective camera.",
        "name": "render",
        "title": "CSS3DRenderer.render( scene: Scene, camera: PerspectiveCamera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/CSS3DRenderer.render",
      },
      Object {
        "description": "Resizes the renderer to (width, height).",
        "name": "setSize",
        "title": "CSS3DRenderer.setSize(width: Number, height: Number): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/CSS3DRenderer.setSize",
      },
    ],
    "title": "CSS3DRenderer()",
    "url": "https://threejs.org/docs/#examples/en/renderers/CSS3DRenderer",
  },
  Object {
    "description": "<p> SVGRenderer can be used to render geometric data using SVG. The produced vector graphics are particular useful in the following use cases: </p> <ul> Animated logos or icons Interactive 2D/3D diagrams or graphs Interactive maps Complex or animated user interfaces </ul> <p> SVGRenderer has various advantages. It produces crystal-clear and sharp output which is independent of the actual viewport resolution.
 SVG elements can be styled via CSS. And they have good accessibility since it's possible to add metadata like title or description (useful for search engines or screen readers). </p> <p> There are, however, some important limitations: </p> <ul> No advanced shading No texture support No shadow support </ul>",
    "name": "SVGRenderer",
    "properties": Array [
      Object {
        "description": "Number of fractional pixels to enlarge polygons in order to prevent anti-aliasing gaps. Range is [0..1]. Default is *0.5*.",
        "name": "overdraw",
        "title": "SVGRenderer.overdraw: Number",
        "type": "property",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.overdraw",
      },
      Object {
        "description": "Tells the renderer to clear its drawing surface.",
        "name": "clear",
        "title": "SVGRenderer.clear(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.clear",
      },
      Object {
        "description": "Returns an object containing the width and height of the renderer.",
        "name": "getSize",
        "title": "SVGRenderer.getSize(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.getSize",
      },
      Object {
        "description": "Renders a scene using a camera.",
        "name": "render",
        "title": "SVGRenderer.render( scene: Scene, camera: Camera ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.render",
      },
      Object {
        "description": "Sets the clearColor and the clearAlpha.",
        "name": "setClearColor",
        "title": "SVGRenderer.setClearColor( color: Color, alpha: number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.setClearColor",
      },
      Object {
        "description": "Sets the precision of the data used to create a path.",
        "name": "setPrecision",
        "title": "SVGRenderer.setPrecision( precision: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.setPrecision",
      },
      Object {
        "description": "Sets the render quality. Possible values are *low* and *high* (default).",
        "name": "setQuality",
        "title": "SVGRenderer.setQuality(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.setQuality",
      },
      Object {
        "description": "Resizes the renderer to (width, height).",
        "name": "setSize",
        "title": "SVGRenderer.setSize( width: Number, height: Number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer.setSize",
      },
    ],
    "title": "SVGRenderer()",
    "url": "https://threejs.org/docs/#examples/en/renderers/SVGRenderer",
  },
  Object {
    "description": "A class containing utility functions for BufferGeometry instances.",
    "name": "BufferGeometryUtils",
    "properties": Array [
      Object {
        "description": "geometries â€” Array of BufferGeometry instances.
 useGroups â€” Whether groups should be generated for the merged geometry or not.
 Merges a set of geometries into a single instance. All geometries must have compatible attributes. If merge does not succeed, the method returns null.",
        "name": "mergeBufferGeometries",
        "title": "BufferGeometryUtils.mergeBufferGeometries( geometries: Array, useGroups: Boolean ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.mergeBufferGeometries",
      },
      Object {
        "description": "attributes â€” Array of BufferAttribute instances.
 Merges a set of attributes into a single instance. All attributes must have compatible properties and types, and InterleavedBufferAttributes are not supported. If merge does not succeed, the method returns null.",
        "name": "mergeBufferAttributes",
        "title": "BufferGeometryUtils.mergeBufferAttributes( attributes: Array ): BufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.mergeBufferAttributes",
      },
      Object {
        "description": "attributes â€” Array of BufferAttribute instances.
 Interleaves a set of attributes and returns a new array of corresponding attributes that share a single InterleavedBuffer instance. All attributes must have compatible types. If merge does not succeed, the method returns null.",
        "name": "interleaveAttributes",
        "title": "BufferGeometryUtils.interleaveAttributes( attributes: Array ): InterleavedBufferAttribute",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.interleaveAttributes",
      },
      Object {
        "description": "geometry â€” Instance of BufferGeometry to estimate the memory use of.
 Returns the amount of bytes used by all attributes to represent the geometry.",
        "name": "estimateBytesUsed",
        "title": "BufferGeometryUtils.estimateBytesUsed( geometry: BufferGeometry ): Number",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.estimateBytesUsed",
      },
      Object {
        "description": "geometry â€” Instance of BufferGeometry to merge the vertices of.
 tolerance â€” The maximum allowable difference between vertex attributes to merge. Defaults to 1e-4.
 Returns a new BufferGeometry with vertices for which all similar vertex attributes (within tolerance) are merged.",
        "name": "mergeVertices",
        "title": "BufferGeometryUtils.mergeVertices( geometry: BufferGeometry, tolerance: Number ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.mergeVertices",
      },
      Object {
        "description": "geometry â€” Instance of BufferGeometry.
 drawMode â€” The draw mode of the given geometry.
 Returns a new indexed BufferGeometry based on the THREE.TrianglesDrawMode draw mode. This mode corresponds to the *gl.TRIANGLES* WebGL primitive.",
        "name": "toTrianglesDrawMode",
        "title": "BufferGeometryUtils.toTrianglesDrawMode( geometry: BufferGeometry, drawMode: TrianglesDrawMode ): BufferGeometry",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.toTrianglesDrawMode",
      },
      Object {
        "description": "object â€” Instance of Mesh | Line | Points.
 Returns the current attributes (Position and Normal) of a morphed/skinned Object3D whose geometry is a BufferGeometry, together with the original ones: An Object with 4 properties: \`positionAttribute\`, \`normalAttribute\`, \`morphedPositionAttribute\` and \`morphedNormalAttribute\`. Helpful for Raytracing or Decals (i.e. a DecalGeometry applied to a morphed Object with a BufferGeometry will use the original BufferGeometry, not the morphed/skinned one, generating an incorrect result. Using this function to create a shadow Object3D the DecalGeometry can be correctly generated).",
        "name": "computeMorphedAttributes",
        "title": "BufferGeometryUtils.computeMorphedAttributes( | Line | Points object: Mesh ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils.computeMorphedAttributes",
      },
    ],
    "title": "BufferGeometryUtils",
    "url": "https://threejs.org/docs/#examples/en/utils/BufferGeometryUtils",
  },
  Object {
    "description": "A class containing useful utility functions for scene manipulation.",
    "name": "SceneUtils",
    "properties": Array [
      Object {
        "description": "instancedMesh â€” The instanced mesh.",
        "name": "createMeshesFromInstancedMesh",
        "title": "SceneUtils.createMeshesFromInstancedMesh( instancedMesh: InstancedMesh ): Group",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SceneUtils.createMeshesFromInstancedMesh",
      },
      Object {
        "description": "geometry â€” The geometry for the set of materials. 
 materials â€” The materials for the object.",
        "name": "createMultiMaterialObject",
        "title": "SceneUtils.createMultiMaterialObject( geometry: BufferGeometry, materials: Array ): Group",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SceneUtils.createMultiMaterialObject",
      },
    ],
    "title": "SceneUtils",
    "url": "https://threejs.org/docs/#examples/en/utils/SceneUtils",
  },
  Object {
    "description": "Utility functions for Skeleton, SkinnedMesh, and Bone manipulation.",
    "name": "SkeletonUtils",
    "properties": Array [
      Object {
        "description": "Clones the given object and its descendants, ensuring that any SkinnedMesh instances are correctly associated with their bones. Bones are also cloned, and must be descendants of the object passed to this method. Other data, like geometries and materials, are reused by reference.",
        "name": "clone",
        "title": "SkeletonUtils.clone( object: Object3D ): Object3D",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.clone",
      },
      Object {
        "description": undefined,
        "name": "findBoneTrackData",
        "title": "SkeletonUtils.findBoneTrackData( name: String, tracks: Array ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.findBoneTrackData",
      },
      Object {
        "description": undefined,
        "name": "getBoneByName",
        "title": "SkeletonUtils.getBoneByName( name: String, skeleton: Skeleton ): Bone",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.getBoneByName",
      },
      Object {
        "description": undefined,
        "name": "getBones",
        "title": "SkeletonUtils.getBones( skeleton: Skeleton ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.getBones",
      },
      Object {
        "description": undefined,
        "name": "getEqualsBonesNames",
        "title": "SkeletonUtils.getEqualsBonesNames( skeleton: Skeleton, targetSkeleton: Skeleton ): Array",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.getEqualsBonesNames",
      },
      Object {
        "description": undefined,
        "name": "getHelperFromSkeleton",
        "title": "SkeletonUtils.getHelperFromSkeleton( skeleton: Skeleton ): SkeletonHelper",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.getHelperFromSkeleton",
      },
      Object {
        "description": undefined,
        "name": "getNearestBone",
        "title": "SkeletonUtils.getNearestBone( bone: Bone, names: Array ): Bone",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.getNearestBone",
      },
      Object {
        "description": undefined,
        "name": "getSkeletonOffsets",
        "title": "SkeletonUtils.getSkeletonOffsets( target: SkeletonHelper, source: SkeletonHelper, options: Object ): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.getSkeletonOffsets",
      },
      Object {
        "description": undefined,
        "name": "renameBones",
        "title": "SkeletonUtils.renameBones( skeleton: Skeleton, names: Array ): SkeletonUtils",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.renameBones",
      },
      Object {
        "description": undefined,
        "name": "retarget",
        "title": "SkeletonUtils.retarget( target: SkeletonHelper, source: SkeletonHelper, options: Object ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.retarget",
      },
      Object {
        "description": undefined,
        "name": "retargetClip",
        "title": "SkeletonUtils.retargetClip( target: SkeletonHelper, source: SkeletonHelper, clip: AnimationClip, options: Object ): AnimationClip",
        "type": "method",
        "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils.retargetClip",
      },
    ],
    "title": "SkeletonUtils",
    "url": "https://threejs.org/docs/#examples/en/utils/SkeletonUtils",
  },
  Object {
    "description": "Three.js includes polyfills for the following functions and constants.",
    "name": "Polyfills",
    "properties": Array [],
    "title": "Polyfills",
    "url": "https://threejs.org/docs/#api/en/Polyfills",
  },
  Object {
    "description": "Constructor for the GLSL program sent to vertex and fragment shaders, including default uniforms and attributes.",
    "name": "WebGLProgram",
    "properties": Array [
      Object {
        "description": "The name of the respective shader program.",
        "name": "name",
        "title": "WebGLProgram.name: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.name",
      },
      Object {
        "description": "The identifier of this instance.",
        "name": "id",
        "title": "WebGLProgram.id: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.id",
      },
      Object {
        "description": "This key enables the reusability of a single WebGLProgram for different materials.",
        "name": "cacheKey",
        "title": "WebGLProgram.cacheKey: String",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.cacheKey",
      },
      Object {
        "description": "How many times this instance is used for rendering render items.",
        "name": "usedTimes",
        "title": "WebGLProgram.usedTimes: Integer",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.usedTimes",
      },
      Object {
        "description": "The actual shader program.",
        "name": "program",
        "title": "WebGLProgram.program: Object",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.program",
      },
      Object {
        "description": "An instance of WebGLShader representing the vertex shader.",
        "name": "vertexShader",
        "title": "WebGLProgram.vertexShader: WebGLShader",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.vertexShader",
      },
      Object {
        "description": "An instance of WebGLShader representing the frament shader.",
        "name": "fragmentShader",
        "title": "WebGLProgram.fragmentShader: WebGLShader",
        "type": "property",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.fragmentShader",
      },
      Object {
        "description": "Returns a name-value mapping of all active uniform locations.",
        "name": "getUniforms",
        "title": "WebGLProgram.getUniforms(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.getUniforms",
      },
      Object {
        "description": "Returns a name-value mapping of all active vertex attribute locations.",
        "name": "getAttributes",
        "title": "WebGLProgram.getAttributes(): Object",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.getAttributes",
      },
      Object {
        "description": "Destroys an instance of WebGLProgram.",
        "name": "destroy",
        "title": "WebGLProgram.destroy(): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram.destroy",
      },
    ],
    "title": "Built-in uniforms and attributes",
    "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram",
  },
  Object {
    "description": "A lower level function to compile either a vertex or fragment shader.",
    "name": "WebGLShader",
    "properties": Array [],
    "title": "WebGLShader",
    "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLShader",
  },
  Object {
    "description": undefined,
    "name": "WebGLState",
    "properties": Array [
      Object {
        "description": "TODO",
        "name": "enable",
        "title": "WebGLState.enable( id: Integer, boolean: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLState.enable",
      },
      Object {
        "description": "TODO",
        "name": "disable",
        "title": "WebGLState.disable( id: Integer, boolean: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLState.disable",
      },
      Object {
        "description": "depthTest â€” The boolean to decide if depth of a fragment needs to be tested against the depth buffer .",
        "name": "setDepthTest",
        "title": "WebGLState.setDepthTest( depthTest: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLState.setDepthTest",
      },
      Object {
        "description": "depthWrite â€” The boolean to decide if depth of a fragment needs to be kept.",
        "name": "setDepthWrite",
        "title": "WebGLState.setDepthWrite( depthWrite: Boolean ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLState.setDepthWrite",
      },
      Object {
        "description": "blending â€” A number indicating the blending mode. Possible value are THREE.NoBlending, THREE.NormalBlending, THREE.AdditiveBlending, THREE.SubtractiveBlending, THREE.MultiplyBlending or THREE.CustomBlending 
 blendEquation â€” When blending is THREE.CustomBlending, then you can set the blendEquation. Possible values are THREE.AddEquation, THREE.SubtractEquation or THREE.ReverseSubtractEquation.
 blendSrc â€” When blending is THREE.CustomBlending, then you can set the blendSrc. Possible values are THREE.ZeroFactor, THREE.OneFactor,THREE.SrcColorFactor, THREE.OneMinusSrcColorFactor, THREE.SrcAlphaFactor, THREE.OneMinusSrcAlphaFactor, THREE.DstAlphaFactor, THREE.OneMinusDstAlphaFactor, THREE.DstColorFactor,THREE.OneMinusDstColorFactor or THREE.SrcAlphaSaturateFactor
 blendDst â€” When blending is THREE.CustomBlending, then you can set the blendDst. Possible values are THREE.ZeroFactor, THREE.OneFactor,THREE.SrcColorFactor, THREE.OneMinusSrcColorFactor, THREE.SrcAlphaFactor, THREE.OneMinusSrcAlphaFactor, THREE.DstAlphaFactor, THREE.OneMinusDstAlphaFactor, THREE.DstColorFactor,THREE.OneMinusDstColorFactor or THREE.SrcAlphaSaturateFactor",
        "name": "setBlending",
        "title": "WebGLState.setBlending( blending: number, blendEquation: number, blendSrc: number, blendDst: number ): null",
        "type": "method",
        "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLState.setBlending",
      },
    ],
    "title": "WebGLState",
    "url": "https://threejs.org/docs/#api/en/renderers/webgl/WebGLState",
  },
]
`;

exports[`utils/three loads three.js examples 1`] = `
Array [
  Object {
    "name": "webgl_animation_cloth",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_animation_cloth.jpg",
    },
    "title": "webgl animation cloth",
    "url": "https://threejs.org/examples/#webgl_animation_cloth",
  },
  Object {
    "name": "webgl_animation_keyframes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_animation_keyframes.jpg",
    },
    "title": "webgl animation keyframes",
    "url": "https://threejs.org/examples/#webgl_animation_keyframes",
  },
  Object {
    "name": "webgl_animation_skinning_blending",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_animation_skinning_blending.jpg",
    },
    "title": "webgl animation skinning blending",
    "url": "https://threejs.org/examples/#webgl_animation_skinning_blending",
  },
  Object {
    "name": "webgl_animation_skinning_additive_blending",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_animation_skinning_additive_blending.jpg",
    },
    "title": "webgl animation skinning additive blending",
    "url": "https://threejs.org/examples/#webgl_animation_skinning_additive_blending",
  },
  Object {
    "name": "webgl_animation_skinning_morph",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_animation_skinning_morph.jpg",
    },
    "title": "webgl animation skinning morph",
    "url": "https://threejs.org/examples/#webgl_animation_skinning_morph",
  },
  Object {
    "name": "webgl_animation_multiple",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_animation_multiple.jpg",
    },
    "title": "webgl animation multiple",
    "url": "https://threejs.org/examples/#webgl_animation_multiple",
  },
  Object {
    "name": "webgl_camera",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_camera.jpg",
    },
    "title": "webgl camera",
    "url": "https://threejs.org/examples/#webgl_camera",
  },
  Object {
    "name": "webgl_camera_array",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_camera_array.jpg",
    },
    "title": "webgl camera array",
    "url": "https://threejs.org/examples/#webgl_camera_array",
  },
  Object {
    "name": "webgl_camera_cinematic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_camera_cinematic.jpg",
    },
    "title": "webgl camera cinematic",
    "url": "https://threejs.org/examples/#webgl_camera_cinematic",
  },
  Object {
    "name": "webgl_camera_logarithmicdepthbuffer",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_camera_logarithmicdepthbuffer.jpg",
    },
    "title": "webgl camera logarithmicdepthbuffer",
    "url": "https://threejs.org/examples/#webgl_camera_logarithmicdepthbuffer",
  },
  Object {
    "name": "webgl_clipping",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_clipping.jpg",
    },
    "title": "webgl clipping",
    "url": "https://threejs.org/examples/#webgl_clipping",
  },
  Object {
    "name": "webgl_clipping_advanced",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_clipping_advanced.jpg",
    },
    "title": "webgl clipping advanced",
    "url": "https://threejs.org/examples/#webgl_clipping_advanced",
  },
  Object {
    "name": "webgl_clipping_intersection",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_clipping_intersection.jpg",
    },
    "title": "webgl clipping intersection",
    "url": "https://threejs.org/examples/#webgl_clipping_intersection",
  },
  Object {
    "name": "webgl_clipping_stencil",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_clipping_stencil.jpg",
    },
    "title": "webgl clipping stencil",
    "url": "https://threejs.org/examples/#webgl_clipping_stencil",
  },
  Object {
    "name": "webgl_decals",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_decals.jpg",
    },
    "title": "webgl decals",
    "url": "https://threejs.org/examples/#webgl_decals",
  },
  Object {
    "name": "webgl_depth_texture",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_depth_texture.jpg",
    },
    "title": "webgl depth texture",
    "url": "https://threejs.org/examples/#webgl_depth_texture",
  },
  Object {
    "name": "webgl_effects_anaglyph",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_effects_anaglyph.jpg",
    },
    "title": "webgl effects anaglyph",
    "url": "https://threejs.org/examples/#webgl_effects_anaglyph",
  },
  Object {
    "name": "webgl_effects_ascii",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_effects_ascii.jpg",
    },
    "title": "webgl effects ascii",
    "url": "https://threejs.org/examples/#webgl_effects_ascii",
  },
  Object {
    "name": "webgl_effects_parallaxbarrier",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_effects_parallaxbarrier.jpg",
    },
    "title": "webgl effects parallaxbarrier",
    "url": "https://threejs.org/examples/#webgl_effects_parallaxbarrier",
  },
  Object {
    "name": "webgl_effects_peppersghost",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_effects_peppersghost.jpg",
    },
    "title": "webgl effects peppersghost",
    "url": "https://threejs.org/examples/#webgl_effects_peppersghost",
  },
  Object {
    "name": "webgl_effects_stereo",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_effects_stereo.jpg",
    },
    "title": "webgl effects stereo",
    "url": "https://threejs.org/examples/#webgl_effects_stereo",
  },
  Object {
    "name": "webgl_framebuffer_texture",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_framebuffer_texture.jpg",
    },
    "title": "webgl framebuffer texture",
    "url": "https://threejs.org/examples/#webgl_framebuffer_texture",
  },
  Object {
    "name": "webgl_geometries",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometries.jpg",
    },
    "title": "webgl geometries",
    "url": "https://threejs.org/examples/#webgl_geometries",
  },
  Object {
    "name": "webgl_geometries_parametric",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometries_parametric.jpg",
    },
    "title": "webgl geometries parametric",
    "url": "https://threejs.org/examples/#webgl_geometries_parametric",
  },
  Object {
    "name": "webgl_geometry_colors",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_colors.jpg",
    },
    "title": "webgl geometry colors",
    "url": "https://threejs.org/examples/#webgl_geometry_colors",
  },
  Object {
    "name": "webgl_geometry_colors_lookuptable",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_colors_lookuptable.jpg",
    },
    "title": "webgl geometry colors lookuptable",
    "url": "https://threejs.org/examples/#webgl_geometry_colors_lookuptable",
  },
  Object {
    "name": "webgl_geometry_convex",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_convex.jpg",
    },
    "title": "webgl geometry convex",
    "url": "https://threejs.org/examples/#webgl_geometry_convex",
  },
  Object {
    "name": "webgl_geometry_cube",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_cube.jpg",
    },
    "title": "webgl geometry cube",
    "url": "https://threejs.org/examples/#webgl_geometry_cube",
  },
  Object {
    "name": "webgl_geometry_dynamic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_dynamic.jpg",
    },
    "title": "webgl geometry dynamic",
    "url": "https://threejs.org/examples/#webgl_geometry_dynamic",
  },
  Object {
    "name": "webgl_geometry_extrude_shapes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_extrude_shapes.jpg",
    },
    "title": "webgl geometry extrude shapes",
    "url": "https://threejs.org/examples/#webgl_geometry_extrude_shapes",
  },
  Object {
    "name": "webgl_geometry_extrude_shapes2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_extrude_shapes2.jpg",
    },
    "title": "webgl geometry extrude shapes2",
    "url": "https://threejs.org/examples/#webgl_geometry_extrude_shapes2",
  },
  Object {
    "name": "webgl_geometry_extrude_splines",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_extrude_splines.jpg",
    },
    "title": "webgl geometry extrude splines",
    "url": "https://threejs.org/examples/#webgl_geometry_extrude_splines",
  },
  Object {
    "name": "webgl_geometry_minecraft",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_minecraft.jpg",
    },
    "title": "webgl geometry minecraft",
    "url": "https://threejs.org/examples/#webgl_geometry_minecraft",
  },
  Object {
    "name": "webgl_geometry_nurbs",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_nurbs.jpg",
    },
    "title": "webgl geometry nurbs",
    "url": "https://threejs.org/examples/#webgl_geometry_nurbs",
  },
  Object {
    "name": "webgl_geometry_shapes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_shapes.jpg",
    },
    "title": "webgl geometry shapes",
    "url": "https://threejs.org/examples/#webgl_geometry_shapes",
  },
  Object {
    "name": "webgl_geometry_spline_editor",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_spline_editor.jpg",
    },
    "title": "webgl geometry spline editor",
    "url": "https://threejs.org/examples/#webgl_geometry_spline_editor",
  },
  Object {
    "name": "webgl_geometry_teapot",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_teapot.jpg",
    },
    "title": "webgl geometry teapot",
    "url": "https://threejs.org/examples/#webgl_geometry_teapot",
  },
  Object {
    "name": "webgl_geometry_terrain",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_terrain.jpg",
    },
    "title": "webgl geometry terrain",
    "url": "https://threejs.org/examples/#webgl_geometry_terrain",
  },
  Object {
    "name": "webgl_geometry_terrain_raycast",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_terrain_raycast.jpg",
    },
    "title": "webgl geometry terrain raycast",
    "url": "https://threejs.org/examples/#webgl_geometry_terrain_raycast",
  },
  Object {
    "name": "webgl_geometry_text",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_text.jpg",
    },
    "title": "webgl geometry text",
    "url": "https://threejs.org/examples/#webgl_geometry_text",
  },
  Object {
    "name": "webgl_geometry_text_shapes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_text_shapes.jpg",
    },
    "title": "webgl geometry text shapes",
    "url": "https://threejs.org/examples/#webgl_geometry_text_shapes",
  },
  Object {
    "name": "webgl_geometry_text_stroke",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_geometry_text_stroke.jpg",
    },
    "title": "webgl geometry text stroke",
    "url": "https://threejs.org/examples/#webgl_geometry_text_stroke",
  },
  Object {
    "name": "webgl_helpers",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_helpers.jpg",
    },
    "title": "webgl helpers",
    "url": "https://threejs.org/examples/#webgl_helpers",
  },
  Object {
    "name": "webgl_instancing_dynamic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_instancing_dynamic.jpg",
    },
    "title": "webgl instancing dynamic",
    "url": "https://threejs.org/examples/#webgl_instancing_dynamic",
  },
  Object {
    "name": "webgl_instancing_performance",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_instancing_performance.jpg",
    },
    "title": "webgl instancing performance",
    "url": "https://threejs.org/examples/#webgl_instancing_performance",
  },
  Object {
    "name": "webgl_instancing_raycast",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_instancing_raycast.jpg",
    },
    "title": "webgl instancing raycast",
    "url": "https://threejs.org/examples/#webgl_instancing_raycast",
  },
  Object {
    "name": "webgl_instancing_scatter",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_instancing_scatter.jpg",
    },
    "title": "webgl instancing scatter",
    "url": "https://threejs.org/examples/#webgl_instancing_scatter",
  },
  Object {
    "name": "webgl_interactive_buffergeometry",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_buffergeometry.jpg",
    },
    "title": "webgl interactive buffergeometry",
    "url": "https://threejs.org/examples/#webgl_interactive_buffergeometry",
  },
  Object {
    "name": "webgl_interactive_cubes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_cubes.jpg",
    },
    "title": "webgl interactive cubes",
    "url": "https://threejs.org/examples/#webgl_interactive_cubes",
  },
  Object {
    "name": "webgl_interactive_cubes_gpu",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_cubes_gpu.jpg",
    },
    "title": "webgl interactive cubes gpu",
    "url": "https://threejs.org/examples/#webgl_interactive_cubes_gpu",
  },
  Object {
    "name": "webgl_interactive_cubes_ortho",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_cubes_ortho.jpg",
    },
    "title": "webgl interactive cubes ortho",
    "url": "https://threejs.org/examples/#webgl_interactive_cubes_ortho",
  },
  Object {
    "name": "webgl_interactive_lines",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_lines.jpg",
    },
    "title": "webgl interactive lines",
    "url": "https://threejs.org/examples/#webgl_interactive_lines",
  },
  Object {
    "name": "webgl_interactive_points",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_points.jpg",
    },
    "title": "webgl interactive points",
    "url": "https://threejs.org/examples/#webgl_interactive_points",
  },
  Object {
    "name": "webgl_interactive_raycasting_points",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_raycasting_points.jpg",
    },
    "title": "webgl interactive raycasting points",
    "url": "https://threejs.org/examples/#webgl_interactive_raycasting_points",
  },
  Object {
    "name": "webgl_interactive_voxelpainter",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_interactive_voxelpainter.jpg",
    },
    "title": "webgl interactive voxelpainter",
    "url": "https://threejs.org/examples/#webgl_interactive_voxelpainter",
  },
  Object {
    "name": "webgl_layers",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_layers.jpg",
    },
    "title": "webgl layers",
    "url": "https://threejs.org/examples/#webgl_layers",
  },
  Object {
    "name": "webgl_lensflares",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lensflares.jpg",
    },
    "title": "webgl lensflares",
    "url": "https://threejs.org/examples/#webgl_lensflares",
  },
  Object {
    "name": "webgl_lightprobe",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lightprobe.jpg",
    },
    "title": "webgl lightprobe",
    "url": "https://threejs.org/examples/#webgl_lightprobe",
  },
  Object {
    "name": "webgl_lightprobe_cubecamera",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lightprobe_cubecamera.jpg",
    },
    "title": "webgl lightprobe cubecamera",
    "url": "https://threejs.org/examples/#webgl_lightprobe_cubecamera",
  },
  Object {
    "name": "webgl_lights_hemisphere",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lights_hemisphere.jpg",
    },
    "title": "webgl lights hemisphere",
    "url": "https://threejs.org/examples/#webgl_lights_hemisphere",
  },
  Object {
    "name": "webgl_lights_physical",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lights_physical.jpg",
    },
    "title": "webgl lights physical",
    "url": "https://threejs.org/examples/#webgl_lights_physical",
  },
  Object {
    "name": "webgl_lights_pointlights",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lights_pointlights.jpg",
    },
    "title": "webgl lights pointlights",
    "url": "https://threejs.org/examples/#webgl_lights_pointlights",
  },
  Object {
    "name": "webgl_lights_spotlight",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lights_spotlight.jpg",
    },
    "title": "webgl lights spotlight",
    "url": "https://threejs.org/examples/#webgl_lights_spotlight",
  },
  Object {
    "name": "webgl_lights_spotlights",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lights_spotlights.jpg",
    },
    "title": "webgl lights spotlights",
    "url": "https://threejs.org/examples/#webgl_lights_spotlights",
  },
  Object {
    "name": "webgl_lights_rectarealight",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lights_rectarealight.jpg",
    },
    "title": "webgl lights rectarealight",
    "url": "https://threejs.org/examples/#webgl_lights_rectarealight",
  },
  Object {
    "name": "webgl_lines_colors",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lines_colors.jpg",
    },
    "title": "webgl lines colors",
    "url": "https://threejs.org/examples/#webgl_lines_colors",
  },
  Object {
    "name": "webgl_lines_dashed",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lines_dashed.jpg",
    },
    "title": "webgl lines dashed",
    "url": "https://threejs.org/examples/#webgl_lines_dashed",
  },
  Object {
    "name": "webgl_lines_fat",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lines_fat.jpg",
    },
    "title": "webgl lines fat",
    "url": "https://threejs.org/examples/#webgl_lines_fat",
  },
  Object {
    "name": "webgl_lines_fat_wireframe",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lines_fat_wireframe.jpg",
    },
    "title": "webgl lines fat wireframe",
    "url": "https://threejs.org/examples/#webgl_lines_fat_wireframe",
  },
  Object {
    "name": "webgl_lines_sphere",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lines_sphere.jpg",
    },
    "title": "webgl lines sphere",
    "url": "https://threejs.org/examples/#webgl_lines_sphere",
  },
  Object {
    "name": "webgl_loader_3dm",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_3dm.jpg",
    },
    "title": "webgl loader 3dm",
    "url": "https://threejs.org/examples/#webgl_loader_3dm",
  },
  Object {
    "name": "webgl_loader_3ds",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_3ds.jpg",
    },
    "title": "webgl loader 3ds",
    "url": "https://threejs.org/examples/#webgl_loader_3ds",
  },
  Object {
    "name": "webgl_loader_3mf",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_3mf.jpg",
    },
    "title": "webgl loader 3mf",
    "url": "https://threejs.org/examples/#webgl_loader_3mf",
  },
  Object {
    "name": "webgl_loader_3mf_materials",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_3mf_materials.jpg",
    },
    "title": "webgl loader 3mf materials",
    "url": "https://threejs.org/examples/#webgl_loader_3mf_materials",
  },
  Object {
    "name": "webgl_loader_amf",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_amf.jpg",
    },
    "title": "webgl loader amf",
    "url": "https://threejs.org/examples/#webgl_loader_amf",
  },
  Object {
    "name": "webgl_loader_bvh",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_bvh.jpg",
    },
    "title": "webgl loader bvh",
    "url": "https://threejs.org/examples/#webgl_loader_bvh",
  },
  Object {
    "name": "webgl_loader_collada",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_collada.jpg",
    },
    "title": "webgl loader collada",
    "url": "https://threejs.org/examples/#webgl_loader_collada",
  },
  Object {
    "name": "webgl_loader_collada_kinematics",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_collada_kinematics.jpg",
    },
    "title": "webgl loader collada kinematics",
    "url": "https://threejs.org/examples/#webgl_loader_collada_kinematics",
  },
  Object {
    "name": "webgl_loader_collada_skinning",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_collada_skinning.jpg",
    },
    "title": "webgl loader collada skinning",
    "url": "https://threejs.org/examples/#webgl_loader_collada_skinning",
  },
  Object {
    "name": "webgl_loader_draco",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_draco.jpg",
    },
    "title": "webgl loader draco",
    "url": "https://threejs.org/examples/#webgl_loader_draco",
  },
  Object {
    "name": "webgl_loader_fbx",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_fbx.jpg",
    },
    "title": "webgl loader fbx",
    "url": "https://threejs.org/examples/#webgl_loader_fbx",
  },
  Object {
    "name": "webgl_loader_fbx_nurbs",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_fbx_nurbs.jpg",
    },
    "title": "webgl loader fbx nurbs",
    "url": "https://threejs.org/examples/#webgl_loader_fbx_nurbs",
  },
  Object {
    "name": "webgl_loader_gcode",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_gcode.jpg",
    },
    "title": "webgl loader gcode",
    "url": "https://threejs.org/examples/#webgl_loader_gcode",
  },
  Object {
    "name": "webgl_loader_gltf",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_gltf.jpg",
    },
    "title": "webgl loader gltf",
    "url": "https://threejs.org/examples/#webgl_loader_gltf",
  },
  Object {
    "name": "webgl_loader_gltf_compressed",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_gltf_compressed.jpg",
    },
    "title": "webgl loader gltf compressed",
    "url": "https://threejs.org/examples/#webgl_loader_gltf_compressed",
  },
  Object {
    "name": "webgl_loader_gltf_extensions",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_gltf_extensions.jpg",
    },
    "title": "webgl loader gltf extensions",
    "url": "https://threejs.org/examples/#webgl_loader_gltf_extensions",
  },
  Object {
    "name": "webgl_loader_gltf_variants",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_gltf_variants.jpg",
    },
    "title": "webgl loader gltf variants",
    "url": "https://threejs.org/examples/#webgl_loader_gltf_variants",
  },
  Object {
    "name": "webgl_loader_ifc",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_ifc.jpg",
    },
    "title": "webgl loader ifc",
    "url": "https://threejs.org/examples/#webgl_loader_ifc",
  },
  Object {
    "name": "webgl_loader_imagebitmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_imagebitmap.jpg",
    },
    "title": "webgl loader imagebitmap",
    "url": "https://threejs.org/examples/#webgl_loader_imagebitmap",
  },
  Object {
    "name": "webgl_loader_kmz",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_kmz.jpg",
    },
    "title": "webgl loader kmz",
    "url": "https://threejs.org/examples/#webgl_loader_kmz",
  },
  Object {
    "name": "webgl_loader_ldraw",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_ldraw.jpg",
    },
    "title": "webgl loader ldraw",
    "url": "https://threejs.org/examples/#webgl_loader_ldraw",
  },
  Object {
    "name": "webgl_loader_lwo",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_lwo.jpg",
    },
    "title": "webgl loader lwo",
    "url": "https://threejs.org/examples/#webgl_loader_lwo",
  },
  Object {
    "name": "webgl_loader_md2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_md2.jpg",
    },
    "title": "webgl loader md2",
    "url": "https://threejs.org/examples/#webgl_loader_md2",
  },
  Object {
    "name": "webgl_loader_md2_control",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_md2_control.jpg",
    },
    "title": "webgl loader md2 control",
    "url": "https://threejs.org/examples/#webgl_loader_md2_control",
  },
  Object {
    "name": "webgl_loader_mdd",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_mdd.jpg",
    },
    "title": "webgl loader mdd",
    "url": "https://threejs.org/examples/#webgl_loader_mdd",
  },
  Object {
    "name": "webgl_loader_mmd",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_mmd.jpg",
    },
    "title": "webgl loader mmd",
    "url": "https://threejs.org/examples/#webgl_loader_mmd",
  },
  Object {
    "name": "webgl_loader_mmd_pose",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_mmd_pose.jpg",
    },
    "title": "webgl loader mmd pose",
    "url": "https://threejs.org/examples/#webgl_loader_mmd_pose",
  },
  Object {
    "name": "webgl_loader_mmd_audio",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_mmd_audio.jpg",
    },
    "title": "webgl loader mmd audio",
    "url": "https://threejs.org/examples/#webgl_loader_mmd_audio",
  },
  Object {
    "name": "webgl_loader_nrrd",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_nrrd.jpg",
    },
    "title": "webgl loader nrrd",
    "url": "https://threejs.org/examples/#webgl_loader_nrrd",
  },
  Object {
    "name": "webgl_loader_obj",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_obj.jpg",
    },
    "title": "webgl loader obj",
    "url": "https://threejs.org/examples/#webgl_loader_obj",
  },
  Object {
    "name": "webgl_loader_obj_mtl",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_obj_mtl.jpg",
    },
    "title": "webgl loader obj mtl",
    "url": "https://threejs.org/examples/#webgl_loader_obj_mtl",
  },
  Object {
    "name": "webgl_loader_pcd",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_pcd.jpg",
    },
    "title": "webgl loader pcd",
    "url": "https://threejs.org/examples/#webgl_loader_pcd",
  },
  Object {
    "name": "webgl_loader_pdb",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_pdb.jpg",
    },
    "title": "webgl loader pdb",
    "url": "https://threejs.org/examples/#webgl_loader_pdb",
  },
  Object {
    "name": "webgl_loader_ply",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_ply.jpg",
    },
    "title": "webgl loader ply",
    "url": "https://threejs.org/examples/#webgl_loader_ply",
  },
  Object {
    "name": "webgl_loader_prwm",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_prwm.jpg",
    },
    "title": "webgl loader prwm",
    "url": "https://threejs.org/examples/#webgl_loader_prwm",
  },
  Object {
    "name": "webgl_loader_stl",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_stl.jpg",
    },
    "title": "webgl loader stl",
    "url": "https://threejs.org/examples/#webgl_loader_stl",
  },
  Object {
    "name": "webgl_loader_svg",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_svg.jpg",
    },
    "title": "webgl loader svg",
    "url": "https://threejs.org/examples/#webgl_loader_svg",
  },
  Object {
    "name": "webgl_loader_tilt",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_tilt.jpg",
    },
    "title": "webgl loader tilt",
    "url": "https://threejs.org/examples/#webgl_loader_tilt",
  },
  Object {
    "name": "webgl_loader_texture_basis",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_basis.jpg",
    },
    "title": "webgl loader texture basis",
    "url": "https://threejs.org/examples/#webgl_loader_texture_basis",
  },
  Object {
    "name": "webgl_loader_texture_dds",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_dds.jpg",
    },
    "title": "webgl loader texture dds",
    "url": "https://threejs.org/examples/#webgl_loader_texture_dds",
  },
  Object {
    "name": "webgl_loader_texture_exr",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_exr.jpg",
    },
    "title": "webgl loader texture exr",
    "url": "https://threejs.org/examples/#webgl_loader_texture_exr",
  },
  Object {
    "name": "webgl_loader_texture_hdr",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_hdr.jpg",
    },
    "title": "webgl loader texture hdr",
    "url": "https://threejs.org/examples/#webgl_loader_texture_hdr",
  },
  Object {
    "name": "webgl_loader_texture_ktx",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_ktx.jpg",
    },
    "title": "webgl loader texture ktx",
    "url": "https://threejs.org/examples/#webgl_loader_texture_ktx",
  },
  Object {
    "name": "webgl_loader_texture_ktx2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_ktx2.jpg",
    },
    "title": "webgl loader texture ktx2",
    "url": "https://threejs.org/examples/#webgl_loader_texture_ktx2",
  },
  Object {
    "name": "webgl_loader_texture_lottie",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_lottie.jpg",
    },
    "title": "webgl loader texture lottie",
    "url": "https://threejs.org/examples/#webgl_loader_texture_lottie",
  },
  Object {
    "name": "webgl_loader_texture_pvrtc",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_pvrtc.jpg",
    },
    "title": "webgl loader texture pvrtc",
    "url": "https://threejs.org/examples/#webgl_loader_texture_pvrtc",
  },
  Object {
    "name": "webgl_loader_texture_rgbm",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_rgbm.jpg",
    },
    "title": "webgl loader texture rgbm",
    "url": "https://threejs.org/examples/#webgl_loader_texture_rgbm",
  },
  Object {
    "name": "webgl_loader_texture_tga",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_texture_tga.jpg",
    },
    "title": "webgl loader texture tga",
    "url": "https://threejs.org/examples/#webgl_loader_texture_tga",
  },
  Object {
    "name": "webgl_loader_ttf",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_ttf.jpg",
    },
    "title": "webgl loader ttf",
    "url": "https://threejs.org/examples/#webgl_loader_ttf",
  },
  Object {
    "name": "webgl_loader_vox",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_vox.jpg",
    },
    "title": "webgl loader vox",
    "url": "https://threejs.org/examples/#webgl_loader_vox",
  },
  Object {
    "name": "webgl_loader_vrm",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_vrm.jpg",
    },
    "title": "webgl loader vrm",
    "url": "https://threejs.org/examples/#webgl_loader_vrm",
  },
  Object {
    "name": "webgl_loader_vrml",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_vrml.jpg",
    },
    "title": "webgl loader vrml",
    "url": "https://threejs.org/examples/#webgl_loader_vrml",
  },
  Object {
    "name": "webgl_loader_vtk",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_vtk.jpg",
    },
    "title": "webgl loader vtk",
    "url": "https://threejs.org/examples/#webgl_loader_vtk",
  },
  Object {
    "name": "webgl_loader_xyz",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_xyz.jpg",
    },
    "title": "webgl loader xyz",
    "url": "https://threejs.org/examples/#webgl_loader_xyz",
  },
  Object {
    "name": "webgl_lod",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lod.jpg",
    },
    "title": "webgl lod",
    "url": "https://threejs.org/examples/#webgl_lod",
  },
  Object {
    "name": "webgl_marchingcubes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_marchingcubes.jpg",
    },
    "title": "webgl marchingcubes",
    "url": "https://threejs.org/examples/#webgl_marchingcubes",
  },
  Object {
    "name": "webgl_materials",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials.jpg",
    },
    "title": "webgl materials",
    "url": "https://threejs.org/examples/#webgl_materials",
  },
  Object {
    "name": "webgl_materials_blending",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_blending.jpg",
    },
    "title": "webgl materials blending",
    "url": "https://threejs.org/examples/#webgl_materials_blending",
  },
  Object {
    "name": "webgl_materials_blending_custom",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_blending_custom.jpg",
    },
    "title": "webgl materials blending custom",
    "url": "https://threejs.org/examples/#webgl_materials_blending_custom",
  },
  Object {
    "name": "webgl_materials_bumpmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_bumpmap.jpg",
    },
    "title": "webgl materials bumpmap",
    "url": "https://threejs.org/examples/#webgl_materials_bumpmap",
  },
  Object {
    "name": "webgl_materials_car",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_car.jpg",
    },
    "title": "webgl materials car",
    "url": "https://threejs.org/examples/#webgl_materials_car",
  },
  Object {
    "name": "webgl_materials_channels",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_channels.jpg",
    },
    "title": "webgl materials channels",
    "url": "https://threejs.org/examples/#webgl_materials_channels",
  },
  Object {
    "name": "webgl_materials_cubemap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_cubemap.jpg",
    },
    "title": "webgl materials cubemap",
    "url": "https://threejs.org/examples/#webgl_materials_cubemap",
  },
  Object {
    "name": "webgl_materials_cubemap_dynamic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_cubemap_dynamic.jpg",
    },
    "title": "webgl materials cubemap dynamic",
    "url": "https://threejs.org/examples/#webgl_materials_cubemap_dynamic",
  },
  Object {
    "name": "webgl_materials_cubemap_refraction",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_cubemap_refraction.jpg",
    },
    "title": "webgl materials cubemap refraction",
    "url": "https://threejs.org/examples/#webgl_materials_cubemap_refraction",
  },
  Object {
    "name": "webgl_materials_cubemap_mipmaps",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_cubemap_mipmaps.jpg",
    },
    "title": "webgl materials cubemap mipmaps",
    "url": "https://threejs.org/examples/#webgl_materials_cubemap_mipmaps",
  },
  Object {
    "name": "webgl_materials_curvature",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_curvature.jpg",
    },
    "title": "webgl materials curvature",
    "url": "https://threejs.org/examples/#webgl_materials_curvature",
  },
  Object {
    "name": "webgl_materials_displacementmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_displacementmap.jpg",
    },
    "title": "webgl materials displacementmap",
    "url": "https://threejs.org/examples/#webgl_materials_displacementmap",
  },
  Object {
    "name": "webgl_materials_envmaps",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_envmaps.jpg",
    },
    "title": "webgl materials envmaps",
    "url": "https://threejs.org/examples/#webgl_materials_envmaps",
  },
  Object {
    "name": "webgl_materials_envmaps_exr",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_envmaps_exr.jpg",
    },
    "title": "webgl materials envmaps exr",
    "url": "https://threejs.org/examples/#webgl_materials_envmaps_exr",
  },
  Object {
    "name": "webgl_materials_envmaps_hdr",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_envmaps_hdr.jpg",
    },
    "title": "webgl materials envmaps hdr",
    "url": "https://threejs.org/examples/#webgl_materials_envmaps_hdr",
  },
  Object {
    "name": "webgl_materials_envmaps_parallax",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_envmaps_parallax.jpg",
    },
    "title": "webgl materials envmaps parallax",
    "url": "https://threejs.org/examples/#webgl_materials_envmaps_parallax",
  },
  Object {
    "name": "webgl_materials_lightmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_lightmap.jpg",
    },
    "title": "webgl materials lightmap",
    "url": "https://threejs.org/examples/#webgl_materials_lightmap",
  },
  Object {
    "name": "webgl_materials_matcap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_matcap.jpg",
    },
    "title": "webgl materials matcap",
    "url": "https://threejs.org/examples/#webgl_materials_matcap",
  },
  Object {
    "name": "webgl_materials_normalmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_normalmap.jpg",
    },
    "title": "webgl materials normalmap",
    "url": "https://threejs.org/examples/#webgl_materials_normalmap",
  },
  Object {
    "name": "webgl_materials_normalmap_object_space",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_normalmap_object_space.jpg",
    },
    "title": "webgl materials normalmap object space",
    "url": "https://threejs.org/examples/#webgl_materials_normalmap_object_space",
  },
  Object {
    "name": "webgl_materials_parallaxmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_parallaxmap.jpg",
    },
    "title": "webgl materials parallaxmap",
    "url": "https://threejs.org/examples/#webgl_materials_parallaxmap",
  },
  Object {
    "name": "webgl_materials_physical_clearcoat",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_physical_clearcoat.jpg",
    },
    "title": "webgl materials physical clearcoat",
    "url": "https://threejs.org/examples/#webgl_materials_physical_clearcoat",
  },
  Object {
    "name": "webgl_materials_physical_reflectivity",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_physical_reflectivity.jpg",
    },
    "title": "webgl materials physical reflectivity",
    "url": "https://threejs.org/examples/#webgl_materials_physical_reflectivity",
  },
  Object {
    "name": "webgl_materials_physical_sheen",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_physical_sheen.jpg",
    },
    "title": "webgl materials physical sheen",
    "url": "https://threejs.org/examples/#webgl_materials_physical_sheen",
  },
  Object {
    "name": "webgl_materials_physical_transmission",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_physical_transmission.jpg",
    },
    "title": "webgl materials physical transmission",
    "url": "https://threejs.org/examples/#webgl_materials_physical_transmission",
  },
  Object {
    "name": "webgl_materials_shaders_fresnel",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_shaders_fresnel.jpg",
    },
    "title": "webgl materials shaders fresnel",
    "url": "https://threejs.org/examples/#webgl_materials_shaders_fresnel",
  },
  Object {
    "name": "webgl_materials_standard",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_standard.jpg",
    },
    "title": "webgl materials standard",
    "url": "https://threejs.org/examples/#webgl_materials_standard",
  },
  Object {
    "name": "webgl_materials_subsurface_scattering",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_subsurface_scattering.jpg",
    },
    "title": "webgl materials subsurface scattering",
    "url": "https://threejs.org/examples/#webgl_materials_subsurface_scattering",
  },
  Object {
    "name": "webgl_materials_texture_anisotropy",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_texture_anisotropy.jpg",
    },
    "title": "webgl materials texture anisotropy",
    "url": "https://threejs.org/examples/#webgl_materials_texture_anisotropy",
  },
  Object {
    "name": "webgl_materials_texture_canvas",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_texture_canvas.jpg",
    },
    "title": "webgl materials texture canvas",
    "url": "https://threejs.org/examples/#webgl_materials_texture_canvas",
  },
  Object {
    "name": "webgl_materials_texture_filters",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_texture_filters.jpg",
    },
    "title": "webgl materials texture filters",
    "url": "https://threejs.org/examples/#webgl_materials_texture_filters",
  },
  Object {
    "name": "webgl_materials_texture_manualmipmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_texture_manualmipmap.jpg",
    },
    "title": "webgl materials texture manualmipmap",
    "url": "https://threejs.org/examples/#webgl_materials_texture_manualmipmap",
  },
  Object {
    "name": "webgl_materials_texture_partialupdate",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_texture_partialupdate.jpg",
    },
    "title": "webgl materials texture partialupdate",
    "url": "https://threejs.org/examples/#webgl_materials_texture_partialupdate",
  },
  Object {
    "name": "webgl_materials_texture_rotation",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_texture_rotation.jpg",
    },
    "title": "webgl materials texture rotation",
    "url": "https://threejs.org/examples/#webgl_materials_texture_rotation",
  },
  Object {
    "name": "webgl_materials_variations_basic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_variations_basic.jpg",
    },
    "title": "webgl materials variations basic",
    "url": "https://threejs.org/examples/#webgl_materials_variations_basic",
  },
  Object {
    "name": "webgl_materials_variations_lambert",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_variations_lambert.jpg",
    },
    "title": "webgl materials variations lambert",
    "url": "https://threejs.org/examples/#webgl_materials_variations_lambert",
  },
  Object {
    "name": "webgl_materials_variations_phong",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_variations_phong.jpg",
    },
    "title": "webgl materials variations phong",
    "url": "https://threejs.org/examples/#webgl_materials_variations_phong",
  },
  Object {
    "name": "webgl_materials_variations_standard",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_variations_standard.jpg",
    },
    "title": "webgl materials variations standard",
    "url": "https://threejs.org/examples/#webgl_materials_variations_standard",
  },
  Object {
    "name": "webgl_materials_variations_physical",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_variations_physical.jpg",
    },
    "title": "webgl materials variations physical",
    "url": "https://threejs.org/examples/#webgl_materials_variations_physical",
  },
  Object {
    "name": "webgl_materials_variations_toon",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_variations_toon.jpg",
    },
    "title": "webgl materials variations toon",
    "url": "https://threejs.org/examples/#webgl_materials_variations_toon",
  },
  Object {
    "name": "webgl_materials_video",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_video.jpg",
    },
    "title": "webgl materials video",
    "url": "https://threejs.org/examples/#webgl_materials_video",
  },
  Object {
    "name": "webgl_materials_video_webcam",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_video_webcam.jpg",
    },
    "title": "webgl materials video webcam",
    "url": "https://threejs.org/examples/#webgl_materials_video_webcam",
  },
  Object {
    "name": "webgl_materials_wireframe",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_wireframe.jpg",
    },
    "title": "webgl materials wireframe",
    "url": "https://threejs.org/examples/#webgl_materials_wireframe",
  },
  Object {
    "name": "webgl_math_obb",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_math_obb.jpg",
    },
    "title": "webgl math obb",
    "url": "https://threejs.org/examples/#webgl_math_obb",
  },
  Object {
    "name": "webgl_math_orientation_transform",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_math_orientation_transform.jpg",
    },
    "title": "webgl math orientation transform",
    "url": "https://threejs.org/examples/#webgl_math_orientation_transform",
  },
  Object {
    "name": "webgl_mirror",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_mirror.jpg",
    },
    "title": "webgl mirror",
    "url": "https://threejs.org/examples/#webgl_mirror",
  },
  Object {
    "name": "webgl_modifier_curve",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_modifier_curve.jpg",
    },
    "title": "webgl modifier curve",
    "url": "https://threejs.org/examples/#webgl_modifier_curve",
  },
  Object {
    "name": "webgl_modifier_curve_instanced",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_modifier_curve_instanced.jpg",
    },
    "title": "webgl modifier curve instanced",
    "url": "https://threejs.org/examples/#webgl_modifier_curve_instanced",
  },
  Object {
    "name": "webgl_modifier_edgesplit",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_modifier_edgesplit.jpg",
    },
    "title": "webgl modifier edgesplit",
    "url": "https://threejs.org/examples/#webgl_modifier_edgesplit",
  },
  Object {
    "name": "webgl_modifier_simplifier",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_modifier_simplifier.jpg",
    },
    "title": "webgl modifier simplifier",
    "url": "https://threejs.org/examples/#webgl_modifier_simplifier",
  },
  Object {
    "name": "webgl_modifier_tessellation",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_modifier_tessellation.jpg",
    },
    "title": "webgl modifier tessellation",
    "url": "https://threejs.org/examples/#webgl_modifier_tessellation",
  },
  Object {
    "name": "webgl_morphtargets",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_morphtargets.jpg",
    },
    "title": "webgl morphtargets",
    "url": "https://threejs.org/examples/#webgl_morphtargets",
  },
  Object {
    "name": "webgl_morphtargets_horse",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_morphtargets_horse.jpg",
    },
    "title": "webgl morphtargets horse",
    "url": "https://threejs.org/examples/#webgl_morphtargets_horse",
  },
  Object {
    "name": "webgl_morphtargets_sphere",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_morphtargets_sphere.jpg",
    },
    "title": "webgl morphtargets sphere",
    "url": "https://threejs.org/examples/#webgl_morphtargets_sphere",
  },
  Object {
    "name": "webgl_multiple_canvases_circle",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_canvases_circle.jpg",
    },
    "title": "webgl multiple canvases circle",
    "url": "https://threejs.org/examples/#webgl_multiple_canvases_circle",
  },
  Object {
    "name": "webgl_multiple_canvases_complex",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_canvases_complex.jpg",
    },
    "title": "webgl multiple canvases complex",
    "url": "https://threejs.org/examples/#webgl_multiple_canvases_complex",
  },
  Object {
    "name": "webgl_multiple_canvases_grid",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_canvases_grid.jpg",
    },
    "title": "webgl multiple canvases grid",
    "url": "https://threejs.org/examples/#webgl_multiple_canvases_grid",
  },
  Object {
    "name": "webgl_multiple_elements",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_elements.jpg",
    },
    "title": "webgl multiple elements",
    "url": "https://threejs.org/examples/#webgl_multiple_elements",
  },
  Object {
    "name": "webgl_multiple_elements_text",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_elements_text.jpg",
    },
    "title": "webgl multiple elements text",
    "url": "https://threejs.org/examples/#webgl_multiple_elements_text",
  },
  Object {
    "name": "webgl_multiple_renderers",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_renderers.jpg",
    },
    "title": "webgl multiple renderers",
    "url": "https://threejs.org/examples/#webgl_multiple_renderers",
  },
  Object {
    "name": "webgl_multiple_scenes_comparison",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_scenes_comparison.jpg",
    },
    "title": "webgl multiple scenes comparison",
    "url": "https://threejs.org/examples/#webgl_multiple_scenes_comparison",
  },
  Object {
    "name": "webgl_multiple_views",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_multiple_views.jpg",
    },
    "title": "webgl multiple views",
    "url": "https://threejs.org/examples/#webgl_multiple_views",
  },
  Object {
    "name": "webgl_panorama_cube",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_panorama_cube.jpg",
    },
    "title": "webgl panorama cube",
    "url": "https://threejs.org/examples/#webgl_panorama_cube",
  },
  Object {
    "name": "webgl_panorama_equirectangular",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_panorama_equirectangular.jpg",
    },
    "title": "webgl panorama equirectangular",
    "url": "https://threejs.org/examples/#webgl_panorama_equirectangular",
  },
  Object {
    "name": "webgl_performance",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_performance.jpg",
    },
    "title": "webgl performance",
    "url": "https://threejs.org/examples/#webgl_performance",
  },
  Object {
    "name": "webgl_performance_static",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_performance_static.jpg",
    },
    "title": "webgl performance static",
    "url": "https://threejs.org/examples/#webgl_performance_static",
  },
  Object {
    "name": "webgl_points_billboards",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_points_billboards.jpg",
    },
    "title": "webgl points billboards",
    "url": "https://threejs.org/examples/#webgl_points_billboards",
  },
  Object {
    "name": "webgl_points_dynamic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_points_dynamic.jpg",
    },
    "title": "webgl points dynamic",
    "url": "https://threejs.org/examples/#webgl_points_dynamic",
  },
  Object {
    "name": "webgl_points_sprites",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_points_sprites.jpg",
    },
    "title": "webgl points sprites",
    "url": "https://threejs.org/examples/#webgl_points_sprites",
  },
  Object {
    "name": "webgl_points_waves",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_points_waves.jpg",
    },
    "title": "webgl points waves",
    "url": "https://threejs.org/examples/#webgl_points_waves",
  },
  Object {
    "name": "webgl_raycast_sprite",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_raycast_sprite.jpg",
    },
    "title": "webgl raycast sprite",
    "url": "https://threejs.org/examples/#webgl_raycast_sprite",
  },
  Object {
    "name": "webgl_raycast_texture",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_raycast_texture.jpg",
    },
    "title": "webgl raycast texture",
    "url": "https://threejs.org/examples/#webgl_raycast_texture",
  },
  Object {
    "name": "webgl_read_float_buffer",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_read_float_buffer.jpg",
    },
    "title": "webgl read float buffer",
    "url": "https://threejs.org/examples/#webgl_read_float_buffer",
  },
  Object {
    "name": "webgl_refraction",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_refraction.jpg",
    },
    "title": "webgl refraction",
    "url": "https://threejs.org/examples/#webgl_refraction",
  },
  Object {
    "name": "webgl_rtt",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_rtt.jpg",
    },
    "title": "webgl rtt",
    "url": "https://threejs.org/examples/#webgl_rtt",
  },
  Object {
    "name": "webgl_shader",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shader.jpg",
    },
    "title": "webgl shader",
    "url": "https://threejs.org/examples/#webgl_shader",
  },
  Object {
    "name": "webgl_shader_lava",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shader_lava.jpg",
    },
    "title": "webgl shader lava",
    "url": "https://threejs.org/examples/#webgl_shader_lava",
  },
  Object {
    "name": "webgl_shader2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shader2.jpg",
    },
    "title": "webgl shader2",
    "url": "https://threejs.org/examples/#webgl_shader2",
  },
  Object {
    "name": "webgl_shaders_ocean",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shaders_ocean.jpg",
    },
    "title": "webgl shaders ocean",
    "url": "https://threejs.org/examples/#webgl_shaders_ocean",
  },
  Object {
    "name": "webgl_shaders_sky",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shaders_sky.jpg",
    },
    "title": "webgl shaders sky",
    "url": "https://threejs.org/examples/#webgl_shaders_sky",
  },
  Object {
    "name": "webgl_shaders_tonemapping",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shaders_tonemapping.jpg",
    },
    "title": "webgl shaders tonemapping",
    "url": "https://threejs.org/examples/#webgl_shaders_tonemapping",
  },
  Object {
    "name": "webgl_shading_physical",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shading_physical.jpg",
    },
    "title": "webgl shading physical",
    "url": "https://threejs.org/examples/#webgl_shading_physical",
  },
  Object {
    "name": "webgl_shadow_contact",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadow_contact.jpg",
    },
    "title": "webgl shadow contact",
    "url": "https://threejs.org/examples/#webgl_shadow_contact",
  },
  Object {
    "name": "webgl_shadowmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap.jpg",
    },
    "title": "webgl shadowmap",
    "url": "https://threejs.org/examples/#webgl_shadowmap",
  },
  Object {
    "name": "webgl_shadowmap_performance",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_performance.jpg",
    },
    "title": "webgl shadowmap performance",
    "url": "https://threejs.org/examples/#webgl_shadowmap_performance",
  },
  Object {
    "name": "webgl_shadowmap_pointlight",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_pointlight.jpg",
    },
    "title": "webgl shadowmap pointlight",
    "url": "https://threejs.org/examples/#webgl_shadowmap_pointlight",
  },
  Object {
    "name": "webgl_shadowmap_viewer",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_viewer.jpg",
    },
    "title": "webgl shadowmap viewer",
    "url": "https://threejs.org/examples/#webgl_shadowmap_viewer",
  },
  Object {
    "name": "webgl_shadowmap_vsm",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_vsm.jpg",
    },
    "title": "webgl shadowmap vsm",
    "url": "https://threejs.org/examples/#webgl_shadowmap_vsm",
  },
  Object {
    "name": "webgl_shadowmesh",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmesh.jpg",
    },
    "title": "webgl shadowmesh",
    "url": "https://threejs.org/examples/#webgl_shadowmesh",
  },
  Object {
    "name": "webgl_skinning_simple",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_skinning_simple.jpg",
    },
    "title": "webgl skinning simple",
    "url": "https://threejs.org/examples/#webgl_skinning_simple",
  },
  Object {
    "name": "webgl_sprites",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_sprites.jpg",
    },
    "title": "webgl sprites",
    "url": "https://threejs.org/examples/#webgl_sprites",
  },
  Object {
    "name": "webgl_test_memory",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_test_memory.jpg",
    },
    "title": "webgl test memory",
    "url": "https://threejs.org/examples/#webgl_test_memory",
  },
  Object {
    "name": "webgl_test_memory2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_test_memory2.jpg",
    },
    "title": "webgl test memory2",
    "url": "https://threejs.org/examples/#webgl_test_memory2",
  },
  Object {
    "name": "webgl_tonemapping",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_tonemapping.jpg",
    },
    "title": "webgl tonemapping",
    "url": "https://threejs.org/examples/#webgl_tonemapping",
  },
  Object {
    "name": "webgl_trails",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_trails.jpg",
    },
    "title": "webgl trails",
    "url": "https://threejs.org/examples/#webgl_trails",
  },
  Object {
    "name": "webgl_video_kinect",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_video_kinect.jpg",
    },
    "title": "webgl video kinect",
    "url": "https://threejs.org/examples/#webgl_video_kinect",
  },
  Object {
    "name": "webgl_video_panorama_equirectangular",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_video_panorama_equirectangular.jpg",
    },
    "title": "webgl video panorama equirectangular",
    "url": "https://threejs.org/examples/#webgl_video_panorama_equirectangular",
  },
  Object {
    "name": "webgl_water",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_water.jpg",
    },
    "title": "webgl water",
    "url": "https://threejs.org/examples/#webgl_water",
  },
  Object {
    "name": "webgl_water_flowmap",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_water_flowmap.jpg",
    },
    "title": "webgl water flowmap",
    "url": "https://threejs.org/examples/#webgl_water_flowmap",
  },
  Object {
    "name": "webgl_loader_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_loader_nodes.jpg",
    },
    "title": "webgl loader nodes",
    "url": "https://threejs.org/examples/#webgl_loader_nodes",
  },
  Object {
    "name": "webgl_materials_compile",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_compile.jpg",
    },
    "title": "webgl materials compile",
    "url": "https://threejs.org/examples/#webgl_materials_compile",
  },
  Object {
    "name": "webgl_materials_envmaps_hdr_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_envmaps_hdr_nodes.jpg",
    },
    "title": "webgl materials envmaps hdr nodes",
    "url": "https://threejs.org/examples/#webgl_materials_envmaps_hdr_nodes",
  },
  Object {
    "name": "webgl_materials_envmaps_pmrem_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_envmaps_pmrem_nodes.jpg",
    },
    "title": "webgl materials envmaps pmrem nodes",
    "url": "https://threejs.org/examples/#webgl_materials_envmaps_pmrem_nodes",
  },
  Object {
    "name": "webgl_materials_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_nodes.jpg",
    },
    "title": "webgl materials nodes",
    "url": "https://threejs.org/examples/#webgl_materials_nodes",
  },
  Object {
    "name": "webgl_materials_standard_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_standard_nodes.jpg",
    },
    "title": "webgl materials standard nodes",
    "url": "https://threejs.org/examples/#webgl_materials_standard_nodes",
  },
  Object {
    "name": "webgl_mirror_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_mirror_nodes.jpg",
    },
    "title": "webgl mirror nodes",
    "url": "https://threejs.org/examples/#webgl_mirror_nodes",
  },
  Object {
    "name": "webgl_performance_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_performance_nodes.jpg",
    },
    "title": "webgl performance nodes",
    "url": "https://threejs.org/examples/#webgl_performance_nodes",
  },
  Object {
    "name": "webgl_postprocessing_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_nodes.jpg",
    },
    "title": "webgl postprocessing nodes",
    "url": "https://threejs.org/examples/#webgl_postprocessing_nodes",
  },
  Object {
    "name": "webgl_postprocessing_nodes_pass",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_nodes_pass.jpg",
    },
    "title": "webgl postprocessing nodes pass",
    "url": "https://threejs.org/examples/#webgl_postprocessing_nodes_pass",
  },
  Object {
    "name": "webgl_sprites_nodes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_sprites_nodes.jpg",
    },
    "title": "webgl sprites nodes",
    "url": "https://threejs.org/examples/#webgl_sprites_nodes",
  },
  Object {
    "name": "webgl_postprocessing",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing.jpg",
    },
    "title": "webgl postprocessing",
    "url": "https://threejs.org/examples/#webgl_postprocessing",
  },
  Object {
    "name": "webgl_postprocessing_3dlut",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_3dlut.jpg",
    },
    "title": "webgl postprocessing 3dlut",
    "url": "https://threejs.org/examples/#webgl_postprocessing_3dlut",
  },
  Object {
    "name": "webgl_postprocessing_advanced",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_advanced.jpg",
    },
    "title": "webgl postprocessing advanced",
    "url": "https://threejs.org/examples/#webgl_postprocessing_advanced",
  },
  Object {
    "name": "webgl_postprocessing_afterimage",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_afterimage.jpg",
    },
    "title": "webgl postprocessing afterimage",
    "url": "https://threejs.org/examples/#webgl_postprocessing_afterimage",
  },
  Object {
    "name": "webgl_postprocessing_backgrounds",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_backgrounds.jpg",
    },
    "title": "webgl postprocessing backgrounds",
    "url": "https://threejs.org/examples/#webgl_postprocessing_backgrounds",
  },
  Object {
    "name": "webgl_postprocessing_crossfade",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_crossfade.jpg",
    },
    "title": "webgl postprocessing crossfade",
    "url": "https://threejs.org/examples/#webgl_postprocessing_crossfade",
  },
  Object {
    "name": "webgl_postprocessing_dof",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_dof.jpg",
    },
    "title": "webgl postprocessing dof",
    "url": "https://threejs.org/examples/#webgl_postprocessing_dof",
  },
  Object {
    "name": "webgl_postprocessing_dof2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_dof2.jpg",
    },
    "title": "webgl postprocessing dof2",
    "url": "https://threejs.org/examples/#webgl_postprocessing_dof2",
  },
  Object {
    "name": "webgl_postprocessing_fxaa",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_fxaa.jpg",
    },
    "title": "webgl postprocessing fxaa",
    "url": "https://threejs.org/examples/#webgl_postprocessing_fxaa",
  },
  Object {
    "name": "webgl_postprocessing_glitch",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_glitch.jpg",
    },
    "title": "webgl postprocessing glitch",
    "url": "https://threejs.org/examples/#webgl_postprocessing_glitch",
  },
  Object {
    "name": "webgl_postprocessing_godrays",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_godrays.jpg",
    },
    "title": "webgl postprocessing godrays",
    "url": "https://threejs.org/examples/#webgl_postprocessing_godrays",
  },
  Object {
    "name": "webgl_postprocessing_rgb_halftone",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_rgb_halftone.jpg",
    },
    "title": "webgl postprocessing rgb halftone",
    "url": "https://threejs.org/examples/#webgl_postprocessing_rgb_halftone",
  },
  Object {
    "name": "webgl_postprocessing_masking",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_masking.jpg",
    },
    "title": "webgl postprocessing masking",
    "url": "https://threejs.org/examples/#webgl_postprocessing_masking",
  },
  Object {
    "name": "webgl_postprocessing_ssaa",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_ssaa.jpg",
    },
    "title": "webgl postprocessing ssaa",
    "url": "https://threejs.org/examples/#webgl_postprocessing_ssaa",
  },
  Object {
    "name": "webgl_postprocessing_outline",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_outline.jpg",
    },
    "title": "webgl postprocessing outline",
    "url": "https://threejs.org/examples/#webgl_postprocessing_outline",
  },
  Object {
    "name": "webgl_postprocessing_pixel",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_pixel.jpg",
    },
    "title": "webgl postprocessing pixel",
    "url": "https://threejs.org/examples/#webgl_postprocessing_pixel",
  },
  Object {
    "name": "webgl_postprocessing_procedural",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_procedural.jpg",
    },
    "title": "webgl postprocessing procedural",
    "url": "https://threejs.org/examples/#webgl_postprocessing_procedural",
  },
  Object {
    "name": "webgl_postprocessing_sao",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_sao.jpg",
    },
    "title": "webgl postprocessing sao",
    "url": "https://threejs.org/examples/#webgl_postprocessing_sao",
  },
  Object {
    "name": "webgl_postprocessing_smaa",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_smaa.jpg",
    },
    "title": "webgl postprocessing smaa",
    "url": "https://threejs.org/examples/#webgl_postprocessing_smaa",
  },
  Object {
    "name": "webgl_postprocessing_sobel",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_sobel.jpg",
    },
    "title": "webgl postprocessing sobel",
    "url": "https://threejs.org/examples/#webgl_postprocessing_sobel",
  },
  Object {
    "name": "webgl_postprocessing_ssao",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_ssao.jpg",
    },
    "title": "webgl postprocessing ssao",
    "url": "https://threejs.org/examples/#webgl_postprocessing_ssao",
  },
  Object {
    "name": "webgl_postprocessing_ssr",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_ssr.jpg",
    },
    "title": "webgl postprocessing ssr",
    "url": "https://threejs.org/examples/#webgl_postprocessing_ssr",
  },
  Object {
    "name": "webgl_postprocessing_ssrr",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_ssrr.jpg",
    },
    "title": "webgl postprocessing ssrr",
    "url": "https://threejs.org/examples/#webgl_postprocessing_ssrr",
  },
  Object {
    "name": "webgl_postprocessing_taa",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_taa.jpg",
    },
    "title": "webgl postprocessing taa",
    "url": "https://threejs.org/examples/#webgl_postprocessing_taa",
  },
  Object {
    "name": "webgl_postprocessing_unreal_bloom",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_unreal_bloom.jpg",
    },
    "title": "webgl postprocessing unreal bloom",
    "url": "https://threejs.org/examples/#webgl_postprocessing_unreal_bloom",
  },
  Object {
    "name": "webgl_postprocessing_unreal_bloom_selective",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_postprocessing_unreal_bloom_selective.jpg",
    },
    "title": "webgl postprocessing unreal bloom selective",
    "url": "https://threejs.org/examples/#webgl_postprocessing_unreal_bloom_selective",
  },
  Object {
    "name": "webgl_buffergeometry",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry.jpg",
    },
    "title": "webgl buffergeometry",
    "url": "https://threejs.org/examples/#webgl_buffergeometry",
  },
  Object {
    "name": "webgl_buffergeometry_compression",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_compression.jpg",
    },
    "title": "webgl buffergeometry compression",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_compression",
  },
  Object {
    "name": "webgl_buffergeometry_custom_attributes_particles",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_custom_attributes_particles.jpg",
    },
    "title": "webgl buffergeometry custom attributes particles",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_custom_attributes_particles",
  },
  Object {
    "name": "webgl_buffergeometry_drawrange",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_drawrange.jpg",
    },
    "title": "webgl buffergeometry drawrange",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_drawrange",
  },
  Object {
    "name": "webgl_buffergeometry_glbufferattribute",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_glbufferattribute.jpg",
    },
    "title": "webgl buffergeometry glbufferattribute",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_glbufferattribute",
  },
  Object {
    "name": "webgl_buffergeometry_indexed",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_indexed.jpg",
    },
    "title": "webgl buffergeometry indexed",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_indexed",
  },
  Object {
    "name": "webgl_buffergeometry_instancing",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_instancing.jpg",
    },
    "title": "webgl buffergeometry instancing",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_instancing",
  },
  Object {
    "name": "webgl_buffergeometry_instancing_billboards",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_instancing_billboards.jpg",
    },
    "title": "webgl buffergeometry instancing billboards",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_instancing_billboards",
  },
  Object {
    "name": "webgl_buffergeometry_instancing_interleaved",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_instancing_interleaved.jpg",
    },
    "title": "webgl buffergeometry instancing interleaved",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_instancing_interleaved",
  },
  Object {
    "name": "webgl_buffergeometry_lines",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_lines.jpg",
    },
    "title": "webgl buffergeometry lines",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_lines",
  },
  Object {
    "name": "webgl_buffergeometry_lines_indexed",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_lines_indexed.jpg",
    },
    "title": "webgl buffergeometry lines indexed",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_lines_indexed",
  },
  Object {
    "name": "webgl_buffergeometry_points",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_points.jpg",
    },
    "title": "webgl buffergeometry points",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_points",
  },
  Object {
    "name": "webgl_buffergeometry_points_interleaved",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_points_interleaved.jpg",
    },
    "title": "webgl buffergeometry points interleaved",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_points_interleaved",
  },
  Object {
    "name": "webgl_buffergeometry_rawshader",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_rawshader.jpg",
    },
    "title": "webgl buffergeometry rawshader",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_rawshader",
  },
  Object {
    "name": "webgl_buffergeometry_selective_draw",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_selective_draw.jpg",
    },
    "title": "webgl buffergeometry selective draw",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_selective_draw",
  },
  Object {
    "name": "webgl_buffergeometry_uint",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_buffergeometry_uint.jpg",
    },
    "title": "webgl buffergeometry uint",
    "url": "https://threejs.org/examples/#webgl_buffergeometry_uint",
  },
  Object {
    "name": "webgl_custom_attributes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_custom_attributes.jpg",
    },
    "title": "webgl custom attributes",
    "url": "https://threejs.org/examples/#webgl_custom_attributes",
  },
  Object {
    "name": "webgl_custom_attributes_lines",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_custom_attributes_lines.jpg",
    },
    "title": "webgl custom attributes lines",
    "url": "https://threejs.org/examples/#webgl_custom_attributes_lines",
  },
  Object {
    "name": "webgl_custom_attributes_points",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_custom_attributes_points.jpg",
    },
    "title": "webgl custom attributes points",
    "url": "https://threejs.org/examples/#webgl_custom_attributes_points",
  },
  Object {
    "name": "webgl_custom_attributes_points2",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_custom_attributes_points2.jpg",
    },
    "title": "webgl custom attributes points2",
    "url": "https://threejs.org/examples/#webgl_custom_attributes_points2",
  },
  Object {
    "name": "webgl_custom_attributes_points3",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_custom_attributes_points3.jpg",
    },
    "title": "webgl custom attributes points3",
    "url": "https://threejs.org/examples/#webgl_custom_attributes_points3",
  },
  Object {
    "name": "webgl_gpgpu_birds",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_gpgpu_birds.jpg",
    },
    "title": "webgl gpgpu birds",
    "url": "https://threejs.org/examples/#webgl_gpgpu_birds",
  },
  Object {
    "name": "webgl_gpgpu_birds_gltf",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_gpgpu_birds_gltf.jpg",
    },
    "title": "webgl gpgpu birds gltf",
    "url": "https://threejs.org/examples/#webgl_gpgpu_birds_gltf",
  },
  Object {
    "name": "webgl_gpgpu_water",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_gpgpu_water.jpg",
    },
    "title": "webgl gpgpu water",
    "url": "https://threejs.org/examples/#webgl_gpgpu_water",
  },
  Object {
    "name": "webgl_gpgpu_protoplanet",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_gpgpu_protoplanet.jpg",
    },
    "title": "webgl gpgpu protoplanet",
    "url": "https://threejs.org/examples/#webgl_gpgpu_protoplanet",
  },
  Object {
    "name": "webgl_instancing_modified",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_instancing_modified.jpg",
    },
    "title": "webgl instancing modified",
    "url": "https://threejs.org/examples/#webgl_instancing_modified",
  },
  Object {
    "name": "webgl_lightningstrike",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_lightningstrike.jpg",
    },
    "title": "webgl lightningstrike",
    "url": "https://threejs.org/examples/#webgl_lightningstrike",
  },
  Object {
    "name": "webgl_materials_modified",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_materials_modified.jpg",
    },
    "title": "webgl materials modified",
    "url": "https://threejs.org/examples/#webgl_materials_modified",
  },
  Object {
    "name": "webgl_raymarching_reflect",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_raymarching_reflect.jpg",
    },
    "title": "webgl raymarching reflect",
    "url": "https://threejs.org/examples/#webgl_raymarching_reflect",
  },
  Object {
    "name": "webgl_shadowmap_csm",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_csm.jpg",
    },
    "title": "webgl shadowmap csm",
    "url": "https://threejs.org/examples/#webgl_shadowmap_csm",
  },
  Object {
    "name": "webgl_shadowmap_pcss",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_pcss.jpg",
    },
    "title": "webgl shadowmap pcss",
    "url": "https://threejs.org/examples/#webgl_shadowmap_pcss",
  },
  Object {
    "name": "webgl_shadowmap_progressive",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_shadowmap_progressive.jpg",
    },
    "title": "webgl shadowmap progressive",
    "url": "https://threejs.org/examples/#webgl_shadowmap_progressive",
  },
  Object {
    "name": "webgl_simple_gi",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_simple_gi.jpg",
    },
    "title": "webgl simple gi",
    "url": "https://threejs.org/examples/#webgl_simple_gi",
  },
  Object {
    "name": "webgl_tiled_forward",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_tiled_forward.jpg",
    },
    "title": "webgl tiled forward",
    "url": "https://threejs.org/examples/#webgl_tiled_forward",
  },
  Object {
    "name": "webgl_worker_offscreencanvas",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_worker_offscreencanvas.jpg",
    },
    "title": "webgl worker offscreencanvas",
    "url": "https://threejs.org/examples/#webgl_worker_offscreencanvas",
  },
  Object {
    "name": "webgl2_buffergeometry_attributes_integer",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_buffergeometry_attributes_integer.jpg",
    },
    "title": "webgl2 buffergeometry attributes integer",
    "url": "https://threejs.org/examples/#webgl2_buffergeometry_attributes_integer",
  },
  Object {
    "name": "webgl2_materials_texture2darray",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_materials_texture2darray.jpg",
    },
    "title": "webgl2 materials texture2darray",
    "url": "https://threejs.org/examples/#webgl2_materials_texture2darray",
  },
  Object {
    "name": "webgl2_materials_texture3d",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_materials_texture3d.jpg",
    },
    "title": "webgl2 materials texture3d",
    "url": "https://threejs.org/examples/#webgl2_materials_texture3d",
  },
  Object {
    "name": "webgl2_materials_texture3d_partialupdate",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_materials_texture3d_partialupdate.jpg",
    },
    "title": "webgl2 materials texture3d partialupdate",
    "url": "https://threejs.org/examples/#webgl2_materials_texture3d_partialupdate",
  },
  Object {
    "name": "webgl2_multisampled_renderbuffers",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_multisampled_renderbuffers.jpg",
    },
    "title": "webgl2 multisampled renderbuffers",
    "url": "https://threejs.org/examples/#webgl2_multisampled_renderbuffers",
  },
  Object {
    "name": "webgl2_rendertarget_texture2darray",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_rendertarget_texture2darray.jpg",
    },
    "title": "webgl2 rendertarget texture2darray",
    "url": "https://threejs.org/examples/#webgl2_rendertarget_texture2darray",
  },
  Object {
    "name": "webgl2_volume_cloud",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_volume_cloud.jpg",
    },
    "title": "webgl2 volume cloud",
    "url": "https://threejs.org/examples/#webgl2_volume_cloud",
  },
  Object {
    "name": "webgl2_volume_instancing",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_volume_instancing.jpg",
    },
    "title": "webgl2 volume instancing",
    "url": "https://threejs.org/examples/#webgl2_volume_instancing",
  },
  Object {
    "name": "webgl2_volume_perlin",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl2_volume_perlin.jpg",
    },
    "title": "webgl2 volume perlin",
    "url": "https://threejs.org/examples/#webgl2_volume_perlin",
  },
  Object {
    "name": "webgpu_compute",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgpu_compute.jpg",
    },
    "title": "webgpu compute",
    "url": "https://threejs.org/examples/#webgpu_compute",
  },
  Object {
    "name": "webgpu_instance_uniform",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgpu_instance_uniform.jpg",
    },
    "title": "webgpu instance uniform",
    "url": "https://threejs.org/examples/#webgpu_instance_uniform",
  },
  Object {
    "name": "webgpu_lights_selective",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgpu_lights_selective.jpg",
    },
    "title": "webgpu lights selective",
    "url": "https://threejs.org/examples/#webgpu_lights_selective",
  },
  Object {
    "name": "webgpu_materials",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgpu_materials.jpg",
    },
    "title": "webgpu materials",
    "url": "https://threejs.org/examples/#webgpu_materials",
  },
  Object {
    "name": "webgpu_rtt",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgpu_rtt.jpg",
    },
    "title": "webgpu rtt",
    "url": "https://threejs.org/examples/#webgpu_rtt",
  },
  Object {
    "name": "webgpu_sandbox",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgpu_sandbox.jpg",
    },
    "title": "webgpu sandbox",
    "url": "https://threejs.org/examples/#webgpu_sandbox",
  },
  Object {
    "name": "webaudio_orientation",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webaudio_orientation.jpg",
    },
    "title": "webaudio orientation",
    "url": "https://threejs.org/examples/#webaudio_orientation",
  },
  Object {
    "name": "webaudio_sandbox",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webaudio_sandbox.jpg",
    },
    "title": "webaudio sandbox",
    "url": "https://threejs.org/examples/#webaudio_sandbox",
  },
  Object {
    "name": "webaudio_timing",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webaudio_timing.jpg",
    },
    "title": "webaudio timing",
    "url": "https://threejs.org/examples/#webaudio_timing",
  },
  Object {
    "name": "webaudio_visualizer",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webaudio_visualizer.jpg",
    },
    "title": "webaudio visualizer",
    "url": "https://threejs.org/examples/#webaudio_visualizer",
  },
  Object {
    "name": "webxr_ar_cones",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_ar_cones.jpg",
    },
    "title": "webxr ar cones",
    "url": "https://threejs.org/examples/#webxr_ar_cones",
  },
  Object {
    "name": "webxr_ar_hittest",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_ar_hittest.jpg",
    },
    "title": "webxr ar hittest",
    "url": "https://threejs.org/examples/#webxr_ar_hittest",
  },
  Object {
    "name": "webxr_ar_lighting",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_ar_lighting.jpg",
    },
    "title": "webxr ar lighting",
    "url": "https://threejs.org/examples/#webxr_ar_lighting",
  },
  Object {
    "name": "webxr_ar_paint",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_ar_paint.jpg",
    },
    "title": "webxr ar paint",
    "url": "https://threejs.org/examples/#webxr_ar_paint",
  },
  Object {
    "name": "webxr_vr_ballshooter",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_ballshooter.jpg",
    },
    "title": "webxr vr ballshooter",
    "url": "https://threejs.org/examples/#webxr_vr_ballshooter",
  },
  Object {
    "name": "webxr_vr_cubes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_cubes.jpg",
    },
    "title": "webxr vr cubes",
    "url": "https://threejs.org/examples/#webxr_vr_cubes",
  },
  Object {
    "name": "webxr_vr_dragging",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_dragging.jpg",
    },
    "title": "webxr vr dragging",
    "url": "https://threejs.org/examples/#webxr_vr_dragging",
  },
  Object {
    "name": "webxr_vr_handinput",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_handinput.jpg",
    },
    "title": "webxr vr handinput",
    "url": "https://threejs.org/examples/#webxr_vr_handinput",
  },
  Object {
    "name": "webxr_vr_handinput_cubes",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_handinput_cubes.jpg",
    },
    "title": "webxr vr handinput cubes",
    "url": "https://threejs.org/examples/#webxr_vr_handinput_cubes",
  },
  Object {
    "name": "webxr_vr_handinput_profiles",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_handinput_profiles.jpg",
    },
    "title": "webxr vr handinput profiles",
    "url": "https://threejs.org/examples/#webxr_vr_handinput_profiles",
  },
  Object {
    "name": "webxr_vr_haptics",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_haptics.jpg",
    },
    "title": "webxr vr haptics",
    "url": "https://threejs.org/examples/#webxr_vr_haptics",
  },
  Object {
    "name": "webxr_vr_lorenzattractor",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_lorenzattractor.jpg",
    },
    "title": "webxr vr lorenzattractor",
    "url": "https://threejs.org/examples/#webxr_vr_lorenzattractor",
  },
  Object {
    "name": "webxr_vr_panorama",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_panorama.jpg",
    },
    "title": "webxr vr panorama",
    "url": "https://threejs.org/examples/#webxr_vr_panorama",
  },
  Object {
    "name": "webxr_vr_panorama_depth",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_panorama_depth.jpg",
    },
    "title": "webxr vr panorama depth",
    "url": "https://threejs.org/examples/#webxr_vr_panorama_depth",
  },
  Object {
    "name": "webxr_vr_paint",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_paint.jpg",
    },
    "title": "webxr vr paint",
    "url": "https://threejs.org/examples/#webxr_vr_paint",
  },
  Object {
    "name": "webxr_vr_rollercoaster",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_rollercoaster.jpg",
    },
    "title": "webxr vr rollercoaster",
    "url": "https://threejs.org/examples/#webxr_vr_rollercoaster",
  },
  Object {
    "name": "webxr_vr_sandbox",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_sandbox.jpg",
    },
    "title": "webxr vr sandbox",
    "url": "https://threejs.org/examples/#webxr_vr_sandbox",
  },
  Object {
    "name": "webxr_vr_sculpt",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_sculpt.jpg",
    },
    "title": "webxr vr sculpt",
    "url": "https://threejs.org/examples/#webxr_vr_sculpt",
  },
  Object {
    "name": "webxr_vr_video",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webxr_vr_video.jpg",
    },
    "title": "webxr vr video",
    "url": "https://threejs.org/examples/#webxr_vr_video",
  },
  Object {
    "name": "games_fps",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/games_fps.jpg",
    },
    "title": "games fps",
    "url": "https://threejs.org/examples/#games_fps",
  },
  Object {
    "name": "physics_ammo_break",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/physics_ammo_break.jpg",
    },
    "title": "physics ammo break",
    "url": "https://threejs.org/examples/#physics_ammo_break",
  },
  Object {
    "name": "physics_ammo_cloth",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/physics_ammo_cloth.jpg",
    },
    "title": "physics ammo cloth",
    "url": "https://threejs.org/examples/#physics_ammo_cloth",
  },
  Object {
    "name": "physics_ammo_instancing",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/physics_ammo_instancing.jpg",
    },
    "title": "physics ammo instancing",
    "url": "https://threejs.org/examples/#physics_ammo_instancing",
  },
  Object {
    "name": "physics_ammo_rope",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/physics_ammo_rope.jpg",
    },
    "title": "physics ammo rope",
    "url": "https://threejs.org/examples/#physics_ammo_rope",
  },
  Object {
    "name": "physics_ammo_terrain",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/physics_ammo_terrain.jpg",
    },
    "title": "physics ammo terrain",
    "url": "https://threejs.org/examples/#physics_ammo_terrain",
  },
  Object {
    "name": "physics_ammo_volume",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/physics_ammo_volume.jpg",
    },
    "title": "physics ammo volume",
    "url": "https://threejs.org/examples/#physics_ammo_volume",
  },
  Object {
    "name": "misc_animation_groups",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_animation_groups.jpg",
    },
    "title": "misc animation groups",
    "url": "https://threejs.org/examples/#misc_animation_groups",
  },
  Object {
    "name": "misc_animation_keys",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_animation_keys.jpg",
    },
    "title": "misc animation keys",
    "url": "https://threejs.org/examples/#misc_animation_keys",
  },
  Object {
    "name": "misc_boxselection",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_boxselection.jpg",
    },
    "title": "misc boxselection",
    "url": "https://threejs.org/examples/#misc_boxselection",
  },
  Object {
    "name": "misc_controls_deviceorientation",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_deviceorientation.jpg",
    },
    "title": "misc controls deviceorientation",
    "url": "https://threejs.org/examples/#misc_controls_deviceorientation",
  },
  Object {
    "name": "misc_controls_drag",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_drag.jpg",
    },
    "title": "misc controls drag",
    "url": "https://threejs.org/examples/#misc_controls_drag",
  },
  Object {
    "name": "misc_controls_fly",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_fly.jpg",
    },
    "title": "misc controls fly",
    "url": "https://threejs.org/examples/#misc_controls_fly",
  },
  Object {
    "name": "misc_controls_map",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_map.jpg",
    },
    "title": "misc controls map",
    "url": "https://threejs.org/examples/#misc_controls_map",
  },
  Object {
    "name": "misc_controls_orbit",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_orbit.jpg",
    },
    "title": "misc controls orbit",
    "url": "https://threejs.org/examples/#misc_controls_orbit",
  },
  Object {
    "name": "misc_controls_pointerlock",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_pointerlock.jpg",
    },
    "title": "misc controls pointerlock",
    "url": "https://threejs.org/examples/#misc_controls_pointerlock",
  },
  Object {
    "name": "misc_controls_trackball",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_trackball.jpg",
    },
    "title": "misc controls trackball",
    "url": "https://threejs.org/examples/#misc_controls_trackball",
  },
  Object {
    "name": "misc_controls_transform",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_controls_transform.jpg",
    },
    "title": "misc controls transform",
    "url": "https://threejs.org/examples/#misc_controls_transform",
  },
  Object {
    "name": "misc_exporter_collada",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_collada.jpg",
    },
    "title": "misc exporter collada",
    "url": "https://threejs.org/examples/#misc_exporter_collada",
  },
  Object {
    "name": "misc_exporter_draco",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_draco.jpg",
    },
    "title": "misc exporter draco",
    "url": "https://threejs.org/examples/#misc_exporter_draco",
  },
  Object {
    "name": "misc_exporter_gltf",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_gltf.jpg",
    },
    "title": "misc exporter gltf",
    "url": "https://threejs.org/examples/#misc_exporter_gltf",
  },
  Object {
    "name": "misc_exporter_obj",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_obj.jpg",
    },
    "title": "misc exporter obj",
    "url": "https://threejs.org/examples/#misc_exporter_obj",
  },
  Object {
    "name": "misc_exporter_ply",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_ply.jpg",
    },
    "title": "misc exporter ply",
    "url": "https://threejs.org/examples/#misc_exporter_ply",
  },
  Object {
    "name": "misc_exporter_stl",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_stl.jpg",
    },
    "title": "misc exporter stl",
    "url": "https://threejs.org/examples/#misc_exporter_stl",
  },
  Object {
    "name": "misc_exporter_usdz",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_exporter_usdz.jpg",
    },
    "title": "misc exporter usdz",
    "url": "https://threejs.org/examples/#misc_exporter_usdz",
  },
  Object {
    "name": "misc_lookat",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_lookat.jpg",
    },
    "title": "misc lookat",
    "url": "https://threejs.org/examples/#misc_lookat",
  },
  Object {
    "name": "css2d_label",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css2d_label.jpg",
    },
    "title": "css2d label",
    "url": "https://threejs.org/examples/#css2d_label",
  },
  Object {
    "name": "css3d_molecules",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css3d_molecules.jpg",
    },
    "title": "css3d molecules",
    "url": "https://threejs.org/examples/#css3d_molecules",
  },
  Object {
    "name": "css3d_orthographic",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css3d_orthographic.jpg",
    },
    "title": "css3d orthographic",
    "url": "https://threejs.org/examples/#css3d_orthographic",
  },
  Object {
    "name": "css3d_periodictable",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css3d_periodictable.jpg",
    },
    "title": "css3d periodictable",
    "url": "https://threejs.org/examples/#css3d_periodictable",
  },
  Object {
    "name": "css3d_sandbox",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css3d_sandbox.jpg",
    },
    "title": "css3d sandbox",
    "url": "https://threejs.org/examples/#css3d_sandbox",
  },
  Object {
    "name": "css3d_sprites",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css3d_sprites.jpg",
    },
    "title": "css3d sprites",
    "url": "https://threejs.org/examples/#css3d_sprites",
  },
  Object {
    "name": "css3d_youtube",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/css3d_youtube.jpg",
    },
    "title": "css3d youtube",
    "url": "https://threejs.org/examples/#css3d_youtube",
  },
  Object {
    "name": "svg_lines",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/svg_lines.jpg",
    },
    "title": "svg lines",
    "url": "https://threejs.org/examples/#svg_lines",
  },
  Object {
    "name": "svg_sandbox",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/svg_sandbox.jpg",
    },
    "title": "svg sandbox",
    "url": "https://threejs.org/examples/#svg_sandbox",
  },
  Object {
    "name": "webgl_furnace_test",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_furnace_test.jpg",
    },
    "title": "webgl furnace test",
    "url": "https://threejs.org/examples/#webgl_furnace_test",
  },
  Object {
    "name": "webgl_pmrem_test",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/webgl_pmrem_test.jpg",
    },
    "title": "webgl pmrem test",
    "url": "https://threejs.org/examples/#webgl_pmrem_test",
  },
  Object {
    "name": "misc_uv_tests",
    "thumbnail": Object {
      "url": "https://threejs.org/examples/screenshots/misc_uv_tests.jpg",
    },
    "title": "misc uv tests",
    "url": "https://threejs.org/examples/#misc_uv_tests",
  },
]
`;
